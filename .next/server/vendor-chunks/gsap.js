"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gsap";
exports.ids = ["vendor-chunks/gsap"];
exports.modules = {

/***/ "(ssr)/./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSSPlugin: () => (/* binding */ CSSPlugin),\n/* harmony export */   _createElement: () => (/* binding */ _createElement),\n/* harmony export */   _getBBox: () => (/* binding */ _getBBox),\n/* harmony export */   checkPrefix: () => (/* binding */ _checkPropPrefix),\n/* harmony export */   \"default\": () => (/* binding */ CSSPlugin)\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(ssr)/./node_modules/gsap/gsap-core.js\");\n/*!\n * CSSPlugin 3.12.7\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ \nvar _win, _doc, _docElement, _pluginInitted, _tempDiv, _tempDivStyler, _recentSetterPlugin, _reverting, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _transformProps = {}, _RAD2DEG = 180 / Math.PI, _DEG2RAD = Math.PI / 180, _atan2 = Math.atan2, _bigNum = 1e8, _capsExp = /([A-Z])/g, _horizontalExp = /(left|right|width|margin|padding|x)/i, _complexExp = /[\\s,\\(]\\S/, _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n}, _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n}, _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n}, _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n}, //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)\n_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n}, _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n}, _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n}, _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n}, _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n}, _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n}, _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n}, _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n}, _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n}, _transformProp = \"transform\", _transformOriginProp = _transformProp + \"Origin\", _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n    var target = this.target, style = target.style, cache = target._gsap;\n    if (property in _transformProps && style) {\n        this.tfm = this.tfm || {};\n        if (property !== \"transform\") {\n            property = _propertyAliases[property] || property;\n            ~property.indexOf(\",\") ? property.split(\",\").forEach(function(a) {\n                return _this.tfm[a] = _get(target, a);\n            }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property); // note: scale would map to \"scaleX,scaleY\", thus we loop and apply them both.\n            property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);\n        } else {\n            return _propertyAliases.transform.split(\",\").forEach(function(p) {\n                return _saveStyle.call(_this, p, isNotCSS);\n            });\n        }\n        if (this.props.indexOf(_transformProp) >= 0) {\n            return;\n        }\n        if (cache.svg) {\n            this.svgo = target.getAttribute(\"data-svg-origin\");\n            this.props.push(_transformOriginProp, isNotCSS, \"\");\n        }\n        property = _transformProp;\n    }\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n}, _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n        style.removeProperty(\"translate\");\n        style.removeProperty(\"scale\");\n        style.removeProperty(\"rotate\");\n    }\n}, _revertStyle = function _revertStyle() {\n    var props = this.props, target = this.target, style = target.style, cache = target._gsap, i, p;\n    for(i = 0; i < props.length; i += 3){\n        // stored like this: property, isNotCSS, value\n        if (!props[i + 1]) {\n            props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n        } else if (props[i + 1] === 2) {\n            // non-CSS value (function-based)\n            target[props[i]](props[i + 2]);\n        } else {\n            // non-CSS value (not function-based)\n            target[props[i]] = props[i + 2];\n        }\n    }\n    if (this.tfm) {\n        for(p in this.tfm){\n            cache[p] = this.tfm[p];\n        }\n        if (cache.svg) {\n            cache.renderTransform();\n            target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n        }\n        i = _reverting();\n        if ((!i || !i.isStart) && !style[_transformProp]) {\n            _removeIndependentTransforms(style);\n            if (cache.zOrigin && style[_transformOriginProp]) {\n                style[_transformOriginProp] += \" \" + cache.zOrigin + \"px\"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.\n                cache.zOrigin = 0;\n                cache.renderTransform();\n            }\n            cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.\n        }\n    }\n}, _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n        target: target,\n        props: [],\n        revert: _revertStyle,\n        save: _saveStyle\n    };\n    target._gsap || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.\n    properties && target.style && target.nodeType && properties.split(\",\").forEach(function(p) {\n        return saver.save(p);\n    }); // make sure it's a DOM node too.\n    return saver;\n}, _supports3D, _createElement = function _createElement(type, ns) {\n    var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n    return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n}, _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\"; //css variables may not need caps swapped out for dashes and lowercase.\n}, _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"), _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv, s = e.style, i = 5;\n    if (property in s && !preferPrefix) {\n        return property;\n    }\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n    while(i-- && !(_prefixes[i] + property in s)){}\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n}, _initCore = function _initCore() {\n    if (_windowExists() && window.document) {\n        _win = window;\n        _doc = _win.document;\n        _docElement = _doc.documentElement;\n        _tempDiv = _createElement(\"div\") || {\n            style: {}\n        };\n        _tempDivStyler = _createElement(\"div\");\n        _transformProp = _checkPropPrefix(_transformProp);\n        _transformOriginProp = _transformProp + \"Origin\";\n        _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.\n        _supports3D = !!_checkPropPrefix(\"perspective\");\n        _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;\n        _pluginInitted = 1;\n    }\n}, _getReparentedCloneBBox = function _getReparentedCloneBBox(target) {\n    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n    var owner = target.ownerSVGElement, svg = _createElement(\"svg\", owner && owner.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"), clone = target.cloneNode(true), bbox;\n    clone.style.display = \"block\";\n    svg.appendChild(clone);\n    _docElement.appendChild(svg);\n    try {\n        bbox = clone.getBBox();\n    } catch (e) {}\n    svg.removeChild(clone);\n    _docElement.removeChild(svg);\n    return bbox;\n}, _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n    while(i--){\n        if (target.hasAttribute(attributesArray[i])) {\n            return target.getAttribute(attributesArray[i]);\n        }\n    }\n}, _getBBox = function _getBBox(target) {\n    var bounds, cloned;\n    try {\n        bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n    } catch (error) {\n        bounds = _getReparentedCloneBBox(target);\n        cloned = 1;\n    }\n    bounds && (bounds.width || bounds.height) || cloned || (bounds = _getReparentedCloneBBox(target)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n        x: +_getAttributeFallbacks(target, [\n            \"x\",\n            \"cx\",\n            \"x1\"\n        ]) || 0,\n        y: +_getAttributeFallbacks(target, [\n            \"y\",\n            \"cy\",\n            \"y1\"\n        ]) || 0,\n        width: 0,\n        height: 0\n    } : bounds;\n}, _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n}, //reports if the element is an SVG on which getBBox() actually works\n_removeProperty = function _removeProperty(target, property) {\n    if (property) {\n        var style = target.style, first2Chars;\n        if (property in _transformProps && property !== _transformOriginProp) {\n            property = _transformProp;\n        }\n        if (style.removeProperty) {\n            first2Chars = property.substr(0, 2);\n            if (first2Chars === \"ms\" || property.substr(0, 6) === \"webkit\") {\n                //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n                property = \"-\" + property;\n            }\n            style.removeProperty(first2Chars === \"--\" ? property : property.replace(_capsExp, \"-$1\").toLowerCase());\n        } else {\n            //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n            style.removeAttribute(property);\n        }\n    }\n}, _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n    plugin._props.push(property);\n    return pt;\n}, _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n}, _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n}, //takes a single value like 20px and converts it to the unit specified, like \"%\", returning only the numeric amount.\n_convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0, curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()\n    style = _tempDiv.style, horizontal = _horizontalExp.test(property), isRootSVG = target.tagName.toLowerCase() === \"svg\", measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"), amount = 100, toPixels = unit === \"px\", toPercent = unit === \"%\", px, parent, cache, isSVG;\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n        return curValue;\n    }\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n        px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n        return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = unit !== \"rem\" && ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n    if (isSVG) {\n        parent = (target.ownerSVGElement || {}).parentNode;\n    }\n    if (!parent || parent === _doc || !parent.appendChild) {\n        parent = _doc.body;\n    }\n    cache = parent._gsap;\n    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {\n        return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);\n    } else {\n        if (toPercent && (property === \"height\" || property === \"width\")) {\n            // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.\n            var v = target.style[property];\n            target.style[property] = amount + unit;\n            px = target[measureProperty];\n            v ? target.style[property] = v : _removeProperty(target, property);\n        } else {\n            (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n            parent === target && (style.position = \"static\"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.\n            parent.appendChild(_tempDiv);\n            px = _tempDiv[measureProperty];\n            parent.removeChild(_tempDiv);\n            style.position = \"absolute\";\n        }\n        if (horizontal && toPercent) {\n            cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);\n            cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;\n            cache.width = parent[measureProperty];\n        }\n    }\n    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n}, _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n    if (property in _propertyAliases && property !== \"transform\") {\n        property = _propertyAliases[property];\n        if (~property.indexOf(\",\")) {\n            property = property.split(\",\")[0];\n        }\n    }\n    if (_transformProps[property] && property !== \"transform\") {\n        value = _parseTransform(target, uncache);\n        value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n        value = target.style[property];\n        if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n            value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === \"opacity\" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius\n        }\n    }\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n}, _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    if (!start || start === \"none\") {\n        // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style (\"clipPath\" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as \"none\" whereas WebkitClipPath reports accurately like \"ellipse(100% 0% at 50% 0%)\", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/\n        var p = _checkPropPrefix(prop, target, 1), s = p && _getComputedProperty(target, p, 1);\n        if (s && s !== start) {\n            prop = p;\n            start = s;\n        } else if (prop === \"borderColor\") {\n            start = _getComputedProperty(target, \"borderTopColor\"); // Firefox bug: always reports \"borderColor\" as \"\", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/\n        }\n    }\n    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString), index = 0, matchIndex = 0, a, result, startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\"; // ensure values are strings\n    end += \"\";\n    if (end === \"auto\") {\n        startValue = target.style[prop];\n        target.style[prop] = end;\n        end = _getComputedProperty(target, prop) || end;\n        startValue ? target.style[prop] = startValue : _removeProperty(target, prop);\n    }\n    a = [\n        start,\n        end\n    ];\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];\n    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];\n    if (endValues.length) {\n        while(result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)){\n            endValue = result[0];\n            chunk = end.substring(index, result.index);\n            if (color) {\n                color = (color + 1) % 5;\n            } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n                color = 1;\n            }\n            if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n                startNum = parseFloat(startValue) || 0;\n                startUnit = startValue.substr((startNum + \"\").length);\n                endValue.charAt(1) === \"=\" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);\n                endNum = parseFloat(endValue);\n                endUnit = endValue.substr((endNum + \"\").length);\n                index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;\n                if (!endUnit) {\n                    //if something like \"perspective:300\" is passed in and we must add a unit to the end\n                    endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;\n                    if (index === end.length) {\n                        end += endUnit;\n                        pt.e += endUnit;\n                    }\n                }\n                if (startUnit !== endUnit) {\n                    startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n                } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n                pt._pt = {\n                    _next: pt._pt,\n                    p: chunk || matchIndex === 1 ? chunk : \",\",\n                    //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n                    s: startNum,\n                    c: endNum - startNum,\n                    m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n                };\n            }\n        }\n        pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n    } else {\n        pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus \"this\" would refer to the plugin.\n    return pt;\n}, _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n}, _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"), x = split[0], y = split[1] || \"50%\";\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n        //the user provided them in the wrong order, so flip them\n        value = x;\n        x = y;\n        y = value;\n    }\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n}, _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n        var target = data.t, style = target.style, props = data.u, cache = target._gsap, prop, clearTransforms, i;\n        if (props === \"all\" || props === true) {\n            style.cssText = \"\";\n            clearTransforms = 1;\n        } else {\n            props = props.split(\",\");\n            i = props.length;\n            while(--i > -1){\n                prop = props[i];\n                if (_transformProps[prop]) {\n                    clearTransforms = 1;\n                    prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n                }\n                _removeProperty(target, prop);\n            }\n        }\n        if (clearTransforms) {\n            _removeProperty(target, _transformProp);\n            if (cache) {\n                cache.svg && target.removeAttribute(\"transform\");\n                style.scale = style.rotate = style.translate = \"none\";\n                _parseTransform(target, 1); // force all the cached values back to \"normal\"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.\n                cache.uncache = 1;\n                _removeIndependentTransforms(style);\n            }\n        }\n    }\n}, // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.\n_specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n        if (tween.data !== \"isFromStart\") {\n            var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n            pt.u = endValue;\n            pt.pr = -10;\n            pt.tween = tween;\n            plugin._props.push(property);\n            return 1;\n        }\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * TRANSFORMS\n * --------------------------------------------------------------------------------------\n */ _identity2DMatrix = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n], _rotationalProperties = {}, _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n}, _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);\n}, _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target), style = target.style, matrix = _getComputedTransformMatrixAsArray(target), parent, nextSibling, temp, addedToDOM;\n    if (cache.svg && target.getAttribute(\"transform\")) {\n        temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n        matrix = [\n            temp.a,\n            temp.b,\n            temp.c,\n            temp.d,\n            temp.e,\n            temp.f\n        ];\n        return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n        //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n        temp = style.display;\n        style.display = \"block\";\n        parent = target.parentNode;\n        if (!parent || !target.offsetParent && !target.getBoundingClientRect().width) {\n            // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375. Note: position: fixed elements report a null offsetParent but they could also be invisible because they're in an ancestor with display: none, so we check getBoundingClientRect(). We only want to alter the DOM if we absolutely have to because it can cause iframe content to reload, like a Vimeo video.\n            addedToDOM = 1; //flag\n            nextSibling = target.nextElementSibling;\n            _docElement.appendChild(target); //we must add it to the DOM in order to get values properly\n        }\n        matrix = _getComputedTransformMatrixAsArray(target);\n        temp ? style.display = temp : _removeProperty(target, \"display\");\n        if (addedToDOM) {\n            nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n        }\n    }\n    return force2D && matrix.length > 6 ? [\n        matrix[0],\n        matrix[1],\n        matrix[4],\n        matrix[5],\n        matrix[12],\n        matrix[13]\n    ] : matrix;\n}, _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap, matrix = matrixArray || _getMatrix(target, true), xOriginOld = cache.xOrigin || 0, yOriginOld = cache.yOrigin || 0, xOffsetOld = cache.xOffset || 0, yOffsetOld = cache.yOffset || 0, a = matrix[0], b = matrix[1], c = matrix[2], d = matrix[3], tx = matrix[4], ty = matrix[5], originSplit = origin.split(\" \"), xOrigin = parseFloat(originSplit[0]) || 0, yOrigin = parseFloat(originSplit[1]) || 0, bounds, determinant, x, y;\n    if (!originIsAbsolute) {\n        bounds = _getBBox(target);\n        xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin); // if (!(\"xOrigin\" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration\n    // \txOrigin -= bounds.x;\n    // \tyOrigin -= bounds.y;\n    // }\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n        xOrigin = x;\n        yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.\n    }\n    if (smooth || smooth !== false && cache.smooth) {\n        tx = xOrigin - xOriginOld;\n        ty = yOrigin - yOriginOld;\n        cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n        cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n        cache.xOffset = cache.yOffset = 0;\n    }\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).\n    if (pluginToAddPropTweensTo) {\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n}, _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n        return cache;\n    }\n    var style = target.style, invertedScaleX = cache.scaleX < 0, px = \"px\", deg = \"deg\", cs = getComputedStyle(target), origin = _getComputedProperty(target, _transformOriginProp) || \"0\", x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin, matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n    if (cs.translate) {\n        // accommodate independent transforms by combining them into normal ones.\n        if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n            style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n        }\n        style.scale = style.rotate = style.translate = \"none\";\n    }\n    matrix = _getMatrix(target, cache.svg);\n    if (cache.svg) {\n        if (cache.uncache) {\n            // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + \"px \" + (cache.yOrigin - bbox.y) + \"px\". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.\n            t2 = target.getBBox();\n            origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n            t1 = \"\";\n        } else {\n            t1 = !uncache && target.getAttribute(\"data-svg-origin\"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.\n        }\n        _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n    if (matrix !== _identity2DMatrix) {\n        a = matrix[0]; //a11\n        b = matrix[1]; //a21\n        c = matrix[2]; //a31\n        d = matrix[3]; //a41\n        x = a12 = matrix[4];\n        y = a22 = matrix[5]; //2D matrix\n        if (matrix.length === 6) {\n            scaleX = Math.sqrt(a * a + b * b);\n            scaleY = Math.sqrt(d * d + c * c);\n            rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n            skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n            skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n            if (cache.svg) {\n                x -= xOrigin - (xOrigin * a + yOrigin * c);\n                y -= yOrigin - (xOrigin * b + yOrigin * d);\n            } //3D matrix\n        } else {\n            a32 = matrix[6];\n            a42 = matrix[7];\n            a13 = matrix[8];\n            a23 = matrix[9];\n            a33 = matrix[10];\n            a43 = matrix[11];\n            x = matrix[12];\n            y = matrix[13];\n            z = matrix[14];\n            angle = _atan2(a32, a33);\n            rotationX = angle * _RAD2DEG; //rotationX\n            if (angle) {\n                cos = Math.cos(-angle);\n                sin = Math.sin(-angle);\n                t1 = a12 * cos + a13 * sin;\n                t2 = a22 * cos + a23 * sin;\n                t3 = a32 * cos + a33 * sin;\n                a13 = a12 * -sin + a13 * cos;\n                a23 = a22 * -sin + a23 * cos;\n                a33 = a32 * -sin + a33 * cos;\n                a43 = a42 * -sin + a43 * cos;\n                a12 = t1;\n                a22 = t2;\n                a32 = t3;\n            } //rotationY\n            angle = _atan2(-c, a33);\n            rotationY = angle * _RAD2DEG;\n            if (angle) {\n                cos = Math.cos(-angle);\n                sin = Math.sin(-angle);\n                t1 = a * cos - a13 * sin;\n                t2 = b * cos - a23 * sin;\n                t3 = c * cos - a33 * sin;\n                a43 = d * sin + a43 * cos;\n                a = t1;\n                b = t2;\n                c = t3;\n            } //rotationZ\n            angle = _atan2(b, a);\n            rotation = angle * _RAD2DEG;\n            if (angle) {\n                cos = Math.cos(angle);\n                sin = Math.sin(angle);\n                t1 = a * cos + b * sin;\n                t2 = a12 * cos + a22 * sin;\n                b = b * cos - a * sin;\n                a22 = a22 * cos - a12 * sin;\n                a = t1;\n                a12 = t2;\n            }\n            if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n                //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n                rotationX = rotation = 0;\n                rotationY = 180 - rotationY;\n            }\n            scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));\n            scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));\n            angle = _atan2(a12, a22);\n            skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n            perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n        }\n        if (cache.svg) {\n            //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).\n            t1 = target.getAttribute(\"transform\");\n            cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n            t1 && target.setAttribute(\"transform\", t1);\n        }\n    }\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n        if (invertedScaleX) {\n            scaleX *= -1;\n            skewX += rotation <= 0 ? 180 : -180;\n            rotation += rotation <= 0 ? 180 : -180;\n        } else {\n            scaleY *= -1;\n            skewX += skewX <= 0 ? 180 : -180;\n        }\n    }\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);\n    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);\n    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;\n    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;\n    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || !uncache && cache.zOrigin || 0) {\n        style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n}, _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n}, //for handling transformOrigin values, stripping out the 3rd dimension\n_addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);\n    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n}, _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n    _renderCSSTransforms(ratio, cache);\n}, _zeroDeg = \"0deg\", _zeroPx = \"0px\", _endParenthesis = \") \", _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this, xPercent = _ref.xPercent, yPercent = _ref.yPercent, x = _ref.x, y = _ref.y, z = _ref.z, rotation = _ref.rotation, rotationY = _ref.rotationY, rotationX = _ref.rotationX, skewX = _ref.skewX, skewY = _ref.skewY, scaleX = _ref.scaleX, scaleY = _ref.scaleY, transformPerspective = _ref.transformPerspective, force3D = _ref.force3D, target = _ref.target, zOrigin = _ref.zOrigin, transforms = \"\", use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n        var angle = parseFloat(rotationY) * _DEG2RAD, a13 = Math.sin(angle), a33 = Math.cos(angle), cos;\n        angle = parseFloat(rotationX) * _DEG2RAD;\n        cos = Math.cos(angle);\n        x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n        y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n        z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n    if (transformPerspective !== _zeroPx) {\n        transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n    if (xPercent || yPercent) {\n        transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n        transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n    if (rotation !== _zeroDeg) {\n        transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n    if (rotationY !== _zeroDeg) {\n        transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n    if (rotationX !== _zeroDeg) {\n        transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n        transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n    if (scaleX !== 1 || scaleY !== 1) {\n        transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n}, _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this, xPercent = _ref2.xPercent, yPercent = _ref2.yPercent, x = _ref2.x, y = _ref2.y, rotation = _ref2.rotation, skewX = _ref2.skewX, skewY = _ref2.skewY, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, target = _ref2.target, xOrigin = _ref2.xOrigin, yOrigin = _ref2.yOrigin, xOffset = _ref2.xOffset, yOffset = _ref2.yOffset, forceCSS = _ref2.forceCSS, tx = parseFloat(x), ty = parseFloat(y), a11, a21, a12, a22, temp;\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n    if (skewY) {\n        //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n        skewY = parseFloat(skewY);\n        skewX += skewY;\n        rotation += skewY;\n    }\n    if (rotation || skewX) {\n        rotation *= _DEG2RAD;\n        skewX *= _DEG2RAD;\n        a11 = Math.cos(rotation) * scaleX;\n        a21 = Math.sin(rotation) * scaleX;\n        a12 = Math.sin(rotation - skewX) * -scaleY;\n        a22 = Math.cos(rotation - skewX) * scaleY;\n        if (skewX) {\n            skewY *= _DEG2RAD;\n            temp = Math.tan(skewX - skewY);\n            temp = Math.sqrt(1 + temp * temp);\n            a12 *= temp;\n            a22 *= temp;\n            if (skewY) {\n                temp = Math.tan(skewY);\n                temp = Math.sqrt(1 + temp * temp);\n                a11 *= temp;\n                a21 *= temp;\n            }\n        }\n        a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);\n        a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);\n        a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);\n        a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);\n    } else {\n        a11 = scaleX;\n        a22 = scaleY;\n        a21 = a12 = 0;\n    }\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n        tx = _convertToUnit(target, \"x\", x, \"px\");\n        ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n        tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n        ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n    if (xPercent || yPercent) {\n        //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the translation to simulate it.\n        temp = target.getBBox();\n        tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);\n        ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);\n    }\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)\n}, _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360, isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue), endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1), change = endNum - startNum, finalValue = startNum + change + \"deg\", direction, pt;\n    if (isString) {\n        direction = endValue.split(\"_\")[1];\n        if (direction === \"short\") {\n            change %= cap;\n            if (change !== change % (cap / 2)) {\n                change += change < 0 ? cap : -cap;\n            }\n        }\n        if (direction === \"cw\" && change < 0) {\n            change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;\n        } else if (direction === \"ccw\" && change > 0) {\n            change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;\n        }\n    }\n    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n    plugin._props.push(property);\n    return pt;\n}, _assign = function _assign(target, source) {\n    // Internet Explorer doesn't have Object.assign(), so we recreate it here.\n    for(var p in source){\n        target[p] = source[p];\n    }\n    return target;\n}, _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    //for handling cases where someone passes in a whole transform string, like transform: \"scale(2, 3) rotate(20deg) translateY(30em)\"\n    var startCache = _assign({}, target._gsap), exclude = \"perspective,force3D,transformOrigin,svgOrigin\", style = target.style, endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;\n    if (startCache.svg) {\n        startValue = target.getAttribute(\"transform\");\n        target.setAttribute(\"transform\", \"\");\n        style[_transformProp] = transforms;\n        endCache = _parseTransform(target, 1);\n        _removeProperty(target, _transformProp);\n        target.setAttribute(\"transform\", startValue);\n    } else {\n        startValue = getComputedStyle(target)[_transformProp];\n        style[_transformProp] = transforms;\n        endCache = _parseTransform(target, 1);\n        style[_transformProp] = startValue;\n    }\n    for(p in _transformProps){\n        startValue = startCache[p];\n        endValue = endCache[p];\n        if (startValue !== endValue && exclude.indexOf(p) < 0) {\n            //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n            startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);\n            endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);\n            startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n            endNum = parseFloat(endValue);\n            plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n            plugin._pt.u = endUnit || 0;\n            plugin._props.push(p);\n        }\n    }\n    _assign(endCache, startCache);\n}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.\n(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(\"padding,margin,Width,Radius\", function(name, index) {\n    var t = \"Top\", r = \"Right\", b = \"Bottom\", l = \"Left\", props = (index < 3 ? [\n        t,\n        r,\n        b,\n        l\n    ] : [\n        t + l,\n        t + r,\n        b + r,\n        b + l\n    ]).map(function(side) {\n        return index < 2 ? name + side : \"border\" + side + name;\n    });\n    _specialProps[index > 1 ? \"border\" + name : name] = function(plugin, target, property, endValue, tween) {\n        var a, vars;\n        if (arguments.length < 4) {\n            // getter, passed target, property, and unit (from _get())\n            a = props.map(function(prop) {\n                return _get(plugin, prop, property);\n            });\n            vars = a.join(\" \");\n            return vars.split(a[0]).length === 5 ? a[0] : vars;\n        }\n        a = (endValue + \"\").split(\" \");\n        vars = {};\n        props.forEach(function(prop, i) {\n            return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n        });\n        plugin.init(target, vars, tween);\n    };\n});\nvar CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n        return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n        var props = this._props, style = target.style, startAt = tween.vars.startAt, startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;\n        _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps\n        this.styles = this.styles || _getStyleSaver(target);\n        inlineProps = this.styles.props;\n        this.tween = tween;\n        for(p in vars){\n            if (p === \"autoRound\") {\n                continue;\n            }\n            endValue = vars[p];\n            if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {\n                continue;\n            }\n            type = typeof endValue;\n            specialProp = _specialProps[p];\n            if (type === \"function\") {\n                endValue = endValue.call(tween, index, target, targets);\n                type = typeof endValue;\n            }\n            if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n                endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);\n            }\n            if (specialProp) {\n                specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n            } else if (p.substr(0, 2) === \"--\") {\n                //CSS variable\n                startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n                endValue += \"\";\n                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;\n                if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {\n                    // colors don't have units\n                    startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);\n                    endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);\n                }\n                endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n                this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n                props.push(p);\n                inlineProps.push(p, 0, style[p]);\n            } else if (type !== \"undefined\") {\n                if (startAt && p in startAt) {\n                    // in case someone hard-codes a complex value as the start, like top: \"calc(2vh / 2)\". Without this, it'd use the computed value (always in px)\n                    startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n                    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf(\"random(\") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));\n                    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + \"\") || startValue === \"auto\" || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || \"\"); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.\n                    (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p)); // can't work with relative values\n                } else {\n                    startValue = _get(target, p);\n                }\n                startNum = parseFloat(startValue);\n                relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n                relative && (endValue = endValue.substr(2));\n                endNum = parseFloat(endValue);\n                if (p in _propertyAliases) {\n                    if (p === \"autoAlpha\") {\n                        //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.\n                        if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                            //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n                            startNum = 0;\n                        }\n                        inlineProps.push(\"visibility\", 0, style.visibility);\n                        _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n                    }\n                    if (p !== \"scale\" && p !== \"transform\") {\n                        p = _propertyAliases[p];\n                        ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n                    }\n                }\n                isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---\n                if (isTransformRelated) {\n                    this.styles.save(p);\n                    if (!transformPropTween) {\n                        cache = target._gsap;\n                        cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:\"translateX(50vw)\"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.\n                        smooth = vars.smoothOrigin !== false && cache.smooth;\n                        transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)\n                        transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.\n                    }\n                    if (p === \"scale\") {\n                        this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n                        this._pt.u = 0;\n                        props.push(\"scaleY\", p);\n                        p += \"X\";\n                    } else if (p === \"transformOrigin\") {\n                        inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n                        endValue = _convertKeywordsToPercentages(endValue); //in case something like \"left top\" or \"bottom right\" is passed in. Convert to percentages.\n                        if (cache.svg) {\n                            _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n                        } else {\n                            endUnit = parseFloat(endValue.split(\" \")[2]) || 0; //handle the zOrigin separately!\n                            endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n                            _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n                        }\n                        continue;\n                    } else if (p === \"svgOrigin\") {\n                        _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n                        continue;\n                    } else if (p in _rotationalProperties) {\n                        _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);\n                        continue;\n                    } else if (p === \"smoothOrigin\") {\n                        _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n                        continue;\n                    } else if (p === \"force3D\") {\n                        cache[p] = endValue;\n                        continue;\n                    } else if (p === \"transform\") {\n                        _addRawTransformPTs(this, endValue, target);\n                        continue;\n                    }\n                } else if (!(p in style)) {\n                    p = _checkPropPrefix(p) || p;\n                }\n                if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n                    startUnit = (startValue + \"\").substr((startNum + \"\").length);\n                    endNum || (endNum = 0); // protect against NaN\n                    endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);\n                    startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n                    this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n                    this._pt.u = endUnit || 0;\n                    if (startUnit !== endUnit && endUnit !== \"%\") {\n                        //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a \"b\" (beginning) property and point to a render method that handles that. (performance optimization)\n                        this._pt.b = startValue;\n                        this._pt.r = _renderCSSPropWithBeginning;\n                    }\n                } else if (!(p in style)) {\n                    if (p in target) {\n                        //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.\n                        this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n                    } else if (p !== \"parseTransform\") {\n                        (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);\n                        continue;\n                    }\n                } else {\n                    _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n                }\n                isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : typeof target[p] === \"function\" ? inlineProps.push(p, 2, target[p]()) : inlineProps.push(p, 1, startValue || target[p]));\n                props.push(p);\n            }\n        }\n        hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);\n    },\n    render: function render(ratio, data) {\n        if (data.tween._time || !_reverting()) {\n            var pt = data._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n        } else {\n            data.styles.revert();\n        }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n        //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like \"x\" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.\n        var p = _propertyAliases[property];\n        p && p.indexOf(\",\") < 0 && (property = p);\n        return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);\n    },\n    core: {\n        _removeProperty: _removeProperty,\n        _getMatrix: _getMatrix\n    }\n};\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;\n(function(positionAndScale, rotation, others, aliases) {\n    var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + \",\" + rotation + \",\" + others, function(name) {\n        _transformProps[name] = 1;\n    });\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function(name) {\n        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = \"deg\";\n        _rotationalProperties[name] = 1;\n    });\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function(name) {\n        var split = name.split(\":\");\n        _propertyAliases[split[1]] = all[split[0]];\n    });\n})(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function(name) {\n    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = \"px\";\n});\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/CSSPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/Observer.js":
/*!***************************************!*\
  !*** ./node_modules/gsap/Observer.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observer: () => (/* binding */ Observer),\n/* harmony export */   _getProxyProp: () => (/* binding */ _getProxyProp),\n/* harmony export */   _getScrollFunc: () => (/* binding */ _getScrollFunc),\n/* harmony export */   _getTarget: () => (/* binding */ _getTarget),\n/* harmony export */   _getVelocityProp: () => (/* binding */ _getVelocityProp),\n/* harmony export */   _horizontal: () => (/* binding */ _horizontal),\n/* harmony export */   _isViewport: () => (/* binding */ _isViewport),\n/* harmony export */   _proxies: () => (/* binding */ _proxies),\n/* harmony export */   _scrollers: () => (/* binding */ _scrollers),\n/* harmony export */   _vertical: () => (/* binding */ _vertical),\n/* harmony export */   \"default\": () => (/* binding */ Observer)\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n/*!\n * Observer 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ var gsap, _coreInitted, _clamp, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context, _getGSAP = function _getGSAP() {\n    return gsap ||  false && 0;\n}, _startup = 1, _observers = [], _scrollers = [], _proxies = [], _getTime = Date.now, _bridge = function _bridge(name, value) {\n    return value;\n}, _integrate = function _integrate() {\n    var core = ScrollTrigger.core, data = core.bridge || {}, scrollers = core._scrollers, proxies = core._proxies;\n    scrollers.push.apply(scrollers, _scrollers);\n    proxies.push.apply(proxies, _proxies);\n    _scrollers = scrollers;\n    _proxies = proxies;\n    _bridge = function _bridge(name, value) {\n        return data[name](value);\n    };\n}, _getProxyProp = function _getProxyProp(element, property) {\n    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];\n}, _isViewport = function _isViewport(el) {\n    return !!~_root.indexOf(el);\n}, _addListener = function _addListener(element, type, func, passive, capture) {\n    return element.addEventListener(type, func, {\n        passive: passive !== false,\n        capture: !!capture\n    });\n}, _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n}, _scrollLeft = \"scrollLeft\", _scrollTop = \"scrollTop\", _onScroll = function _onScroll() {\n    return _normalizer && _normalizer.isPressed || _scrollers.cache++;\n}, _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {\n    var cachingFunc = function cachingFunc(value) {\n        // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a \"scroll\" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when \"soft\" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)\n        if (value || value === 0) {\n            _startup && (_win.history.scrollRestoration = \"manual\"); // otherwise the new position will get overwritten by the browser onload.\n            var isNormalizing = _normalizer && _normalizer.isPressed;\n            value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!\n            f(value);\n            cachingFunc.cacheID = _scrollers.cache;\n            isNormalizing && _bridge(\"ss\", value); // set scroll (notify ScrollTrigger so it can dispatch a \"scrollStart\" event if necessary\n        } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge(\"ref\")) {\n            cachingFunc.cacheID = _scrollers.cache;\n            cachingFunc.v = f();\n        }\n        return cachingFunc.v + cachingFunc.offset;\n    };\n    cachingFunc.offset = 0;\n    return f && cachingFunc;\n}, _horizontal = {\n    s: _scrollLeft,\n    p: \"left\",\n    p2: \"Left\",\n    os: \"right\",\n    os2: \"Right\",\n    d: \"width\",\n    d2: \"Width\",\n    a: \"x\",\n    sc: _scrollCacheFunc(function(value) {\n        return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;\n    })\n}, _vertical = {\n    s: _scrollTop,\n    p: \"top\",\n    p2: \"Top\",\n    os: \"bottom\",\n    os2: \"Bottom\",\n    d: \"height\",\n    d2: \"Height\",\n    a: \"y\",\n    op: _horizontal,\n    sc: _scrollCacheFunc(function(value) {\n        return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;\n    })\n}, _getTarget = function _getTarget(t, self) {\n    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === \"string\" && gsap.config().nullTargetWarn !== false ? console.warn(\"Element not found:\", t) : null);\n}, _getScrollFunc = function _getScrollFunc(element, _ref) {\n    var s = _ref.s, sc = _ref.sc;\n    // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a \".rec\" property in order to revert to that after refreshing to ensure things don't shift around.\n    _isViewport(element) && (element = _doc.scrollingElement || _docEl);\n    var i = _scrollers.indexOf(element), offset = sc === _vertical.sc ? 1 : 2;\n    !~i && (i = _scrollers.push(element) - 1);\n    _scrollers[i + offset] || _addListener(element, \"scroll\", _onScroll); // clear the cache when a scroll occurs\n    var prev = _scrollers[i + offset], func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function(value) {\n        return arguments.length ? element[s] = value : element[s];\n    })));\n    func.target = element;\n    prev || (func.smooth = gsap.getProperty(element, \"scrollBehavior\") === \"smooth\"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.\n    return func;\n}, _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {\n    var v1 = value, v2 = value, t1 = _getTime(), t2 = t1, min = minTimeRefresh || 50, dropToZeroTime = Math.max(500, min * 3), update = function update(value, force) {\n        var t = _getTime();\n        if (force || t - t1 > min) {\n            v2 = v1;\n            v1 = value;\n            t2 = t1;\n            t1 = t;\n        } else if (useDelta) {\n            v1 += value;\n        } else {\n            // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.\n            v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);\n        }\n    }, reset = function reset() {\n        v2 = v1 = useDelta ? 0 : v1;\n        t2 = t1 = 0;\n    }, getVelocity = function getVelocity(latestValue) {\n        var tOld = t2, vOld = v2, t = _getTime();\n        (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);\n        return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;\n    };\n    return {\n        update: update,\n        reset: reset,\n        getVelocity: getVelocity\n    };\n}, _getEvent = function _getEvent(e, preventDefault) {\n    preventDefault && !e._gsapAllow && e.preventDefault();\n    return e.changedTouches ? e.changedTouches[0] : e;\n}, _getAbsoluteMax = function _getAbsoluteMax(a) {\n    var max = Math.max.apply(Math, a), min = Math.min.apply(Math, a);\n    return Math.abs(max) >= Math.abs(min) ? max : min;\n}, _setScrollTrigger = function _setScrollTrigger() {\n    ScrollTrigger = gsap.core.globals().ScrollTrigger;\n    ScrollTrigger && ScrollTrigger.core && _integrate();\n}, _initCore = function _initCore(core) {\n    gsap = core || _getGSAP();\n    if (!_coreInitted && gsap && typeof document !== \"undefined\" && document.body) {\n        _win = window;\n        _doc = document;\n        _docEl = _doc.documentElement;\n        _body = _doc.body;\n        _root = [\n            _win,\n            _doc,\n            _docEl,\n            _body\n        ];\n        _clamp = gsap.utils.clamp;\n        _context = gsap.core.context || function() {};\n        _pointerType = \"onpointerenter\" in _body ? \"pointer\" : \"mouse\"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.\n        _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? 1 : \"ontouchstart\" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;\n        _eventTypes = Observer.eventTypes = (\"ontouchstart\" in _docEl ? \"touchstart,touchmove,touchcancel,touchend\" : !(\"onpointerdown\" in _docEl) ? \"mousedown,mousemove,mouseup,mouseup\" : \"pointerdown,pointermove,pointercancel,pointerup\").split(\",\");\n        setTimeout(function() {\n            return _startup = 0;\n        }, 500);\n        _setScrollTrigger();\n        _coreInitted = 1;\n    }\n    return _coreInitted;\n};\n_horizontal.op = _vertical;\n_scrollers.cache = 0;\nvar Observer = /*#__PURE__*/ function() {\n    function Observer(vars) {\n        this.init(vars);\n    }\n    var _proto = Observer.prototype;\n    _proto.init = function init(vars) {\n        _coreInitted || _initCore(gsap) || console.warn(\"Please gsap.registerPlugin(Observer)\");\n        ScrollTrigger || _setScrollTrigger();\n        var tolerance = vars.tolerance, dragMinimum = vars.dragMinimum, type = vars.type, target = vars.target, lineHeight = vars.lineHeight, debounce = vars.debounce, preventDefault = vars.preventDefault, onStop = vars.onStop, onStopDelay = vars.onStopDelay, ignore = vars.ignore, wheelSpeed = vars.wheelSpeed, event = vars.event, onDragStart = vars.onDragStart, onDragEnd = vars.onDragEnd, onDrag = vars.onDrag, onPress = vars.onPress, onRelease = vars.onRelease, onRight = vars.onRight, onLeft = vars.onLeft, onUp = vars.onUp, onDown = vars.onDown, onChangeX = vars.onChangeX, onChangeY = vars.onChangeY, onChange = vars.onChange, onToggleX = vars.onToggleX, onToggleY = vars.onToggleY, onHover = vars.onHover, onHoverEnd = vars.onHoverEnd, onMove = vars.onMove, ignoreCheck = vars.ignoreCheck, isNormalizer = vars.isNormalizer, onGestureStart = vars.onGestureStart, onGestureEnd = vars.onGestureEnd, onWheel = vars.onWheel, onEnable = vars.onEnable, onDisable = vars.onDisable, onClick = vars.onClick, scrollSpeed = vars.scrollSpeed, capture = vars.capture, allowClicks = vars.allowClicks, lockAxis = vars.lockAxis, onLockAxis = vars.onLockAxis;\n        this.target = target = _getTarget(target) || _docEl;\n        this.vars = vars;\n        ignore && (ignore = gsap.utils.toArray(ignore));\n        tolerance = tolerance || 1e-9;\n        dragMinimum = dragMinimum || 0;\n        wheelSpeed = wheelSpeed || 1;\n        scrollSpeed = scrollSpeed || 1;\n        type = type || \"wheel,touch,pointer\";\n        debounce = debounce !== false;\n        lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report \"normal\", so default to 22.\n        var id, onStopDelayedCall, dragged, moved, wheeled, locked, axis, self = this, prevDeltaX = 0, prevDeltaY = 0, passive = vars.passive || !preventDefault && vars.passive !== false, scrollFuncX = _getScrollFunc(target, _horizontal), scrollFuncY = _getScrollFunc(target, _vertical), scrollX = scrollFuncX(), scrollY = scrollFuncY(), limitToTouch = ~type.indexOf(\"touch\") && !~type.indexOf(\"pointer\") && _eventTypes[0] === \"pointerdown\", // for devices that accommodate mouse events and touch events, we need to distinguish.\n        isViewport = _isViewport(target), ownerDoc = target.ownerDocument || _doc, deltaX = [\n            0,\n            0,\n            0\n        ], // wheel, scroll, pointer/touch\n        deltaY = [\n            0,\n            0,\n            0\n        ], onClickTime = 0, clickCapture = function clickCapture() {\n            return onClickTime = _getTime();\n        }, _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {\n            return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== \"touch\" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);\n        }, onStopFunc = function onStopFunc() {\n            self._vx.reset();\n            self._vy.reset();\n            onStopDelayedCall.pause();\n            onStop && onStop(self);\n        }, update = function update() {\n            var dx = self.deltaX = _getAbsoluteMax(deltaX), dy = self.deltaY = _getAbsoluteMax(deltaY), changedX = Math.abs(dx) >= tolerance, changedY = Math.abs(dy) >= tolerance;\n            onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.\n            if (changedX) {\n                onRight && self.deltaX > 0 && onRight(self);\n                onLeft && self.deltaX < 0 && onLeft(self);\n                onChangeX && onChangeX(self);\n                onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);\n                prevDeltaX = self.deltaX;\n                deltaX[0] = deltaX[1] = deltaX[2] = 0;\n            }\n            if (changedY) {\n                onDown && self.deltaY > 0 && onDown(self);\n                onUp && self.deltaY < 0 && onUp(self);\n                onChangeY && onChangeY(self);\n                onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);\n                prevDeltaY = self.deltaY;\n                deltaY[0] = deltaY[1] = deltaY[2] = 0;\n            }\n            if (moved || dragged) {\n                onMove && onMove(self);\n                if (dragged) {\n                    onDragStart && dragged === 1 && onDragStart(self);\n                    onDrag && onDrag(self);\n                    dragged = 0;\n                }\n                moved = false;\n            }\n            locked && !(locked = false) && onLockAxis && onLockAxis(self);\n            if (wheeled) {\n                onWheel(self);\n                wheeled = false;\n            }\n            id = 0;\n        }, onDelta = function onDelta(x, y, index) {\n            deltaX[index] += x;\n            deltaY[index] += y;\n            self._vx.update(x);\n            self._vy.update(y);\n            debounce ? id || (id = requestAnimationFrame(update)) : update();\n        }, onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {\n            if (lockAxis && !axis) {\n                self.axis = axis = Math.abs(x) > Math.abs(y) ? \"x\" : \"y\";\n                locked = true;\n            }\n            if (axis !== \"y\") {\n                deltaX[2] += x;\n                self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.\n            }\n            if (axis !== \"x\") {\n                deltaY[2] += y;\n                self._vy.update(y, true);\n            }\n            debounce ? id || (id = requestAnimationFrame(update)) : update();\n        }, _onDrag = function _onDrag(e) {\n            if (_ignoreCheck(e, 1)) {\n                return;\n            }\n            e = _getEvent(e, preventDefault);\n            var x = e.clientX, y = e.clientY, dx = x - self.x, dy = y - self.y, isDragging = self.isDragging;\n            self.x = x;\n            self.y = y;\n            if (isDragging || (dx || dy) && (Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum)) {\n                dragged = isDragging ? 2 : 1; // dragged: 0 = not dragging, 1 = first drag, 2 = normal drag\n                isDragging || (self.isDragging = true);\n                onTouchOrPointerDelta(dx, dy);\n            }\n        }, _onPress = self.onPress = function(e) {\n            if (_ignoreCheck(e, 1) || e && e.button) {\n                return;\n            }\n            self.axis = axis = null;\n            onStopDelayedCall.pause();\n            self.isPressed = true;\n            e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.\n            prevDeltaX = prevDeltaY = 0;\n            self.startX = self.x = e.clientX;\n            self.startY = self.y = e.clientY;\n            self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.\n            self._vy.reset();\n            _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);\n            self.deltaX = self.deltaY = 0;\n            onPress && onPress(self);\n        }, _onRelease = self.onRelease = function(e) {\n            if (_ignoreCheck(e, 1)) {\n                return;\n            }\n            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n            var isTrackingDrag = !isNaN(self.y - self.startY), wasDragging = self.isDragging, isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3), // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.\n            eventData = _getEvent(e);\n            if (!isDragNotClick && isTrackingDrag) {\n                self._vx.reset();\n                self._vy.reset(); //if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.\n                if (preventDefault && allowClicks) {\n                    gsap.delayedCall(0.08, function() {\n                        // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n                        if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {\n                            if (e.target.click) {\n                                //some browsers (like mobile Safari) don't properly trigger the click event\n                                e.target.click();\n                            } else if (ownerDoc.createEvent) {\n                                var syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);\n                                e.target.dispatchEvent(syntheticEvent);\n                            }\n                        }\n                    });\n                }\n            }\n            self.isDragging = self.isGesturing = self.isPressed = false;\n            onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);\n            dragged && update(); // in case debouncing, we don't want onDrag to fire AFTER onDragEnd().\n            onDragEnd && wasDragging && onDragEnd(self);\n            onRelease && onRelease(self, isDragNotClick);\n        }, _onGestureStart = function _onGestureStart(e) {\n            return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);\n        }, _onGestureEnd = function _onGestureEnd() {\n            return (self.isGesturing = false) || onGestureEnd(self);\n        }, onScroll = function onScroll(e) {\n            if (_ignoreCheck(e)) {\n                return;\n            }\n            var x = scrollFuncX(), y = scrollFuncY();\n            onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);\n            scrollX = x;\n            scrollY = y;\n            onStop && onStopDelayedCall.restart(true);\n        }, _onWheel = function _onWheel(e) {\n            if (_ignoreCheck(e)) {\n                return;\n            }\n            e = _getEvent(e, preventDefault);\n            onWheel && (wheeled = true);\n            var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;\n            onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);\n            onStop && !isNormalizer && onStopDelayedCall.restart(true);\n        }, _onMove = function _onMove(e) {\n            if (_ignoreCheck(e)) {\n                return;\n            }\n            var x = e.clientX, y = e.clientY, dx = x - self.x, dy = y - self.y;\n            self.x = x;\n            self.y = y;\n            moved = true;\n            onStop && onStopDelayedCall.restart(true);\n            (dx || dy) && onTouchOrPointerDelta(dx, dy);\n        }, _onHover = function _onHover(e) {\n            self.event = e;\n            onHover(self);\n        }, _onHoverEnd = function _onHoverEnd(e) {\n            self.event = e;\n            onHoverEnd(self);\n        }, _onClick = function _onClick(e) {\n            return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);\n        };\n        onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();\n        self.deltaX = self.deltaY = 0;\n        self._vx = _getVelocityProp(0, 50, true);\n        self._vy = _getVelocityProp(0, 50, true);\n        self.scrollX = scrollFuncX;\n        self.scrollY = scrollFuncY;\n        self.isDragging = self.isGesturing = self.isPressed = false;\n        _context(this);\n        self.enable = function(e) {\n            if (!self.isEnabled) {\n                _addListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n                type.indexOf(\"scroll\") >= 0 && _addListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, passive, capture);\n                type.indexOf(\"wheel\") >= 0 && _addListener(target, \"wheel\", _onWheel, passive, capture);\n                if (type.indexOf(\"touch\") >= 0 && _isTouch || type.indexOf(\"pointer\") >= 0) {\n                    _addListener(target, _eventTypes[0], _onPress, passive, capture);\n                    _addListener(ownerDoc, _eventTypes[2], _onRelease);\n                    _addListener(ownerDoc, _eventTypes[3], _onRelease);\n                    allowClicks && _addListener(target, \"click\", clickCapture, true, true);\n                    onClick && _addListener(target, \"click\", _onClick);\n                    onGestureStart && _addListener(ownerDoc, \"gesturestart\", _onGestureStart);\n                    onGestureEnd && _addListener(ownerDoc, \"gestureend\", _onGestureEnd);\n                    onHover && _addListener(target, _pointerType + \"enter\", _onHover);\n                    onHoverEnd && _addListener(target, _pointerType + \"leave\", _onHoverEnd);\n                    onMove && _addListener(target, _pointerType + \"move\", _onMove);\n                }\n                self.isEnabled = true;\n                self.isDragging = self.isGesturing = self.isPressed = moved = dragged = false;\n                self._vx.reset();\n                self._vy.reset();\n                scrollX = scrollFuncX();\n                scrollY = scrollFuncY();\n                e && e.type && _onPress(e);\n                onEnable && onEnable(self);\n            }\n            return self;\n        };\n        self.disable = function() {\n            if (self.isEnabled) {\n                // only remove the _onScroll listener if there aren't any others that rely on the functionality.\n                _observers.filter(function(o) {\n                    return o !== self && _isViewport(o.target);\n                }).length || _removeListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n                if (self.isPressed) {\n                    self._vx.reset();\n                    self._vy.reset();\n                    _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n                }\n                _removeListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, capture);\n                _removeListener(target, \"wheel\", _onWheel, capture);\n                _removeListener(target, _eventTypes[0], _onPress, capture);\n                _removeListener(ownerDoc, _eventTypes[2], _onRelease);\n                _removeListener(ownerDoc, _eventTypes[3], _onRelease);\n                _removeListener(target, \"click\", clickCapture, true);\n                _removeListener(target, \"click\", _onClick);\n                _removeListener(ownerDoc, \"gesturestart\", _onGestureStart);\n                _removeListener(ownerDoc, \"gestureend\", _onGestureEnd);\n                _removeListener(target, _pointerType + \"enter\", _onHover);\n                _removeListener(target, _pointerType + \"leave\", _onHoverEnd);\n                _removeListener(target, _pointerType + \"move\", _onMove);\n                self.isEnabled = self.isPressed = self.isDragging = false;\n                onDisable && onDisable(self);\n            }\n        };\n        self.kill = self.revert = function() {\n            self.disable();\n            var i = _observers.indexOf(self);\n            i >= 0 && _observers.splice(i, 1);\n            _normalizer === self && (_normalizer = 0);\n        };\n        _observers.push(self);\n        isNormalizer && _isViewport(target) && (_normalizer = self);\n        self.enable(event);\n    };\n    _createClass(Observer, [\n        {\n            key: \"velocityX\",\n            get: function get() {\n                return this._vx.getVelocity();\n            }\n        },\n        {\n            key: \"velocityY\",\n            get: function get() {\n                return this._vy.getVelocity();\n            }\n        }\n    ]);\n    return Observer;\n}();\nObserver.version = \"3.12.7\";\nObserver.create = function(vars) {\n    return new Observer(vars);\n};\nObserver.register = _initCore;\nObserver.getAll = function() {\n    return _observers.slice();\n};\nObserver.getById = function(id) {\n    return _observers.filter(function(o) {\n        return o.vars.id === id;\n    })[0];\n};\n_getGSAP() && gsap.registerPlugin(Observer);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/Observer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/ScrollTrigger.js":
/*!********************************************!*\
  !*** ./node_modules/gsap/ScrollTrigger.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScrollTrigger: () => (/* binding */ ScrollTrigger),\n/* harmony export */   \"default\": () => (/* binding */ ScrollTrigger)\n/* harmony export */ });\n/* harmony import */ var _Observer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observer.js */ \"(ssr)/./node_modules/gsap/Observer.js\");\n/*!\n * ScrollTrigger 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ \nvar gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax, _limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.\n_startup = 1, _getTime = Date.now, _time1 = _getTime(), _lastScrollTime = 0, _enabled = 0, _parseClamp = function _parseClamp(value, type, self) {\n    var clamp = _isString(value) && (value.substr(0, 6) === \"clamp(\" || value.indexOf(\"max\") > -1);\n    self[\"_\" + type + \"Clamp\"] = clamp;\n    return clamp ? value.substr(6, value.length - 7) : value;\n}, _keepClamp = function _keepClamp(value, clamp) {\n    return clamp && (!_isString(value) || value.substr(0, 6) !== \"clamp(\") ? \"clamp(\" + value + \")\" : value;\n}, _rafBugFix = function _rafBugFix() {\n    return _enabled && requestAnimationFrame(_rafBugFix);\n}, // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.\n_pointerDownHandler = function _pointerDownHandler() {\n    return _pointerIsDown = 1;\n}, _pointerUpHandler = function _pointerUpHandler() {\n    return _pointerIsDown = 0;\n}, _passThrough = function _passThrough(v) {\n    return v;\n}, _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n}, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _getGSAP = function _getGSAP() {\n    return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n}, _isViewport = function _isViewport(e) {\n    return !!~_root.indexOf(e);\n}, _getViewportDimension = function _getViewportDimension(dimensionProperty) {\n    return (dimensionProperty === \"Height\" ? _100vh : _win[\"inner\" + dimensionProperty]) || _docEl[\"client\" + dimensionProperty] || _body[\"client\" + dimensionProperty];\n}, _getBoundsFunc = function _getBoundsFunc(element) {\n    return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, \"getBoundingClientRect\") || (_isViewport(element) ? function() {\n        _winOffsets.width = _win.innerWidth;\n        _winOffsets.height = _100vh;\n        return _winOffsets;\n    } : function() {\n        return _getBounds(element);\n    });\n}, _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {\n    var d = _ref.d, d2 = _ref.d2, a = _ref.a;\n    return (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"getBoundingClientRect\")) ? function() {\n        return a()[d];\n    } : function() {\n        return (isViewport ? _getViewportDimension(d2) : scroller[\"client\" + d2]) || 0;\n    };\n}, _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {\n    return !isViewport || ~_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.indexOf(element) ? _getBoundsFunc(element) : function() {\n        return _winOffsets;\n    };\n}, _maxScroll = function _maxScroll(element, _ref2) {\n    var s = _ref2.s, d2 = _ref2.d2, d = _ref2.d, a = _ref2.a;\n    return Math.max(0, (s = \"scroll\" + d2) && (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element[\"offset\" + d2]);\n}, _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {\n    for(var i = 0; i < _autoRefresh.length; i += 3){\n        (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);\n    }\n}, _isString = function _isString(value) {\n    return typeof value === \"string\";\n}, _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n}, _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n}, _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n}, _endAnimation = function _endAnimation(animation, reversed, pause) {\n    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();\n}, _callback = function _callback(self, func) {\n    if (self.enabled) {\n        var result = self._ctx ? self._ctx.add(function() {\n            return func(self);\n        }) : func(self);\n        result && result.totalTime && (self.callbackAnimation = result);\n    }\n}, _abs = Math.abs, _left = \"left\", _top = \"top\", _right = \"right\", _bottom = \"bottom\", _width = \"width\", _height = \"height\", _Right = \"Right\", _Left = \"Left\", _Top = \"Top\", _Bottom = \"Bottom\", _padding = \"padding\", _margin = \"margin\", _Width = \"Width\", _Height = \"Height\", _px = \"px\", _getComputedStyle = function _getComputedStyle(element) {\n    return _win.getComputedStyle(element);\n}, _makePositionable = function _makePositionable(element) {\n    // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative\n    var position = _getComputedStyle(element).position;\n    element.style.position = position === \"absolute\" || position === \"fixed\" ? position : \"relative\";\n}, _setDefaults = function _setDefaults(obj, defaults) {\n    for(var p in defaults){\n        p in obj || (obj[p] = defaults[p]);\n    }\n    return obj;\n}, _getBounds = function _getBounds(element, withoutTransforms) {\n    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap.to(element, {\n        x: 0,\n        y: 0,\n        xPercent: 0,\n        yPercent: 0,\n        rotation: 0,\n        rotationX: 0,\n        rotationY: 0,\n        scale: 1,\n        skewX: 0,\n        skewY: 0\n    }).progress(1), bounds = element.getBoundingClientRect();\n    tween && tween.progress(0).kill();\n    return bounds;\n}, _getSize = function _getSize(element, _ref3) {\n    var d2 = _ref3.d2;\n    return element[\"offset\" + d2] || element[\"client\" + d2] || 0;\n}, _getLabelRatioArray = function _getLabelRatioArray(timeline) {\n    var a = [], labels = timeline.labels, duration = timeline.duration(), p;\n    for(p in labels){\n        a.push(labels[p] / duration);\n    }\n    return a;\n}, _getClosestLabel = function _getClosestLabel(animation) {\n    return function(value) {\n        return gsap.utils.snap(_getLabelRatioArray(animation), value);\n    };\n}, _snapDirectional = function _snapDirectional(snapIncrementOrArray) {\n    var snap = gsap.utils.snap(snapIncrementOrArray), a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function(a, b) {\n        return a - b;\n    });\n    return a ? function(value, direction, threshold) {\n        if (threshold === void 0) {\n            threshold = 1e-3;\n        }\n        var i;\n        if (!direction) {\n            return snap(value);\n        }\n        if (direction > 0) {\n            value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.\n            for(i = 0; i < a.length; i++){\n                if (a[i] >= value) {\n                    return a[i];\n                }\n            }\n            return a[i - 1];\n        } else {\n            i = a.length;\n            value += threshold;\n            while(i--){\n                if (a[i] <= value) {\n                    return a[i];\n                }\n            }\n        }\n        return a[0];\n    } : function(value, direction, threshold) {\n        if (threshold === void 0) {\n            threshold = 1e-3;\n        }\n        var snapped = snap(value);\n        return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);\n    };\n}, _getLabelAtDirection = function _getLabelAtDirection(timeline) {\n    return function(value, st) {\n        return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);\n    };\n}, _multiListener = function _multiListener(func, element, types, callback) {\n    return types.split(\",\").forEach(function(type) {\n        return func(element, type, callback);\n    });\n}, _addListener = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n        passive: !nonPassive,\n        capture: !!capture\n    });\n}, _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n}, _wheelListener = function _wheelListener(func, el, scrollFunc) {\n    scrollFunc = scrollFunc && scrollFunc.wheelHandler;\n    if (scrollFunc) {\n        func(el, \"wheel\", scrollFunc);\n        func(el, \"touchmove\", scrollFunc);\n    }\n}, _markerDefaults = {\n    startColor: \"green\",\n    endColor: \"red\",\n    indent: 0,\n    fontSize: \"16px\",\n    fontWeight: \"normal\"\n}, _defaults = {\n    toggleActions: \"play\",\n    anticipatePin: 0\n}, _keywords = {\n    top: 0,\n    left: 0,\n    center: 0.5,\n    bottom: 1,\n    right: 1\n}, _offsetToPx = function _offsetToPx(value, size) {\n    if (_isString(value)) {\n        var eqIndex = value.indexOf(\"=\"), relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n        if (~eqIndex) {\n            value.indexOf(\"%\") > eqIndex && (relative *= size / 100);\n            value = value.substr(0, eqIndex - 1);\n        }\n        value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n    }\n    return value;\n}, _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {\n    var startColor = _ref4.startColor, endColor = _ref4.endColor, fontSize = _ref4.fontSize, indent = _ref4.indent, fontWeight = _ref4.fontWeight;\n    var e = _doc.createElement(\"div\"), useFixedPosition = _isViewport(container) || (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(container, \"pinType\") === \"fixed\", isScroller = type.indexOf(\"scroller\") !== -1, parent = useFixedPosition ? _body : container, isStart = type.indexOf(\"start\") !== -1, color = isStart ? startColor : endColor, css = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n    css += \"position:\" + ((isScroller || containerAnimation) && useFixedPosition ? \"fixed;\" : \"absolute;\");\n    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n    matchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n    e._isStart = isStart;\n    e.setAttribute(\"class\", \"gsap-marker-\" + type + (name ? \" marker-\" + name : \"\"));\n    e.style.cssText = css;\n    e.innerText = name || name === 0 ? type + \"-\" + name : type;\n    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);\n    e._offset = e[\"offset\" + direction.op.d2];\n    _positionMarker(e, 0, direction, isStart);\n    return e;\n}, _positionMarker = function _positionMarker(marker, start, direction, flipped) {\n    var vars = {\n        display: \"block\"\n    }, side = direction[flipped ? \"os2\" : \"p2\"], oppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n    marker._isFlipped = flipped;\n    vars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n    vars[direction.a] = flipped ? \"1px\" : 0;\n    vars[\"border\" + side + _Width] = 1;\n    vars[\"border\" + oppositeSide + _Width] = 0;\n    vars[direction.p] = start + \"px\";\n    gsap.set(marker, vars);\n}, _triggers = [], _ids = {}, _rafID, _sync = function _sync() {\n    return _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));\n}, _onScroll = function _onScroll() {\n    // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010\n    if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) {\n        // if the user is dragging the scrollbar, allow it.\n        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n        if (_normalizer) {\n            _rafID || (_rafID = requestAnimationFrame(_updateAll));\n        } else {\n            _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110\n        }\n        _lastScrollTime || _dispatch(\"scrollStart\");\n        _lastScrollTime = _getTime();\n    }\n}, _setBaseDimensions = function _setBaseDimensions() {\n    _baseScreenWidth = _win.innerWidth;\n    _baseScreenHeight = _win.innerHeight;\n}, _onResize = function _onResize(force) {\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n    (force === true || !_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25)) && _resizeDelay.restart(true);\n}, // ignore resizes triggered by refresh()\n_listeners = {}, _emptyArray = [], _softRefresh = function _softRefresh() {\n    return _removeListener(ScrollTrigger, \"scrollEnd\", _softRefresh) || _refreshAll(true);\n}, _dispatch = function _dispatch(type) {\n    return _listeners[type] && _listeners[type].map(function(f) {\n        return f();\n    }) || _emptyArray;\n}, _savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.\n_revertRecorded = function _revertRecorded(media) {\n    for(var i = 0; i < _savedStyles.length; i += 5){\n        if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {\n            _savedStyles[i].style.cssText = _savedStyles[i + 1];\n            _savedStyles[i].getBBox && _savedStyles[i].setAttribute(\"transform\", _savedStyles[i + 2] || \"\");\n            _savedStyles[i + 3].uncache = 1;\n        }\n    }\n}, _revertAll = function _revertAll(kill, media) {\n    var trigger;\n    for(_i = 0; _i < _triggers.length; _i++){\n        trigger = _triggers[_i];\n        if (trigger && (!media || trigger._ctx === media)) {\n            if (kill) {\n                trigger.kill(1);\n            } else {\n                trigger.revert(true, true);\n            }\n        }\n    }\n    _isReverted = true;\n    media && _revertRecorded(media);\n    media || _dispatch(\"revert\");\n}, _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {\n    // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n    (force || !_refreshingAll) && _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);\n    });\n    _isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);\n}, _refreshingAll, _refreshID = 0, _queueRefreshID, _queueRefreshAll = function _queueRefreshAll() {\n    // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's \"load\" or \"DOMContentLoaded\" events to trigger it.\n    if (_queueRefreshID !== _refreshID) {\n        var id = _queueRefreshID = _refreshID;\n        requestAnimationFrame(function() {\n            return id === _refreshID && _refreshAll(true);\n        });\n    }\n}, _refresh100vh = function _refresh100vh() {\n    _body.appendChild(_div100vh);\n    _100vh = !_normalizer && _div100vh.offsetHeight || _win.innerHeight;\n    _body.removeChild(_div100vh);\n}, _hideAllMarkers = function _hideAllMarkers(hide) {\n    return _toArray(\".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end\").forEach(function(el) {\n        return el.style.display = hide ? \"none\" : \"block\";\n    });\n}, _refreshAll = function _refreshAll(force, skipRevert) {\n    _docEl = _doc.documentElement; // some frameworks like Astro may cache the <body> and replace it during routing, so we'll just re-record the _docEl and _body for safety (otherwise, the markers may not get added properly).\n    _body = _doc.body;\n    _root = [\n        _win,\n        _doc,\n        _docEl,\n        _body\n    ];\n    if (_lastScrollTime && !force && !_isReverted) {\n        _addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n        return;\n    }\n    _refresh100vh();\n    _refreshingAll = ScrollTrigger.isRefreshing = true;\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());\n    }); // force the clearing of the cache because some browsers take a little while to dispatch the \"scroll\" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away\n    var refreshInits = _dispatch(\"refreshInit\");\n    _sort && ScrollTrigger.sort();\n    skipRevert || _revertAll();\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        if (_isFunction(obj)) {\n            obj.smooth && (obj.target.style.scrollBehavior = \"auto\"); // smooth scrolling interferes\n            obj(0);\n        }\n    });\n    _triggers.slice(0).forEach(function(t) {\n        return t.refresh();\n    }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.\n    _isReverted = false;\n    _triggers.forEach(function(t) {\n        // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.\n        if (t._subPinOffset && t.pin) {\n            var prop = t.vars.horizontal ? \"offsetWidth\" : \"offsetHeight\", original = t.pin[prop];\n            t.revert(true, 1);\n            t.adjustPinSpacing(t.pin[prop] - original);\n            t.refresh();\n        }\n    });\n    _clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.\n    _hideAllMarkers(true);\n    _triggers.forEach(function(t) {\n        // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: \"max\". Same for anything with a clamped end\n        var max = _maxScroll(t.scroller, t._dir), endClamp = t.vars.end === \"max\" || t._endClamp && t.end > max, startClamp = t._startClamp && t.start >= max;\n        (endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);\n    });\n    _hideAllMarkers(false);\n    _clampingMax = 0;\n    refreshInits.forEach(function(result) {\n        return result && result.render && result.render(-1);\n    }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        if (_isFunction(obj)) {\n            obj.smooth && requestAnimationFrame(function() {\n                return obj.target.style.scrollBehavior = \"smooth\";\n            });\n            obj.rec && obj(obj.rec);\n        }\n    });\n    _clearScrollMemory(_scrollRestoration, 1);\n    _resizeDelay.pause();\n    _refreshID++;\n    _refreshingAll = 2;\n    _updateAll(2);\n    _triggers.forEach(function(t) {\n        return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);\n    });\n    _refreshingAll = ScrollTrigger.isRefreshing = false;\n    _dispatch(\"refresh\");\n}, _lastScroll = 0, _direction = 1, _primary, _updateAll = function _updateAll(force) {\n    if (force === 2 || !_refreshingAll && !_isReverted) {\n        // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.\n        ScrollTrigger.isUpdating = true;\n        _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.\n        var l = _triggers.length, time = _getTime(), recordVelocity = time - _time1 >= 50, scroll = l && _triggers[0].scroll();\n        _direction = _lastScroll > scroll ? -1 : 1;\n        _refreshingAll || (_lastScroll = scroll);\n        if (recordVelocity) {\n            if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n                _lastScrollTime = 0;\n                _dispatch(\"scrollEnd\");\n            }\n            _time2 = _time1;\n            _time1 = time;\n        }\n        if (_direction < 0) {\n            _i = l;\n            while(_i-- > 0){\n                _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n            }\n            _direction = 1;\n        } else {\n            for(_i = 0; _i < l; _i++){\n                _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n            }\n        }\n        ScrollTrigger.isUpdating = false;\n    }\n    _rafID = 0;\n}, _propNamesToCopy = [\n    _left,\n    _top,\n    _bottom,\n    _right,\n    _margin + _Bottom,\n    _margin + _Right,\n    _margin + _Top,\n    _margin + _Left,\n    \"display\",\n    \"flexShrink\",\n    \"float\",\n    \"zIndex\",\n    \"gridColumnStart\",\n    \"gridColumnEnd\",\n    \"gridRowStart\",\n    \"gridRowEnd\",\n    \"gridArea\",\n    \"justifySelf\",\n    \"alignSelf\",\n    \"placeSelf\",\n    \"order\"\n], _stateProps = _propNamesToCopy.concat([\n    _width,\n    _height,\n    \"boxSizing\",\n    \"max\" + _Width,\n    \"max\" + _Height,\n    \"position\",\n    _margin,\n    _padding,\n    _padding + _Top,\n    _padding + _Right,\n    _padding + _Bottom,\n    _padding + _Left\n]), _swapPinOut = function _swapPinOut(pin, spacer, state) {\n    _setState(state);\n    var cache = pin._gsap;\n    if (cache.spacerIsNative) {\n        _setState(cache.spacerState);\n    } else if (pin._gsap.swappedIn) {\n        var parent = spacer.parentNode;\n        if (parent) {\n            parent.insertBefore(pin, spacer);\n            parent.removeChild(spacer);\n        }\n    }\n    pin._gsap.swappedIn = false;\n}, _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {\n    if (!pin._gsap.swappedIn) {\n        var i = _propNamesToCopy.length, spacerStyle = spacer.style, pinStyle = pin.style, p;\n        while(i--){\n            p = _propNamesToCopy[i];\n            spacerStyle[p] = cs[p];\n        }\n        spacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n        cs.display === \"inline\" && (spacerStyle.display = \"inline-block\");\n        pinStyle[_bottom] = pinStyle[_right] = \"auto\";\n        spacerStyle.flexBasis = cs.flexBasis || \"auto\";\n        spacerStyle.overflow = \"visible\";\n        spacerStyle.boxSizing = \"border-box\";\n        spacerStyle[_width] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal) + _px;\n        spacerStyle[_height] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical) + _px;\n        spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n        _setState(spacerState);\n        pinStyle[_width] = pinStyle[\"max\" + _Width] = cs[_width];\n        pinStyle[_height] = pinStyle[\"max\" + _Height] = cs[_height];\n        pinStyle[_padding] = cs[_padding];\n        if (pin.parentNode !== spacer) {\n            pin.parentNode.insertBefore(spacer, pin);\n            spacer.appendChild(pin);\n        }\n        pin._gsap.swappedIn = true;\n    }\n}, _capsExp = /([A-Z])/g, _setState = function _setState(state) {\n    if (state) {\n        var style = state.t.style, l = state.length, i = 0, p, value;\n        (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off\n        for(; i < l; i += 2){\n            value = state[i + 1];\n            p = state[i];\n            if (value) {\n                style[p] = value;\n            } else if (style[p]) {\n                style.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n            }\n        }\n    }\n}, _getState = function _getState(element) {\n    // returns an Array with alternating values like [property, value, property, value] and a \"t\" property pointing to the target (element). Makes it fast and cheap.\n    var l = _stateProps.length, style = element.style, state = [], i = 0;\n    for(; i < l; i++){\n        state.push(_stateProps[i], style[_stateProps[i]]);\n    }\n    state.t = element;\n    return state;\n}, _copyState = function _copyState(state, override, omitOffsets) {\n    var result = [], l = state.length, i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true\n    p;\n    for(; i < l; i += 2){\n        p = state[i];\n        result.push(p, p in override ? override[p] : state[i + 1]);\n    }\n    result.t = state.t;\n    return result;\n}, _winOffsets = {\n    left: 0,\n    top: 0\n}, // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition(\"#id\", \"top bottom\")\n// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {\n// \tscroller = _getTarget(scroller || _win);\n// \tlet direction = horizontal ? _horizontal : _vertical,\n// \t\tisViewport = _isViewport(scroller);\n// \t_getSizeFunc(scroller, isViewport, direction);\n// \treturn _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);\n// },\n_parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {\n    _isFunction(value) && (value = value(self));\n    if (_isString(value) && value.substr(0, 3) === \"max\") {\n        value = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n    }\n    var time = containerAnimation ? containerAnimation.time() : 0, p1, p2, element;\n    containerAnimation && containerAnimation.seek(0);\n    isNaN(value) || (value = +value); // convert a string number like \"45\" to an actual number\n    if (!_isNumber(value)) {\n        _isFunction(trigger) && (trigger = trigger(self));\n        var offsets = (value || \"0\").split(\" \"), bounds, localOffset, globalOffset, display;\n        element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger, self) || _body;\n        bounds = _getBounds(element) || {};\n        if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === \"none\") {\n            // if display is \"none\", it won't report getBoundingClientRect() properly\n            display = element.style.display;\n            element.style.display = \"block\";\n            bounds = _getBounds(element);\n            display ? element.style.display = display : element.style.removeProperty(\"display\");\n        }\n        localOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n        globalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n        value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n        markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);\n        scrollerSize -= scrollerSize - globalOffset; // adjust for the marker\n    } else {\n        containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));\n        markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);\n    }\n    if (clampZeroProp) {\n        self[clampZeroProp] = value || -0.001;\n        value < 0 && (value = 0);\n    }\n    if (marker) {\n        var position = value + scrollerSize, isStart = marker._isStart;\n        p1 = \"scroll\" + direction.d2;\n        _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1);\n        if (useFixedPosition) {\n            scrollerBounds = _getBounds(markerScroller);\n            useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);\n        }\n    }\n    if (containerAnimation && element) {\n        p1 = _getBounds(element);\n        containerAnimation.seek(scrollerMax);\n        p2 = _getBounds(element);\n        containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];\n        value = value / containerAnimation._caScrollDist * scrollerMax;\n    }\n    containerAnimation && containerAnimation.seek(time);\n    return containerAnimation ? value : Math.round(value);\n}, _prefixExp = /(webkit|moz|length|cssText|inset)/i, _reparent = function _reparent(element, parent, top, left) {\n    if (element.parentNode !== parent) {\n        var style = element.style, p, cs;\n        if (parent === _body) {\n            element._stOrig = style.cssText; // record original inline styles so we can revert them later\n            cs = _getComputedStyle(element);\n            for(p in cs){\n                // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.\n                if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n                    style[p] = cs[p];\n                }\n            }\n            style.top = top;\n            style.left = left;\n        } else {\n            style.cssText = element._stOrig;\n        }\n        gsap.core.getCache(element).uncache = 1;\n        parent.appendChild(element);\n    }\n}, _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {\n    var last1 = initialValue, last2 = last1;\n    return function(value) {\n        var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.\n        if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {\n            // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.\n            value = current;\n            onInterrupt && onInterrupt();\n        }\n        last2 = last1;\n        last1 = Math.round(value);\n        return last1;\n    };\n}, _shiftMarker = function _shiftMarker(marker, direction, value) {\n    var vars = {};\n    vars[direction.p] = \"+=\" + value;\n    gsap.set(marker, vars);\n}, // _mergeAnimations = animations => {\n// \tlet tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));\n// \tanimations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });\n// \ttl.smoothChildTiming = false;\n// \treturn tl;\n// },\n// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)\n_getTweenCreator = function _getTweenCreator(scroller, direction) {\n    var getScroll = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction), prop = \"_scroll\" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.\n    getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {\n        var tween = getTween.tween, onComplete = vars.onComplete, modifiers = {};\n        initialValue = initialValue || getScroll();\n        var checkForInterruption = _interruptionTracker(getScroll, initialValue, function() {\n            tween.kill();\n            getTween.tween = 0;\n        });\n        change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.\n        change1 = change1 || scrollTo - initialValue;\n        tween && tween.kill();\n        vars[prop] = scrollTo;\n        vars.inherit = false;\n        vars.modifiers = modifiers;\n        modifiers[prop] = function() {\n            return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);\n        };\n        vars.onUpdate = function() {\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n            getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()\n        };\n        vars.onComplete = function() {\n            getTween.tween = 0;\n            onComplete && onComplete.call(tween);\n        };\n        tween = getTween.tween = gsap.to(scroller, vars);\n        return tween;\n    };\n    scroller[prop] = getScroll;\n    getScroll.wheelHandler = function() {\n        return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);\n    };\n    _addListener(scroller, \"wheel\", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like \"3 lines per scroll\") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.\n    ScrollTrigger.isTouch && _addListener(scroller, \"touchmove\", getScroll.wheelHandler);\n    return getTween;\n};\nvar ScrollTrigger = /*#__PURE__*/ function() {\n    function ScrollTrigger(vars, animation) {\n        _coreInitted || ScrollTrigger.register(gsap) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n        _context(this);\n        this.init(vars, animation);\n    }\n    var _proto = ScrollTrigger.prototype;\n    _proto.init = function init(vars, animation) {\n        this.progress = this.start = 0;\n        this.vars && this.kill(true, true); // in case it's being initted again\n        if (!_enabled) {\n            this.update = this.refresh = this.kill = _passThrough;\n            return;\n        }\n        vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {\n            trigger: vars\n        } : vars, _defaults);\n        var _vars = vars, onUpdate = _vars.onUpdate, toggleClass = _vars.toggleClass, id = _vars.id, onToggle = _vars.onToggle, onRefresh = _vars.onRefresh, scrub = _vars.scrub, trigger = _vars.trigger, pin = _vars.pin, pinSpacing = _vars.pinSpacing, invalidateOnRefresh = _vars.invalidateOnRefresh, anticipatePin = _vars.anticipatePin, onScrubComplete = _vars.onScrubComplete, onSnapComplete = _vars.onSnapComplete, once = _vars.once, snap = _vars.snap, pinReparent = _vars.pinReparent, pinSpacer = _vars.pinSpacer, containerAnimation = _vars.containerAnimation, fastScrollEnd = _vars.fastScrollEnd, preventOverlaps = _vars.preventOverlaps, direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical, isToggle = !scrub && scrub !== 0, scroller = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.scroller || _win), scrollerCache = gsap.core.getCache(scroller), isViewport = _isViewport(scroller), useFixedPosition = (\"pinType\" in vars ? vars.pinType : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"pinType\") || isViewport && \"fixed\") === \"fixed\", callbacks = [\n            vars.onEnter,\n            vars.onLeave,\n            vars.onEnterBack,\n            vars.onLeaveBack\n        ], toggleActions = isToggle && vars.toggleActions.split(\" \"), markers = \"markers\" in vars ? vars.markers : _defaults.markers, borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0, self = this, onRefreshInit = vars.onRefreshInit && function() {\n            return vars.onRefreshInit(self);\n        }, getScrollerSize = _getSizeFunc(scroller, isViewport, direction), getScrollerOffsets = _getOffsetsFunc(scroller, isViewport), lastSnap = 0, lastRefresh = 0, prevProgress = 0, scrollFunc = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction), tweenTo, pinCache, snapFunc, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars, executingOnRefresh, change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacerState, markerStartSetter, pinMoves, markerEndSetter, cs, snap1, snap2, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevScroll, prevAnimProgress, caMarkerSetter, customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start=\"clamp(top bottom)\" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.\n        self._startClamp = self._endClamp = false;\n        self._dir = direction;\n        anticipatePin *= 45;\n        self.scroller = scroller;\n        self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;\n        scroll1 = scrollFunc();\n        self.vars = vars;\n        animation = animation || vars.animation;\n        if (\"refreshPriority\" in vars) {\n            _sort = 1;\n            vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother\n        }\n        scrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n            top: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical),\n            left: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)\n        };\n        self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n        self.scrubDuration = function(value) {\n            scrubSmooth = _isNumber(value) && value;\n            if (!scrubSmooth) {\n                scrubTween && scrubTween.progress(1).kill();\n                scrubTween = 0;\n            } else {\n                scrubTween ? scrubTween.duration(value) : scrubTween = gsap.to(animation, {\n                    ease: \"expo\",\n                    totalProgress: \"+=0\",\n                    inherit: false,\n                    duration: scrubSmooth,\n                    paused: true,\n                    onComplete: function onComplete() {\n                        return onScrubComplete && onScrubComplete(self);\n                    }\n                });\n            }\n        };\n        if (animation) {\n            animation.vars.lazy = false;\n            animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010\n            self.animation = animation.pause();\n            animation.scrollTrigger = self;\n            self.scrubDuration(scrub);\n            snap1 = 0;\n            id || (id = animation.vars.id);\n        }\n        if (snap) {\n            // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.\n            if (!_isObject(snap) || snap.push) {\n                snap = {\n                    snapTo: snap\n                };\n            }\n            \"scrollBehavior\" in _body.style && gsap.set(isViewport ? [\n                _body,\n                _docEl\n            ] : scroller, {\n                scrollBehavior: \"auto\"\n            }); // smooth scrolling doesn't work with snap.\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(o) {\n                return _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false);\n            }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters\n            snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getClosestLabel(animation) : snap.snapTo === \"labelsDirectional\" ? _getLabelAtDirection(animation) : snap.directional !== false ? function(value, st) {\n                return _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction);\n            } : gsap.utils.snap(snap.snapTo);\n            snapDurClamp = snap.duration || {\n                min: 0.1,\n                max: 2\n            };\n            snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);\n            snapDelayedCall = gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function() {\n                var scroll = scrollFunc(), refreshedRecently = _getTime() - lastRefresh < 500, tween = tweenTo.tween;\n                if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {\n                    var progress = (scroll - start) / change, totalProgress = animation && !isToggle ? animation.totalProgress() : progress, velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime() - _time2) * 1000 || 0, change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185), naturalEnd = progress + (snap.inertia === false ? 0 : change1), endValue, endScroll, _snap = snap, onStart = _snap.onStart, _onInterrupt = _snap.onInterrupt, _onComplete = _snap.onComplete;\n                    endValue = snapFunc(naturalEnd, self);\n                    _isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd\n                    endScroll = Math.max(0, Math.round(start + endValue * change));\n                    if (scroll <= end && scroll >= start && endScroll !== scroll) {\n                        if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {\n                            // there's an overlapping snap! So we must figure out which one is closer and let that tween live.\n                            return;\n                        }\n                        if (snap.inertia === false) {\n                            change1 = endValue - progress;\n                        }\n                        tweenTo(endScroll, {\n                            duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),\n                            ease: snap.ease || \"power3\",\n                            data: _abs(endScroll - scroll),\n                            // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.\n                            onInterrupt: function onInterrupt() {\n                                return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);\n                            },\n                            onComplete: function onComplete() {\n                                self.update();\n                                lastSnap = scrollFunc();\n                                if (animation && !isToggle) {\n                                    // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap\n                                    scrubTween ? scrubTween.resetTo(\"totalProgress\", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);\n                                }\n                                snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n                                onSnapComplete && onSnapComplete(self);\n                                _onComplete && _onComplete(self);\n                            }\n                        }, scroll, change1 * change, endScroll - scroll - change1 * change);\n                        onStart && onStart(self, tweenTo.tween);\n                    }\n                } else if (self.isActive && lastSnap !== scroll) {\n                    snapDelayedCall.restart(true);\n                }\n            }).pause();\n        }\n        id && (_ids[id] = self);\n        trigger = self.trigger = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger || pin !== true && pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the \"y\" or \"x\" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.\n        customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;\n        customRevertReturn && (customRevertReturn = customRevertReturn(self));\n        pin = pin === true ? trigger : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pin);\n        _isString(toggleClass) && (toggleClass = {\n            targets: trigger,\n            className: toggleClass\n        });\n        if (pin) {\n            pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)\n            self.pin = pin;\n            pinCache = gsap.core.getCache(pin);\n            if (!pinCache.spacer) {\n                // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the \"original\" pin state after it has already been affected by another ScrollTrigger.\n                if (pinSpacer) {\n                    pinSpacer = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pinSpacer);\n                    pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular\n                    pinCache.spacerIsNative = !!pinSpacer;\n                    pinSpacer && (pinCache.spacerState = _getState(pinSpacer));\n                }\n                pinCache.spacer = spacer = pinSpacer || _doc.createElement(\"div\");\n                spacer.classList.add(\"pin-spacer\");\n                id && spacer.classList.add(\"pin-spacer-\" + id);\n                pinCache.pinState = pinOriginalState = _getState(pin);\n            } else {\n                pinOriginalState = pinCache.pinState;\n            }\n            vars.force3D !== false && gsap.set(pin, {\n                force3D: true\n            });\n            self.spacer = spacer = pinCache.spacer;\n            cs = _getComputedStyle(pin);\n            spacingStart = cs[pinSpacing + direction.os2];\n            pinGetter = gsap.getProperty(pin);\n            pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = \"hidden\"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).\n            _swapPinIn(pin, spacer, cs);\n            pinState = _getState(pin);\n        }\n        if (markers) {\n            markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n            markerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n            markerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n            offset = markerStartTrigger[\"offset\" + direction.op.d2];\n            var content = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"content\") || scroller);\n            markerStart = this.markerStart = _createMarker(\"start\", id, content, direction, markerVars, offset, 0, containerAnimation);\n            markerEnd = this.markerEnd = _createMarker(\"end\", id, content, direction, markerVars, offset, 0, containerAnimation);\n            containerAnimation && (caMarkerSetter = gsap.quickSetter([\n                markerStart,\n                markerEnd\n            ], direction.a, _px));\n            if (!useFixedPosition && !(_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.length && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"fixedMarkers\") === true)) {\n                _makePositionable(isViewport ? _body : scroller);\n                gsap.set([\n                    markerStartTrigger,\n                    markerEndTrigger\n                ], {\n                    force3D: true\n                });\n                markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);\n                markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);\n            }\n        }\n        if (containerAnimation) {\n            var oldOnUpdate = containerAnimation.vars.onUpdate, oldParams = containerAnimation.vars.onUpdateParams;\n            containerAnimation.eventCallback(\"onUpdate\", function() {\n                self.update(0, 0, 1);\n                oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);\n            });\n        }\n        self.previous = function() {\n            return _triggers[_triggers.indexOf(self) - 1];\n        };\n        self.next = function() {\n            return _triggers[_triggers.indexOf(self) + 1];\n        };\n        self.revert = function(revert, temp) {\n            if (!temp) {\n                return self.kill(true);\n            } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()\n            var r = revert !== false || !self.enabled, prevRefreshing = _refreshing;\n            if (r !== self.isReverted) {\n                if (r) {\n                    prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.\n                    prevProgress = self.progress;\n                    prevAnimProgress = animation && animation.progress();\n                }\n                markerStart && [\n                    markerStart,\n                    markerEnd,\n                    markerStartTrigger,\n                    markerEndTrigger\n                ].forEach(function(m) {\n                    return m.style.display = r ? \"none\" : \"block\";\n                });\n                if (r) {\n                    _refreshing = self;\n                    self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out\n                }\n                if (pin && (!pinReparent || !self.isActive)) {\n                    if (r) {\n                        _swapPinOut(pin, spacer, pinOriginalState);\n                    } else {\n                        _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);\n                    }\n                }\n                r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.\n                _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.\n                self.isReverted = r;\n            }\n        };\n        self.refresh = function(soft, force, position, pinOffset) {\n            // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects\n            if ((_refreshing || !self.enabled) && !force) {\n                return;\n            }\n            if (pin && soft && _lastScrollTime) {\n                _addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n                return;\n            }\n            !_refreshingAll && onRefreshInit && onRefreshInit(self);\n            _refreshing = self;\n            if (tweenTo.tween && !position) {\n                // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.\n                tweenTo.tween.kill();\n                tweenTo.tween = 0;\n            }\n            scrubTween && scrubTween.pause();\n            invalidateOnRefresh && animation && animation.revert({\n                kill: false\n            }).invalidate();\n            self.isReverted || self.revert(true, true);\n            self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any\n            var size = getScrollerSize(), scrollerBounds = getScrollerOffsets(), max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction), isFirstRefresh = change <= 0.01, offset = 0, otherPinOffset = pinOffset || 0, parsedEnd = _isObject(position) ? position.end : vars.end, parsedEndTrigger = vars.endTrigger || trigger, parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? \"0 0\" : \"0 100%\"), pinnedContainer = self.pinnedContainer = vars.pinnedContainer && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.pinnedContainer, self), triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0, i = triggerIndex, cs, bounds, scroll, isVertical, override, curTrigger, curPin, oppositeScroll, initted, revertedPins, forcedOverflow, markerStartOffset, markerEndOffset;\n            if (markers && _isObject(position)) {\n                // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.\n                markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);\n                markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);\n            }\n            while(i-- > 0){\n                // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things \"rewind\" properly.\n                curTrigger = _triggers[i];\n                curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.\n                curPin = curTrigger.pin;\n                if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {\n                    revertedPins || (revertedPins = []);\n                    revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly\n                    curTrigger.revert(true, true);\n                }\n                if (curTrigger !== _triggers[i]) {\n                    // in case it got removed.\n                    triggerIndex--;\n                    i--;\n                }\n            }\n            _isFunction(parsedStart) && (parsedStart = parsedStart(self));\n            parsedStart = _parseClamp(parsedStart, \"start\", self);\n            start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && \"_startClamp\") || (pin ? -0.001 : 0);\n            _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n            if (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n                if (~parsedEnd.indexOf(\" \")) {\n                    parsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n                } else {\n                    offset = _offsetToPx(parsedEnd.substr(2), size);\n                    parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.\n                    parsedEndTrigger = trigger;\n                }\n            }\n            parsedEnd = _parseClamp(parsedEnd, \"end\", self);\n            end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && \"_endClamp\")) || -0.001;\n            offset = 0;\n            i = triggerIndex;\n            while(i--){\n                curTrigger = _triggers[i];\n                curPin = curTrigger.pin;\n                if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {\n                    cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);\n                    if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {\n                        // numeric start values shouldn't be offset at all - treat them as absolute\n                        offset += cs * (1 - curTrigger.progress);\n                    }\n                    curPin === pin && (otherPinOffset += cs);\n                }\n            }\n            start += offset;\n            end += offset;\n            self._startClamp && (self._startClamp += offset);\n            if (self._endClamp && !_refreshingAll) {\n                self._endClamp = end || -0.001;\n                end = Math.min(end, _maxScroll(scroller, direction));\n            }\n            change = end - start || (start -= 0.01) && 0.001;\n            if (isFirstRefresh) {\n                // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.\n                prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));\n            }\n            self._pinPush = otherPinOffset;\n            if (markerStart && offset) {\n                // offset the markers if necessary\n                cs = {};\n                cs[direction.a] = \"+=\" + offset;\n                pinnedContainer && (cs[direction.p] = \"-=\" + scrollFunc());\n                gsap.set([\n                    markerStart,\n                    markerEnd\n                ], cs);\n            }\n            if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {\n                cs = _getComputedStyle(pin);\n                isVertical = direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical;\n                scroll = scrollFunc(); // recalculate because the triggers can affect the scroll\n                pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n                if (!max && end > 1) {\n                    // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/\n                    forcedOverflow = (isViewport ? _doc.scrollingElement || _docEl : scroller).style;\n                    forcedOverflow = {\n                        style: forcedOverflow,\n                        value: forcedOverflow[\"overflow\" + direction.a.toUpperCase()]\n                    };\n                    if (isViewport && _getComputedStyle(_body)[\"overflow\" + direction.a.toUpperCase()] !== \"scroll\") {\n                        // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to \"scroll\"\n                        forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = \"scroll\";\n                    }\n                }\n                _swapPinIn(pin, spacer, cs);\n                pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.\n                bounds = _getBounds(pin, true);\n                oppositeScroll = useFixedPosition && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, isVertical ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical)();\n                if (pinSpacing) {\n                    spacerState = [\n                        pinSpacing + direction.os2,\n                        change + otherPinOffset + _px\n                    ];\n                    spacerState.t = spacer;\n                    i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;\n                    if (i) {\n                        spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).\n                        spacer.style.flexBasis !== \"auto\" && (spacer.style.flexBasis = i + _px);\n                    }\n                    _setState(spacerState);\n                    if (pinnedContainer) {\n                        // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.\n                        _triggers.forEach(function(t) {\n                            if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {\n                                t._subPinOffset = true;\n                            }\n                        });\n                    }\n                    useFixedPosition && scrollFunc(prevScroll);\n                } else {\n                    i = _getSize(pin, direction);\n                    i && spacer.style.flexBasis !== \"auto\" && (spacer.style.flexBasis = i + _px);\n                }\n                if (useFixedPosition) {\n                    override = {\n                        top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,\n                        left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,\n                        boxSizing: \"border-box\",\n                        position: \"fixed\"\n                    };\n                    override[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n                    override[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n                    override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n                    override[_padding] = cs[_padding];\n                    override[_padding + _Top] = cs[_padding + _Top];\n                    override[_padding + _Right] = cs[_padding + _Right];\n                    override[_padding + _Bottom] = cs[_padding + _Bottom];\n                    override[_padding + _Left] = cs[_padding + _Left];\n                    pinActiveState = _copyState(pinOriginalState, override, pinReparent);\n                    _refreshingAll && scrollFunc(0);\n                }\n                if (animation) {\n                    // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.\n                    initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.\n                    _suppressOverwrites(1);\n                    animation.render(animation.duration(), true, true);\n                    pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n                    pinMoves = Math.abs(change - pinChange) > 1;\n                    useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.\n                    animation.render(0, true, true);\n                    initted || animation.invalidate(true);\n                    animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.\n                    _suppressOverwrites(0);\n                } else {\n                    pinChange = change;\n                }\n                forcedOverflow && (forcedOverflow.value ? forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty(\"overflow-\" + direction.a));\n            } else if (trigger && scrollFunc() && !containerAnimation) {\n                // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()\n                bounds = trigger.parentNode;\n                while(bounds && bounds !== _body){\n                    if (bounds._pinOffset) {\n                        start -= bounds._pinOffset;\n                        end -= bounds._pinOffset;\n                    }\n                    bounds = bounds.parentNode;\n                }\n            }\n            revertedPins && revertedPins.forEach(function(t) {\n                return t.revert(false, true);\n            });\n            self.start = start;\n            self.end = end;\n            scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity\n            if (!containerAnimation && !_refreshingAll) {\n                scroll1 < prevScroll && scrollFunc(prevScroll);\n                self.scroll.rec = 0;\n            }\n            self.revert(false, true);\n            lastRefresh = _getTime();\n            if (snapDelayedCall) {\n                lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value\n                // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.\n                snapDelayedCall.restart(true);\n            }\n            _refreshing = 0;\n            animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().\n            if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh || animation && !animation._initted) {\n                // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.\n                animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.\n                self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;\n            }\n            pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n            scrubTween && scrubTween.invalidate();\n            if (!isNaN(markerStartOffset)) {\n                // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like \"top\", \"center\", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.\n                markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);\n                markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);\n                _shiftMarker(markerStartTrigger, direction, markerStartOffset);\n                _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));\n                _shiftMarker(markerEndTrigger, direction, markerEndOffset);\n                _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));\n            }\n            isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a \"scroll\" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.\n            if (onRefresh && !_refreshingAll && !executingOnRefresh) {\n                // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.\n                executingOnRefresh = true;\n                onRefresh(self);\n                executingOnRefresh = false;\n            }\n        };\n        self.getVelocity = function() {\n            return (scrollFunc() - scroll2) / (_getTime() - _time2) * 1000 || 0;\n        };\n        self.endAnimation = function() {\n            _endAnimation(self.callbackAnimation);\n            if (animation) {\n                scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);\n            }\n        };\n        self.labelToScroll = function(label) {\n            return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;\n        };\n        self.getTrailing = function(name) {\n            var i = _triggers.indexOf(self), a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);\n            return (_isString(name) ? a.filter(function(t) {\n                return t.vars.preventOverlaps === name;\n            }) : a).filter(function(t) {\n                return self.direction > 0 ? t.end <= start : t.start >= end;\n            });\n        };\n        self.update = function(reset, recordVelocity, forceFake) {\n            if (containerAnimation && !forceFake && !reset) {\n                return;\n            }\n            var scroll = _refreshingAll === true ? prevScroll : self.scroll(), p = reset ? 0 : (scroll - start) / change, clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0, prevProgress = self.progress, isActive, wasActive, toggleState, action, stateChanged, toggled, isAtMax, isTakingAction;\n            if (recordVelocity) {\n                scroll2 = scroll1;\n                scroll1 = containerAnimation ? scrollFunc() : scroll;\n                if (snap) {\n                    snap2 = snap1;\n                    snap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n                }\n            } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).\n            if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {\n                if (!clipped && start < scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {\n                    clipped = 0.0001;\n                } else if (clipped === 1 && end > scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {\n                    clipped = 0.9999;\n                }\n            }\n            if (clipped !== prevProgress && self.enabled) {\n                isActive = self.isActive = !!clipped && clipped < 1;\n                wasActive = !!prevProgress && prevProgress < 1;\n                toggled = isActive !== wasActive;\n                stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)\n                self.direction = clipped > prevProgress ? 1 : -1;\n                self.progress = clipped;\n                if (stateChanged && !_refreshing) {\n                    toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.\n                    if (isToggle) {\n                        action = !toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the \"enter\" action, we should switch to the \"leave\" in this case (but only if one is defined)\n                        isTakingAction = animation && (action === \"complete\" || action === \"reset\" || action in animation);\n                    }\n                }\n                preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function(t) {\n                    return t.endAnimation();\n                }));\n                if (!isToggle) {\n                    if (scrubTween && !_refreshing && !_startup) {\n                        scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.\n                        if (scrubTween.resetTo) {\n                            scrubTween.resetTo(\"totalProgress\", clipped, animation._tTime / animation._tDur);\n                        } else {\n                            // legacy support (courtesy), before 3.10.0\n                            scrubTween.vars.totalProgress = clipped;\n                            scrubTween.invalidate().restart();\n                        }\n                    } else if (animation) {\n                        animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));\n                    }\n                }\n                if (pin) {\n                    reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n                    if (!useFixedPosition) {\n                        pinSetter(_round(pinStart + pinChange * clipped));\n                    } else if (stateChanged) {\n                        isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)\n                        if (pinReparent) {\n                            if (!reset && (isActive || isAtMax)) {\n                                var bounds = _getBounds(pin, true), _offset = scroll - start;\n                                _reparent(pin, _body, bounds.top + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _offset : 0) + _px, bounds.left + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? 0 : _offset) + _px);\n                            } else {\n                                _reparent(pin, spacer);\n                            }\n                        }\n                        _setState(isActive || isAtMax ? pinActiveState : pinState);\n                        pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));\n                    }\n                }\n                snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);\n                toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function(el) {\n                    return el.classList[isActive || once ? \"add\" : \"remove\"](toggleClass.className);\n                }); // classes could affect positioning, so do it even if reset or refreshing is true.\n                onUpdate && !isToggle && !reset && onUpdate(self);\n                if (stateChanged && !_refreshing) {\n                    if (isToggle) {\n                        if (isTakingAction) {\n                            if (action === \"complete\") {\n                                animation.pause().totalProgress(1);\n                            } else if (action === \"reset\") {\n                                animation.restart(true).pause();\n                            } else if (action === \"restart\") {\n                                animation.restart(true);\n                            } else {\n                                animation[action]();\n                            }\n                        }\n                        onUpdate && onUpdate(self);\n                    }\n                    if (toggled || !_limitCallbacks) {\n                        // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.\n                        onToggle && toggled && _callback(self, onToggle);\n                        callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n                        once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.\n                        if (!toggled) {\n                            // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order\n                            toggleState = clipped === 1 ? 1 : 3;\n                            callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n                        }\n                    }\n                    if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {\n                        _endAnimation(self.callbackAnimation);\n                        scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === \"reverse\" ? 1 : !clipped, 1);\n                    }\n                } else if (isToggle && onUpdate && !_refreshing) {\n                    onUpdate(self);\n                }\n            } // update absolutely-positioned markers (only if the scroller isn't the viewport)\n            if (markerEndSetter) {\n                var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;\n                markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));\n                markerEndSetter(n);\n            }\n            caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));\n        };\n        self.enable = function(reset, refresh) {\n            if (!self.enabled) {\n                self.enabled = true;\n                _addListener(scroller, \"resize\", _onResize);\n                isViewport || _addListener(scroller, \"scroll\", _onScroll);\n                onRefreshInit && _addListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n                if (reset !== false) {\n                    self.progress = prevProgress = 0;\n                    scroll1 = scroll2 = lastSnap = scrollFunc();\n                }\n                refresh !== false && self.refresh();\n            }\n        };\n        self.getTween = function(snap) {\n            return snap && tweenTo ? tweenTo.tween : scrubTween;\n        };\n        self.setPositions = function(newStart, newEnd, keepClamp, pinOffset) {\n            // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()\n            if (containerAnimation) {\n                // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.\n                var st = containerAnimation.scrollTrigger, duration = containerAnimation.duration(), _change = st.end - st.start;\n                newStart = st.start + _change * newStart / duration;\n                newEnd = st.start + _change * newEnd / duration;\n            }\n            self.refresh(false, false, {\n                start: _keepClamp(newStart, keepClamp && !!self._startClamp),\n                end: _keepClamp(newEnd, keepClamp && !!self._endClamp)\n            }, pinOffset);\n            self.update();\n        };\n        self.adjustPinSpacing = function(amount) {\n            if (spacerState && amount) {\n                var i = spacerState.indexOf(direction.d) + 1;\n                spacerState[i] = parseFloat(spacerState[i]) + amount + _px;\n                spacerState[1] = parseFloat(spacerState[1]) + amount + _px;\n                _setState(spacerState);\n            }\n        };\n        self.disable = function(reset, allowAnimation) {\n            if (self.enabled) {\n                reset !== false && self.revert(true, true);\n                self.enabled = self.isActive = false;\n                allowAnimation || scrubTween && scrubTween.pause();\n                prevScroll = 0;\n                pinCache && (pinCache.uncache = 1);\n                onRefreshInit && _removeListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n                if (snapDelayedCall) {\n                    snapDelayedCall.pause();\n                    tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);\n                }\n                if (!isViewport) {\n                    var i = _triggers.length;\n                    while(i--){\n                        if (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n                            return; //don't remove the listeners if there are still other triggers referencing it.\n                        }\n                    }\n                    _removeListener(scroller, \"resize\", _onResize);\n                    isViewport || _removeListener(scroller, \"scroll\", _onScroll);\n                }\n            }\n        };\n        self.kill = function(revert, allowAnimation) {\n            self.disable(revert, allowAnimation);\n            scrubTween && !allowAnimation && scrubTween.kill();\n            id && delete _ids[id];\n            var i = _triggers.indexOf(self);\n            i >= 0 && _triggers.splice(i, 1);\n            i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...\n            // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.\n            i = 0;\n            _triggers.forEach(function(t) {\n                return t.scroller === self.scroller && (i = 1);\n            });\n            i || _refreshingAll || (self.scroll.rec = 0);\n            if (animation) {\n                animation.scrollTrigger = null;\n                revert && animation.revert({\n                    kill: false\n                });\n                allowAnimation || animation.kill();\n            }\n            markerStart && [\n                markerStart,\n                markerEnd,\n                markerStartTrigger,\n                markerEndTrigger\n            ].forEach(function(m) {\n                return m.parentNode && m.parentNode.removeChild(m);\n            });\n            _primary === self && (_primary = 0);\n            if (pin) {\n                pinCache && (pinCache.uncache = 1);\n                i = 0;\n                _triggers.forEach(function(t) {\n                    return t.pin === pin && i++;\n                });\n                i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.\n            }\n            vars.onKill && vars.onKill(self);\n        };\n        _triggers.push(self);\n        self.enable(false, false);\n        customRevertReturn && customRevertReturn(self);\n        if (animation && animation.add && !change) {\n            // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If \"change\" is defined, we know it must be re-enabling, thus we can refresh() right away.\n            var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().\n            self.update = function() {\n                self.update = updateFunc;\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // otherwise a cached scroll position may get used in the refresh() in a very rare scenario, like if ScrollTriggers are created inside a DOMContentLoaded event and the queued requestAnimationFrame() fires beforehand. See https://gsap.com/community/forums/topic/41267-scrolltrigger-breaks-on-refresh-when-using-domcontentloaded/\n                start || end || self.refresh();\n            };\n            gsap.delayedCall(0.01, self.update);\n            change = 0.01;\n            start = end = 0;\n        } else {\n            self.refresh();\n        }\n        pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()\n    };\n    ScrollTrigger.register = function register(core) {\n        if (!_coreInitted) {\n            gsap = core || _getGSAP();\n            _windowExists() && window.document && ScrollTrigger.enable();\n            _coreInitted = _enabled;\n        }\n        return _coreInitted;\n    };\n    ScrollTrigger.defaults = function defaults(config) {\n        if (config) {\n            for(var p in config){\n                _defaults[p] = config[p];\n            }\n        }\n        return _defaults;\n    };\n    ScrollTrigger.disable = function disable(reset, kill) {\n        _enabled = 0;\n        _triggers.forEach(function(trigger) {\n            return trigger[kill ? \"kill\" : \"disable\"](reset);\n        });\n        _removeListener(_win, \"wheel\", _onScroll);\n        _removeListener(_doc, \"scroll\", _onScroll);\n        clearInterval(_syncInterval);\n        _removeListener(_doc, \"touchcancel\", _passThrough);\n        _removeListener(_body, \"touchstart\", _passThrough);\n        _multiListener(_removeListener, _doc, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n        _multiListener(_removeListener, _doc, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n        _resizeDelay.kill();\n        _iterateAutoRefresh(_removeListener);\n        for(var i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3){\n            _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);\n            _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);\n        }\n    };\n    ScrollTrigger.enable = function enable() {\n        _win = window;\n        _doc = document;\n        _docEl = _doc.documentElement;\n        _body = _doc.body;\n        if (gsap) {\n            _toArray = gsap.utils.toArray;\n            _clamp = gsap.utils.clamp;\n            _context = gsap.core.context || _passThrough;\n            _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;\n            _scrollRestoration = _win.history.scrollRestoration || \"auto\";\n            _lastScroll = _win.pageYOffset || 0;\n            gsap.core.globals(\"ScrollTrigger\", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a \"name\" property.\n            if (_body) {\n                _enabled = 1;\n                _div100vh = document.createElement(\"div\"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.\n                _div100vh.style.height = \"100vh\";\n                _div100vh.style.position = \"absolute\";\n                _refresh100vh();\n                _rafBugFix();\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.\n                ScrollTrigger.isTouch = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch;\n                _fixIOSBug = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503\n                _ignoreMobileResize = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch === 1;\n                _addListener(_win, \"wheel\", _onScroll); // mostly for 3rd party smooth scrolling libraries.\n                _root = [\n                    _win,\n                    _doc,\n                    _docEl,\n                    _body\n                ];\n                if (gsap.matchMedia) {\n                    ScrollTrigger.matchMedia = function(vars) {\n                        var mm = gsap.matchMedia(), p;\n                        for(p in vars){\n                            mm.add(p, vars[p]);\n                        }\n                        return mm;\n                    };\n                    gsap.addEventListener(\"matchMediaInit\", function() {\n                        return _revertAll();\n                    });\n                    gsap.addEventListener(\"matchMediaRevert\", function() {\n                        return _revertRecorded();\n                    });\n                    gsap.addEventListener(\"matchMedia\", function() {\n                        _refreshAll(0, 1);\n                        _dispatch(\"matchMedia\");\n                    });\n                    gsap.matchMedia().add(\"(orientation: portrait)\", function() {\n                        // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.\n                        _setBaseDimensions();\n                        return _setBaseDimensions;\n                    });\n                } else {\n                    console.warn(\"Requires GSAP 3.11.0 or later\");\n                }\n                _setBaseDimensions();\n                _addListener(_doc, \"scroll\", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!\n                var bodyHasStyle = _body.hasAttribute(\"style\"), bodyStyle = _body.style, border = bodyStyle.borderTopStyle, AnimationProto = gsap.core.Animation.prototype, bounds, i;\n                AnimationProto.revert || Object.defineProperty(AnimationProto, \"revert\", {\n                    value: function value() {\n                        return this.time(-0.01, true);\n                    }\n                }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)\n                bodyStyle.borderTopStyle = \"solid\"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.\n                bounds = _getBounds(_body);\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.m = Math.round(bounds.top + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.m = Math.round(bounds.left + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.sc()) || 0;\n                border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty(\"border-top-style\");\n                if (!bodyHasStyle) {\n                    // SSR frameworks like Next.js complain if this attribute gets added.\n                    _body.setAttribute(\"style\", \"\"); // it's not enough to just removeAttribute() - we must first set it to empty, otherwise Next.js complains.\n                    _body.removeAttribute(\"style\");\n                } // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.\n                _syncInterval = setInterval(_sync, 250);\n                gsap.delayedCall(0.5, function() {\n                    return _startup = 0;\n                });\n                _addListener(_doc, \"touchcancel\", _passThrough); // some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document.\n                _addListener(_body, \"touchstart\", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n                _multiListener(_addListener, _doc, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n                _multiListener(_addListener, _doc, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n                _transformProp = gsap.utils.checkPrefix(\"transform\");\n                _stateProps.push(_transformProp);\n                _coreInitted = _getTime();\n                _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();\n                _autoRefresh = [\n                    _doc,\n                    \"visibilitychange\",\n                    function() {\n                        var w = _win.innerWidth, h = _win.innerHeight;\n                        if (_doc.hidden) {\n                            _prevWidth = w;\n                            _prevHeight = h;\n                        } else if (_prevWidth !== w || _prevHeight !== h) {\n                            _onResize();\n                        }\n                    },\n                    _doc,\n                    \"DOMContentLoaded\",\n                    _refreshAll,\n                    _win,\n                    \"load\",\n                    _refreshAll,\n                    _win,\n                    \"resize\",\n                    _onResize\n                ];\n                _iterateAutoRefresh(_addListener);\n                _triggers.forEach(function(trigger) {\n                    return trigger.enable(0, 1);\n                });\n                for(i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3){\n                    _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);\n                    _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);\n                }\n            }\n        }\n    };\n    ScrollTrigger.config = function config(vars) {\n        \"limitCallbacks\" in vars && (_limitCallbacks = !!vars.limitCallbacks);\n        var ms = vars.syncInterval;\n        ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);\n        \"ignoreMobileResize\" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);\n        if (\"autoRefreshEvents\" in vars) {\n            _iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || \"none\");\n            _ignoreResize = (vars.autoRefreshEvents + \"\").indexOf(\"resize\") === -1;\n        }\n    };\n    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {\n        var t = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(target), i = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.indexOf(t), isViewport = _isViewport(t);\n        if (~i) {\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.splice(i, isViewport ? 6 : 2);\n        }\n        if (vars) {\n            isViewport ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(t, vars);\n        }\n    };\n    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {\n        _triggers.forEach(function(t) {\n            return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);\n        });\n    };\n    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {\n        var bounds = (_isString(element) ? (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element) : element).getBoundingClientRect(), offset = bounds[horizontal ? _width : _height] * ratio || 0;\n        return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;\n    };\n    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {\n        _isString(element) && (element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element));\n        var bounds = element.getBoundingClientRect(), size = bounds[horizontal ? _width : _height], offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf(\"%\") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;\n        return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;\n    };\n    ScrollTrigger.killAll = function killAll(allowListeners) {\n        _triggers.slice(0).forEach(function(t) {\n            return t.vars.id !== \"ScrollSmoother\" && t.kill();\n        });\n        if (allowListeners !== true) {\n            var listeners = _listeners.killAll || [];\n            _listeners = {};\n            listeners.forEach(function(f) {\n                return f();\n            });\n        }\n    };\n    return ScrollTrigger;\n}();\nScrollTrigger.version = \"3.12.7\";\nScrollTrigger.saveStyles = function(targets) {\n    return targets ? _toArray(targets).forEach(function(target) {\n        // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]\n        if (target && target.style) {\n            var i = _savedStyles.indexOf(target);\n            i >= 0 && _savedStyles.splice(i, 5);\n            _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute(\"transform\"), gsap.core.getCache(target), _context());\n        }\n    }) : _savedStyles;\n};\nScrollTrigger.revert = function(soft, media) {\n    return _revertAll(!soft, media);\n};\nScrollTrigger.create = function(vars, animation) {\n    return new ScrollTrigger(vars, animation);\n};\nScrollTrigger.refresh = function(safe) {\n    return safe ? _onResize(true) : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);\n};\nScrollTrigger.update = function(force) {\n    return ++_Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache && _updateAll(force === true ? 2 : 0);\n};\nScrollTrigger.clearScrollMemory = _clearScrollMemory;\nScrollTrigger.maxScroll = function(element, horizontal) {\n    return _maxScroll(element, horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n};\nScrollTrigger.getScrollFunc = function(element, horizontal) {\n    return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element), horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n};\nScrollTrigger.getById = function(id) {\n    return _ids[id];\n};\nScrollTrigger.getAll = function() {\n    return _triggers.filter(function(t) {\n        return t.vars.id !== \"ScrollSmoother\";\n    });\n}; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.\nScrollTrigger.isScrolling = function() {\n    return !!_lastScrollTime;\n};\nScrollTrigger.snapDirectional = _snapDirectional;\nScrollTrigger.addEventListener = function(type, callback) {\n    var a = _listeners[type] || (_listeners[type] = []);\n    ~a.indexOf(callback) || a.push(callback);\n};\nScrollTrigger.removeEventListener = function(type, callback) {\n    var a = _listeners[type], i = a && a.indexOf(callback);\n    i >= 0 && a.splice(i, 1);\n};\nScrollTrigger.batch = function(targets, vars) {\n    var result = [], varsCopy = {}, interval = vars.interval || 0.016, batchMax = vars.batchMax || 1e9, proxyCallback = function proxyCallback(type, callback) {\n        var elements = [], triggers = [], delay = gsap.delayedCall(interval, function() {\n            callback(elements, triggers);\n            elements = [];\n            triggers = [];\n        }).pause();\n        return function(self) {\n            elements.length || delay.restart(true);\n            elements.push(self.trigger);\n            triggers.push(self);\n            batchMax <= elements.length && delay.progress(1);\n        };\n    }, p;\n    for(p in vars){\n        varsCopy[p] = p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\" ? proxyCallback(p, vars[p]) : vars[p];\n    }\n    if (_isFunction(batchMax)) {\n        batchMax = batchMax();\n        _addListener(ScrollTrigger, \"refresh\", function() {\n            return batchMax = vars.batchMax();\n        });\n    }\n    _toArray(targets).forEach(function(target) {\n        var config = {};\n        for(p in varsCopy){\n            config[p] = varsCopy[p];\n        }\n        config.trigger = target;\n        result.push(ScrollTrigger.create(config));\n    });\n    return result;\n}; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).\nvar _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {\n    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);\n    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;\n}, _allowNativePanning = function _allowNativePanning(target, direction) {\n    if (direction === true) {\n        target.style.removeProperty(\"touch-action\");\n    } else {\n        target.style.touchAction = direction === true ? \"auto\" : direction ? \"pan-\" + direction + (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch ? \" pinch-zoom\" : \"\") : \"none\"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.\n    }\n    target === _docEl && _allowNativePanning(_body, direction);\n}, _overflow = {\n    auto: 1,\n    scroll: 1\n}, _nestedScroll = function _nestedScroll(_ref5) {\n    var event = _ref5.event, target = _ref5.target, axis = _ref5.axis;\n    var node = (event.changedTouches ? event.changedTouches[0] : event).target, cache = node._gsap || gsap.core.getCache(node), time = _getTime(), cs;\n    if (!cache._isScrollT || time - cache._isScrollT > 2000) {\n        // cache for 2 seconds to improve performance.\n        while(node && node !== _body && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))){\n            node = node.parentNode;\n        }\n        cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);\n        cache._isScrollT = time;\n    }\n    if (cache._isScroll || axis === \"x\") {\n        event.stopPropagation();\n        event._gsapAllow = true;\n    }\n}, // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor\n_inputObserver = function _inputObserver(target, type, inputs, nested) {\n    return _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.create({\n        target: target,\n        capture: true,\n        debounce: false,\n        lockAxis: true,\n        type: type,\n        onWheel: nested = nested && _nestedScroll,\n        onPress: nested,\n        onDrag: nested,\n        onScroll: nested,\n        onEnable: function onEnable() {\n            return inputs && _addListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, false, true);\n        },\n        onDisable: function onDisable() {\n            return _removeListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, true);\n        }\n    });\n}, _inputExp = /(input|label|select|textarea)/i, _inputIsFocused, _captureInputs = function _captureInputs(e) {\n    var isInput = _inputExp.test(e.target.tagName);\n    if (isInput || _inputIsFocused) {\n        e._gsapAllow = true;\n        _inputIsFocused = isInput;\n    }\n}, _getScrollNormalizer = function _getScrollNormalizer(vars) {\n    _isObject(vars) || (vars = {});\n    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;\n    vars.type || (vars.type = \"wheel,touch\");\n    vars.debounce = !!vars.debounce;\n    vars.id = vars.id || \"normalizer\";\n    var _vars2 = vars, normalizeScrollX = _vars2.normalizeScrollX, momentum = _vars2.momentum, allowNestedScroll = _vars2.allowNestedScroll, onRelease = _vars2.onRelease, self, maxY, target = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.target) || _docEl, smoother = gsap.core.globals().ScrollSmoother, smootherInstance = smoother && smoother.get(), content = _fixIOSBug && (vars.content && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()), scrollFuncY = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical), scrollFuncX = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal), scale = 1, initialScale = (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth, wheelRefresh = 0, resolveMomentumDuration = _isFunction(momentum) ? function() {\n        return momentum(self);\n    } : function() {\n        return momentum || 2.8;\n    }, lastRefreshID, skipTouchMove, inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll), resumeTouchMove = function resumeTouchMove() {\n        return skipTouchMove = false;\n    }, scrollClampX = _passThrough, scrollClampY = _passThrough, updateClamps = function updateClamps() {\n        maxY = _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n        scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);\n        normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)));\n        lastRefreshID = _refreshID;\n    }, removeContentOffset = function removeContentOffset() {\n        content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + \"px\";\n        content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + parseFloat(content._gsap.y) + \", 0, 1)\";\n        scrollFuncY.offset = scrollFuncY.cacheID = 0;\n    }, ignoreDrag = function ignoreDrag() {\n        if (skipTouchMove) {\n            requestAnimationFrame(resumeTouchMove);\n            var offset = _round(self.deltaY / 2), scroll = scrollClampY(scrollFuncY.v - offset);\n            if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {\n                scrollFuncY.offset = scroll - scrollFuncY.v;\n                var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);\n                content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + y + \", 0, 1)\";\n                content._gsap.y = y + \"px\";\n                scrollFuncY.cacheID = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache;\n                _updateAll();\n            }\n            return true;\n        }\n        scrollFuncY.offset && removeContentOffset();\n        skipTouchMove = true;\n    }, tween, startScrollX, startScrollY, onStopDelayedCall, onResize = function onResize() {\n        // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.\n        updateClamps();\n        if (tween.isActive() && tween.vars.scrollY > maxY) {\n            scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo(\"scrollY\", maxY);\n        }\n    };\n    content && gsap.set(content, {\n        y: \"+=0\"\n    }); // to ensure there's a cache (element._gsap)\n    vars.ignoreCheck = function(e) {\n        return _fixIOSBug && e.type === \"touchmove\" && ignoreDrag(e) || scale > 1.05 && e.type !== \"touchstart\" || self.isGesturing || e.touches && e.touches.length > 1;\n    };\n    vars.onPress = function() {\n        skipTouchMove = false;\n        var prevScale = scale;\n        scale = _round((_win.visualViewport && _win.visualViewport.scale || 1) / initialScale);\n        tween.pause();\n        prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : \"x\");\n        startScrollX = scrollFuncX();\n        startScrollY = scrollFuncY();\n        updateClamps();\n        lastRefreshID = _refreshID;\n    };\n    vars.onRelease = vars.onGestureStart = function(self, wasDragging) {\n        scrollFuncY.offset && removeContentOffset();\n        if (!wasDragging) {\n            onStopDelayedCall.restart(true);\n        } else {\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // make sure we're pulling the non-cached value\n            // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),\tdur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)\n            var dur = resolveMomentumDuration(), currentScroll, endScroll;\n            if (normalizeScrollX) {\n                currentScroll = scrollFuncX();\n                endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.\n                dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal));\n                tween.vars.scrollX = scrollClampX(endScroll);\n            }\n            currentScroll = scrollFuncY();\n            endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)\n            dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical));\n            tween.vars.scrollY = scrollClampY(endScroll);\n            tween.invalidate().duration(dur).play(0.01);\n            if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {\n                // iOS bug: it'll show the address bar but NOT fire the window \"resize\" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.\n                gsap.to({}, {\n                    onUpdate: onResize,\n                    duration: dur\n                });\n            }\n        }\n        onRelease && onRelease(self);\n    };\n    vars.onWheel = function() {\n        tween._ts && tween.pause();\n        if (_getTime() - wheelRefresh > 1000) {\n            // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.\n            lastRefreshID = 0;\n            wheelRefresh = _getTime();\n        }\n    };\n    vars.onChange = function(self, dx, dy, xArray, yArray) {\n        _refreshID !== lastRefreshID && updateClamps();\n        dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.\n        if (dy) {\n            scrollFuncY.offset && removeContentOffset();\n            var isTouch = yArray[2] === dy, y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1], yClamped = scrollClampY(y);\n            isTouch && y !== yClamped && (startScrollY += yClamped - y);\n            scrollFuncY(yClamped);\n        }\n        (dy || dx) && _updateAll();\n    };\n    vars.onEnable = function() {\n        _allowNativePanning(target, normalizeScrollX ? false : \"x\");\n        ScrollTrigger.addEventListener(\"refresh\", onResize);\n        _addListener(_win, \"resize\", onResize);\n        if (scrollFuncY.smooth) {\n            scrollFuncY.target.style.scrollBehavior = \"auto\";\n            scrollFuncY.smooth = scrollFuncX.smooth = false;\n        }\n        inputObserver.enable();\n    };\n    vars.onDisable = function() {\n        _allowNativePanning(target, true);\n        _removeListener(_win, \"resize\", onResize);\n        ScrollTrigger.removeEventListener(\"refresh\", onResize);\n        inputObserver.kill();\n    };\n    vars.lockAxis = vars.lockAxis !== false;\n    self = new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);\n    self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.\n    _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.\n    _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping\n    onStopDelayedCall = self._dc;\n    tween = gsap.to(self, {\n        ease: \"power4\",\n        paused: true,\n        inherit: false,\n        scrollX: normalizeScrollX ? \"+=0.1\" : \"+=0\",\n        scrollY: \"+=0.1\",\n        modifiers: {\n            scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function() {\n                return tween.pause();\n            })\n        },\n        onUpdate: _updateAll,\n        onComplete: onStopDelayedCall.vars.onComplete\n    }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.\n    return self;\n};\nScrollTrigger.sort = function(func) {\n    if (_isFunction(func)) {\n        return _triggers.sort(func);\n    }\n    var scroll = _win.pageYOffset || 0;\n    ScrollTrigger.getAll().forEach(function(t) {\n        return t._sortY = t.trigger ? scroll + t.trigger.getBoundingClientRect().top : t.start + _win.innerHeight;\n    });\n    return _triggers.sort(func || function(a, b) {\n        return (a.vars.refreshPriority || 0) * -1e6 + (a.vars.containerAnimation ? 1e6 : a._sortY) - ((b.vars.containerAnimation ? 1e6 : b._sortY) + (b.vars.refreshPriority || 0) * -1e6);\n    }); // anything with a containerAnimation should refresh last.\n};\nScrollTrigger.observe = function(vars) {\n    return new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);\n};\nScrollTrigger.normalizeScroll = function(vars) {\n    if (typeof vars === \"undefined\") {\n        return _normalizer;\n    }\n    if (vars === true && _normalizer) {\n        return _normalizer.enable();\n    }\n    if (vars === false) {\n        _normalizer && _normalizer.kill();\n        _normalizer = vars;\n        return;\n    }\n    var normalizer = vars instanceof _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer ? vars : _getScrollNormalizer(vars);\n    _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();\n    _isViewport(normalizer.target) && (_normalizer = normalizer);\n    return normalizer;\n};\nScrollTrigger.core = {\n    // smaller file size way to leverage in ScrollSmoother and Observer\n    _getVelocityProp: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._getVelocityProp,\n    _inputObserver: _inputObserver,\n    _scrollers: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers,\n    _proxies: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies,\n    bridge: {\n        // when normalizeScroll sets the scroll position (ss = setScroll)\n        ss: function ss() {\n            _lastScrollTime || _dispatch(\"scrollStart\");\n            _lastScrollTime = _getTime();\n        },\n        // a way to get the _refreshing value in Observer\n        ref: function ref() {\n            return _refreshing;\n        }\n    }\n};\n_getGSAP() && gsap.registerPlugin(ScrollTrigger);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/ScrollTrigger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animation: () => (/* binding */ Animation),\n/* harmony export */   Back: () => (/* binding */ Back),\n/* harmony export */   Bounce: () => (/* binding */ Bounce),\n/* harmony export */   Circ: () => (/* binding */ Circ),\n/* harmony export */   Cubic: () => (/* binding */ Cubic),\n/* harmony export */   Elastic: () => (/* binding */ Elastic),\n/* harmony export */   Expo: () => (/* binding */ Expo),\n/* harmony export */   GSCache: () => (/* binding */ GSCache),\n/* harmony export */   Linear: () => (/* binding */ Linear),\n/* harmony export */   Power0: () => (/* binding */ Power0),\n/* harmony export */   Power1: () => (/* binding */ Power1),\n/* harmony export */   Power2: () => (/* binding */ Power2),\n/* harmony export */   Power3: () => (/* binding */ Power3),\n/* harmony export */   Power4: () => (/* binding */ Power4),\n/* harmony export */   PropTween: () => (/* binding */ PropTween),\n/* harmony export */   Quad: () => (/* binding */ Quad),\n/* harmony export */   Quart: () => (/* binding */ Quart),\n/* harmony export */   Quint: () => (/* binding */ Quint),\n/* harmony export */   Sine: () => (/* binding */ Sine),\n/* harmony export */   SteppedEase: () => (/* binding */ SteppedEase),\n/* harmony export */   Strong: () => (/* binding */ Strong),\n/* harmony export */   Timeline: () => (/* binding */ Timeline),\n/* harmony export */   TimelineLite: () => (/* binding */ Timeline),\n/* harmony export */   TimelineMax: () => (/* binding */ Timeline),\n/* harmony export */   Tween: () => (/* binding */ Tween),\n/* harmony export */   TweenLite: () => (/* binding */ Tween),\n/* harmony export */   TweenMax: () => (/* binding */ Tween),\n/* harmony export */   _checkPlugin: () => (/* binding */ _checkPlugin),\n/* harmony export */   _colorExp: () => (/* binding */ _colorExp),\n/* harmony export */   _colorStringFilter: () => (/* binding */ _colorStringFilter),\n/* harmony export */   _config: () => (/* binding */ _config),\n/* harmony export */   _forEachName: () => (/* binding */ _forEachName),\n/* harmony export */   _getCache: () => (/* binding */ _getCache),\n/* harmony export */   _getProperty: () => (/* binding */ _getProperty),\n/* harmony export */   _getSetter: () => (/* binding */ _getSetter),\n/* harmony export */   _isString: () => (/* binding */ _isString),\n/* harmony export */   _isUndefined: () => (/* binding */ _isUndefined),\n/* harmony export */   _missingPlugin: () => (/* binding */ _missingPlugin),\n/* harmony export */   _numExp: () => (/* binding */ _numExp),\n/* harmony export */   _numWithUnitExp: () => (/* binding */ _numWithUnitExp),\n/* harmony export */   _parseRelative: () => (/* binding */ _parseRelative),\n/* harmony export */   _plugins: () => (/* binding */ _plugins),\n/* harmony export */   _relExp: () => (/* binding */ _relExp),\n/* harmony export */   _removeLinkedListItem: () => (/* binding */ _removeLinkedListItem),\n/* harmony export */   _renderComplexString: () => (/* binding */ _renderComplexString),\n/* harmony export */   _replaceRandom: () => (/* binding */ _replaceRandom),\n/* harmony export */   _round: () => (/* binding */ _round),\n/* harmony export */   _roundModifier: () => (/* binding */ _roundModifier),\n/* harmony export */   _setDefaults: () => (/* binding */ _setDefaults),\n/* harmony export */   _sortPropTweensByPriority: () => (/* binding */ _sortPropTweensByPriority),\n/* harmony export */   _ticker: () => (/* binding */ _ticker),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   \"default\": () => (/* binding */ gsap),\n/* harmony export */   distribute: () => (/* binding */ distribute),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   gsap: () => (/* binding */ gsap),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   mapRange: () => (/* binding */ mapRange),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   selector: () => (/* binding */ selector),\n/* harmony export */   shuffle: () => (/* binding */ shuffle),\n/* harmony export */   snap: () => (/* binding */ snap),\n/* harmony export */   splitColor: () => (/* binding */ splitColor),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   unitize: () => (/* binding */ unitize),\n/* harmony export */   wrap: () => (/* binding */ wrap),\n/* harmony export */   wrapYoyo: () => (/* binding */ wrapYoyo)\n/* harmony export */ });\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\n/*!\n * GSAP 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n        lineHeight: \"\"\n    }\n}, _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n}, _suppressOverwrites, _reverting, _context, _bigNum = 1e8, _tinyNum = 1 / _bigNum, _2PI = Math.PI * 2, _HALF_PI = _2PI / 4, _gsID = 0, _sqrt = Math.sqrt, _cos = Math.cos, _sin = Math.sin, _isString = function _isString(value) {\n    return typeof value === \"string\";\n}, _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n}, _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n}, _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n}, _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n}, _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n}, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n}, _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().\n_isArray = Array.isArray, _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.\n_numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g, _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.\n_relExp = /[+-]=-?[.\\d]+/, _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi, // previously /[#\\-+.]*\\b[a-z\\d\\-=+%.]+/gi but didn't catch special characters.\n_unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i, _globalTimeline, _win, _coreInitted, _doc, _globals = {}, _installScope = {}, _coreReady, _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n}, _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n}, _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n}, _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n}, _emptyFunc = function _emptyFunc() {\n    return 0;\n}, _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n}, _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n}, _revertConfig = {\n    suppressEvents: true\n}, _reservedProps = {}, _lazyTweens = [], _lazyLookup = {}, _lastRenderedFrame, _plugins = {}, _effects = {}, _nextGCFrame = 30, _harnessPlugins = [], _callbackNames = \"\", _harness = function _harness(targets) {\n    var target = targets[0], harnessPlugin, i;\n    _isObject(target) || _isFunction(target) || (targets = [\n        targets\n    ]);\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n        // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)\n        i = _harnessPlugins.length;\n        while(i-- && !_harnessPlugins[i].targetTest(target)){}\n        harnessPlugin = _harnessPlugins[i];\n    }\n    i = targets.length;\n    while(i--){\n        targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n    return targets;\n}, _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n}, _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n}, _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n}, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).\n_round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n}, _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n}, // increased precision mostly for timing values.\n_parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0), end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n}, _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.\n    var l = toFind.length, i = 0;\n    for(; toSearch.indexOf(toFind[i]) < 0 && ++i < l;){}\n    return i < l;\n}, _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length, a = _lazyTweens.slice(0), i, tween;\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n    for(i = 0; i < l; i++){\n        tween = a[i];\n        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n}, _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && !_reverting && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n}, _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n}, _passThrough = function _passThrough(p) {\n    return p;\n}, _setDefaults = function _setDefaults(obj, defaults) {\n    for(var p in defaults){\n        p in obj || (obj[p] = defaults[p]);\n    }\n    return obj;\n}, _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function(obj, defaults) {\n        for(var p in defaults){\n            p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n        }\n    };\n}, _merge = function _merge(base, toMerge) {\n    for(var p in toMerge){\n        base[p] = toMerge[p];\n    }\n    return base;\n}, _mergeDeep = function _mergeDeep(base, toMerge) {\n    for(var p in toMerge){\n        p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n    return base;\n}, _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {}, p;\n    for(p in obj){\n        p in excluding || (copy[p] = obj[p]);\n    }\n    return copy;\n}, _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline, func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n    if (_isNotFalse(vars.inherit)) {\n        while(parent){\n            func(vars, parent.vars.defaults);\n            parent = parent.parent || parent._dp;\n        }\n    }\n    return vars;\n}, _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length, match = i === a2.length;\n    while(match && i-- && a1[i] === a2[i]){}\n    return i < 0;\n}, _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n        firstProp = \"_first\";\n    }\n    if (lastProp === void 0) {\n        lastProp = \"_last\";\n    }\n    var prev = parent[lastProp], t;\n    if (sortBy) {\n        t = child[sortBy];\n        while(prev && prev[sortBy] > t){\n            prev = prev._prev;\n        }\n    }\n    if (prev) {\n        child._next = prev._next;\n        prev._next = child;\n    } else {\n        child._next = parent[firstProp];\n        parent[firstProp] = child;\n    }\n    if (child._next) {\n        child._next._prev = child;\n    } else {\n        parent[lastProp] = child;\n    }\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n}, _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n        firstProp = \"_first\";\n    }\n    if (lastProp === void 0) {\n        lastProp = \"_last\";\n    }\n    var prev = child._prev, next = child._next;\n    if (prev) {\n        prev._next = next;\n    } else if (parent[firstProp] === child) {\n        parent[firstProp] = next;\n    }\n    if (next) {\n        next._prev = prev;\n    } else if (parent[lastProp] === child) {\n        parent[lastProp] = prev;\n    }\n    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.\n}, _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);\n    child._act = 0;\n}, _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n        // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)\n        var a = animation;\n        while(a){\n            a._dirty = 1;\n            a = a.parent;\n        }\n    }\n    return animation;\n}, _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n    while(parent && parent.parent){\n        //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n        parent._dirty = 1;\n        parent.totalDuration();\n        parent = parent.parent;\n    }\n    return animation;\n}, _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n}, _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n}, _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n}, // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.\n_animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime = _roundPrecise(tTime / cycleDuration));\n    return tTime && whole === tTime ? whole - 1 : whole;\n}, _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n}, _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n}, _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.\n    var parent = animation._dp;\n    if (parent && parent.smoothChildTiming && animation._ts) {\n        animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n        _setEnd(animation);\n        parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n    }\n    return animation;\n}, /*\n_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {\n\tlet cycleDuration = duration + repeatDelay,\n\t\ttime = _round(clampedTotalTime % cycleDuration);\n\tif (time > duration) {\n\t\ttime = duration;\n\t}\n\treturn (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;\n},\n*/ _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {\n        // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).\n        t = _parentToChildTotalTime(timeline.rawTime(), child);\n        if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n            child.render(t, true);\n        }\n    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n        //in case any of the ancestors had completed but should now be enabled...\n        if (timeline._dur < timeline.duration()) {\n            t = timeline;\n            while(t._dp){\n                t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.\n                t = t._dp;\n            }\n        }\n        timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.\n    }\n}, _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)\n    return timeline;\n}, _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n}, _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n    if (!tween._initted) {\n        return 1;\n    }\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n        _lazyTweens.push(tween);\n        tween._lazy = [\n            tTime,\n            suppressEvents\n        ];\n        return 1;\n    }\n}, _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n}, // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0\n_isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n}, _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio, ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the \"startAt\" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any \"from\" and \"fromTo\" startAt tweens are rendered the first time at a ratio of 1.\n    repeatDelay = tween._rDelay, tTime = 0, pt, iteration, prevIteration;\n    if (repeatDelay && tween._repeat) {\n        // in case there's a zero-duration tween that has a repeat with a repeatDelay\n        tTime = _clamp(0, tween._tDur, totalTime);\n        iteration = _animationCycle(tTime, repeatDelay);\n        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n        if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n            // if iteration changed\n            prevRatio = 1 - ratio;\n            tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n        }\n    }\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n        if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n            // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n            return;\n        }\n        prevIteration = tween._zTime;\n        tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n        suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.\n        tween.ratio = ratio;\n        tween._from && (ratio = 1 - ratio);\n        tween._time = 0;\n        tween._tTime = tTime;\n        pt = tween._pt;\n        while(pt){\n            pt.r(ratio, pt.d);\n            pt = pt._next;\n        }\n        totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n        tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n        tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n            ratio && _removeFromParent(tween, 1);\n            if (!suppressEvents && !_reverting) {\n                _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n                tween._prom && tween._prom();\n            }\n        }\n    } else if (!tween._zTime) {\n        tween._zTime = totalTime;\n    }\n}, _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n    if (time > prevTime) {\n        child = animation._first;\n        while(child && child._start <= time){\n            if (child.data === \"isPause\" && child._start > prevTime) {\n                return child;\n            }\n            child = child._next;\n        }\n    } else {\n        child = animation._last;\n        while(child && child._start >= time){\n            if (child.data === \"isPause\" && child._start < prevTime) {\n                return child;\n            }\n            child = child._prev;\n        }\n    }\n}, _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat, dur = _roundPrecise(duration) || 0, totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n}, _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n}, _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n}, _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels, recent = animation._recent || _zeroPosition, clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n    i, offset, isPercent;\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n        //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n        offset = position.charAt(0);\n        isPercent = position.substr(-1) === \"%\";\n        i = position.indexOf(\"=\");\n        if (offset === \"<\" || offset === \">\") {\n            i >= 0 && (position = position.replace(/=/, \"\"));\n            return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n        }\n        if (i < 0) {\n            position in labels || (labels[position] = clippedDuration);\n            return labels[position];\n        }\n        offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n        if (isPercent && percentAnimation) {\n            offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n        }\n        return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n    return position == null ? clippedDuration : +position;\n}, _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]), varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1), vars = params[varsIndex], irVars, parent;\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n    if (type) {\n        irVars = vars;\n        parent = timeline;\n        while(parent && !(\"immediateRender\" in irVars)){\n            // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.\n            irVars = parent.vars.defaults || {};\n            parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n        }\n        vars.immediateRender = _isNotFalse(irVars.immediateRender);\n        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // \"from\" vars\n    }\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n}, _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n}, _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n}, getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n}, // note: protect against padded numbers as strings, like \"100.100\". That shouldn't return \"00\" as the unit. If it's numeric, return no unit.\nclamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function(v) {\n        return _clamp(min, max, v);\n    });\n}, _slice = [].slice, _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n}, _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n        accumulator = [];\n    }\n    return ar.forEach(function(value) {\n        var _accumulator;\n        return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n}, //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.\ntoArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [\n        value\n    ] : [];\n}, selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function(v) {\n        var el = value.current || value.nativeElement || value;\n        return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n}, shuffle = function shuffle(a) {\n    return a.sort(function() {\n        return .5 - Math.random();\n    });\n}, // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = (Math.random() * i) | 0, v = a[--i], a[i] = a[j], a[j] = v); return a;\n//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following\ndistribute = function distribute(v) {\n    if (_isFunction(v)) {\n        return v;\n    }\n    var vars = _isObject(v) ? v : {\n        each: v\n    }, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total \"amount\" that's chunked out among them all.\n    ease = _parseEase(vars.ease), from = vars.from || 0, base = parseFloat(vars.base) || 0, cache = {}, isDecimal = from > 0 && from < 1, ratios = isNaN(from) || isDecimal, axis = vars.axis, ratioX = from, ratioY = from;\n    if (_isString(from)) {\n        ratioX = ratioY = ({\n            center: .5,\n            edges: .5,\n            end: 1\n        })[from] || 0;\n    } else if (!isDecimal && ratios) {\n        ratioX = from[0];\n        ratioY = from[1];\n    }\n    return function(i, target, a) {\n        var l = (a || vars).length, distances = cache[l], originX, originY, x, y, d, j, max, min, wrapAt;\n        if (!distances) {\n            wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [\n                1,\n                _bigNum\n            ])[1];\n            if (!wrapAt) {\n                max = -_bigNum;\n                while(max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l){}\n                wrapAt < l && wrapAt--;\n            }\n            distances = cache[l] = [];\n            originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n            originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n            max = 0;\n            min = _bigNum;\n            for(j = 0; j < l; j++){\n                x = j % wrapAt - originX;\n                y = originY - (j / wrapAt | 0);\n                distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n                d > max && (max = d);\n                d < min && (min = d);\n            }\n            from === \"random\" && shuffle(distances);\n            distances.max = max - min;\n            distances.min = min;\n            distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n            distances.b = l < 0 ? base - l : base;\n            distances.u = getUnit(vars.amount || vars.each) || 0; //unit\n            ease = ease && l < 0 ? _invertEase(ease) : ease;\n        }\n        l = (distances[i] - distances.min) / distances.max || 0;\n        return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors\n    };\n}, _roundModifier = function _roundModifier(v) {\n    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())\n    return function(raw) {\n        var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n        return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!\n    };\n}, snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo), radius, is2D;\n    if (!isArray && _isObject(snapTo)) {\n        radius = isArray = snapTo.radius || _bigNum;\n        if (snapTo.values) {\n            snapTo = toArray(snapTo.values);\n            if (is2D = !_isNumber(snapTo[0])) {\n                radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.\n            }\n        } else {\n            snapTo = _roundModifier(snapTo.increment);\n        }\n    }\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function(raw) {\n        is2D = snapTo(raw);\n        return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function(raw) {\n        var x = parseFloat(is2D ? raw.x : raw), y = parseFloat(is2D ? raw.y : 0), min = _bigNum, closest = 0, i = snapTo.length, dx, dy;\n        while(i--){\n            if (is2D) {\n                dx = snapTo[i].x - x;\n                dy = snapTo[i].y - y;\n                dx = dx * dx + dy * dy;\n            } else {\n                dx = Math.abs(snapTo[i] - x);\n            }\n            if (dx < min) {\n                min = dx;\n                closest = i;\n            }\n        }\n        closest = !radius || min <= radius ? snapTo[closest] : raw;\n        return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n}, random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function() {\n        return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n}, pipe = function pipe() {\n    for(var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++){\n        functions[_key] = arguments[_key];\n    }\n    return function(value) {\n        return functions.reduce(function(v, f) {\n            return f(v);\n        }, value);\n    };\n}, unitize = function unitize(func, unit) {\n    return function(value) {\n        return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n}, normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n}, _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function(index) {\n        return a[~~wrapper(index)];\n    });\n}, wrap = function wrap(min, max, value) {\n    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function(value) {\n        return (range + (value - min) % range) % range + min;\n    });\n}, wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min, total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function(value) {\n        value = (total + (value - min) % total) % total || 0;\n        return min + (value > range ? total - value : value);\n    });\n}, _replaceRandom = function _replaceRandom(value) {\n    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])\n    var prev = 0, s = \"\", i, nums, end, isArray;\n    while(~(i = value.indexOf(\"random(\", prev))){\n        end = value.indexOf(\")\", i);\n        isArray = value.charAt(i + 7) === \"[\";\n        nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n        s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n        prev = end + 1;\n    }\n    return s + value.substr(prev, value.length - prev);\n}, mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin, outRange = outMax - outMin;\n    return _conditionalReturn(value, function(value) {\n        return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n}, interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function(p) {\n        return (1 - p) * start + p * end;\n    };\n    if (!func) {\n        var isString = _isString(start), master = {}, p, i, interpolators, l, il;\n        progress === true && (mutate = 1) && (progress = null);\n        if (isString) {\n            start = {\n                p: start\n            };\n            end = {\n                p: end\n            };\n        } else if (_isArray(start) && !_isArray(end)) {\n            interpolators = [];\n            l = start.length;\n            il = l - 2;\n            for(i = 1; i < l; i++){\n                interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.\n            }\n            l--;\n            func = function func(p) {\n                p *= l;\n                var i = Math.min(il, ~~p);\n                return interpolators[i](p - i);\n            };\n            progress = end;\n        } else if (!mutate) {\n            start = _merge(_isArray(start) ? [] : {}, start);\n        }\n        if (!interpolators) {\n            for(p in end){\n                _addPropTween.call(master, start, p, \"get\", end[p]);\n            }\n            func = function func(p) {\n                return _renderPropTweens(p, master) || (isString ? start.p : start);\n            };\n        }\n    }\n    return _conditionalReturn(progress, func);\n}, _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    //used for nextLabel() and previousLabel()\n    var labels = timeline.labels, min = _bigNum, p, distance, label;\n    for(p in labels){\n        distance = labels[p] - fromTime;\n        if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n            label = p;\n            min = distance;\n        }\n    }\n    return label;\n}, _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars, callback = v[type], prevContext = _context, context = animation._ctx, params, scope, result;\n    if (!callback) {\n        return;\n    }\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n}, _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n}, _quickTween, _registerPluginQueue = [], _createPlugin = function _createPlugin(config) {\n    if (!config) return;\n    config = !config.name && config[\"default\"] || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.\n    if (_windowExists() || config.headless) {\n        // edge case: some build tools may pass in a null/undefined value\n        var name = config.name, isFunc = _isFunction(config), Plugin = name && !isFunc && config.init ? function() {\n            this._props = [];\n        } : config, //in case someone passes in an object that's not a plugin, like CustomEase\n        instanceDefaults = {\n            init: _emptyFunc,\n            render: _renderPropTweens,\n            add: _addPropTween,\n            kill: _killPropTweensOf,\n            modifier: _addPluginModifier,\n            rawVars: 0\n        }, statics = {\n            targetTest: 0,\n            get: 0,\n            getSetter: _getSetter,\n            aliases: {},\n            register: 0\n        };\n        _wake();\n        if (config !== Plugin) {\n            if (_plugins[name]) {\n                return;\n            }\n            _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods\n            _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods\n            _plugins[Plugin.prop = name] = Plugin;\n            if (config.targetTest) {\n                _harnessPlugins.push(Plugin);\n                _reservedProps[name] = 1;\n            }\n            name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\"; //for the global name. \"motionPath\" should become MotionPathPlugin\n        }\n        _addGlobal(name, Plugin);\n        config.register && config.register(gsap, Plugin, PropTween);\n    } else {\n        _registerPluginQueue.push(config);\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * COLORS\n * --------------------------------------------------------------------------------------\n */ _255 = 255, _colorLookup = {\n    aqua: [\n        0,\n        _255,\n        _255\n    ],\n    lime: [\n        0,\n        _255,\n        0\n    ],\n    silver: [\n        192,\n        192,\n        192\n    ],\n    black: [\n        0,\n        0,\n        0\n    ],\n    maroon: [\n        128,\n        0,\n        0\n    ],\n    teal: [\n        0,\n        128,\n        128\n    ],\n    blue: [\n        0,\n        0,\n        _255\n    ],\n    navy: [\n        0,\n        0,\n        128\n    ],\n    white: [\n        _255,\n        _255,\n        _255\n    ],\n    olive: [\n        128,\n        128,\n        0\n    ],\n    yellow: [\n        _255,\n        _255,\n        0\n    ],\n    orange: [\n        _255,\n        165,\n        0\n    ],\n    gray: [\n        128,\n        128,\n        128\n    ],\n    purple: [\n        128,\n        0,\n        128\n    ],\n    green: [\n        0,\n        128,\n        0\n    ],\n    red: [\n        _255,\n        0,\n        0\n    ],\n    pink: [\n        _255,\n        192,\n        203\n    ],\n    cyan: [\n        0,\n        _255,\n        _255\n    ],\n    transparent: [\n        _255,\n        _255,\n        _255,\n        0\n    ]\n}, // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:\n// let ctx = _doc.createElement(\"canvas\").getContext(\"2d\");\n// _forEachName(\"aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan\", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});\n_hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n}, splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [\n        v >> 16,\n        v >> 8 & _255,\n        v & _255\n    ] : 0, r, g, b, h, s, l, max, min, d, wasHSL;\n    if (!a) {\n        if (v.substr(-1) === \",\") {\n            //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n            v = v.substr(0, v.length - 1);\n        }\n        if (_colorLookup[v]) {\n            a = _colorLookup[v];\n        } else if (v.charAt(0) === \"#\") {\n            if (v.length < 6) {\n                //for shorthand like #9F0 or #9F0F (could have alpha)\n                r = v.charAt(1);\n                g = v.charAt(2);\n                b = v.charAt(3);\n                v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n            }\n            if (v.length === 9) {\n                // hex with alpha, like #fd5e53ff\n                a = parseInt(v.substr(1, 6), 16);\n                return [\n                    a >> 16,\n                    a >> 8 & _255,\n                    a & _255,\n                    parseInt(v.substr(7), 16) / 255\n                ];\n            }\n            v = parseInt(v.substr(1), 16);\n            a = [\n                v >> 16,\n                v >> 8 & _255,\n                v & _255\n            ];\n        } else if (v.substr(0, 3) === \"hsl\") {\n            a = wasHSL = v.match(_strictNumExp);\n            if (!toHSL) {\n                h = +a[0] % 360 / 360;\n                s = +a[1] / 100;\n                l = +a[2] / 100;\n                g = l <= .5 ? l * (s + 1) : l + s - l * s;\n                r = l * 2 - g;\n                a.length > 3 && (a[3] *= 1); //cast as number\n                a[0] = _hue(h + 1 / 3, r, g);\n                a[1] = _hue(h, r, g);\n                a[2] = _hue(h - 1 / 3, r, g);\n            } else if (~v.indexOf(\"=\")) {\n                //if relative values are found, just return the raw strings with the relative prefixes in place.\n                a = v.match(_numExp);\n                forceAlpha && a.length < 4 && (a[3] = 1);\n                return a;\n            }\n        } else {\n            a = v.match(_strictNumExp) || _colorLookup.transparent;\n        }\n        a = a.map(Number);\n    }\n    if (toHSL && !wasHSL) {\n        r = a[0] / _255;\n        g = a[1] / _255;\n        b = a[2] / _255;\n        max = Math.max(r, g, b);\n        min = Math.min(r, g, b);\n        l = (max + min) / 2;\n        if (max === min) {\n            h = s = 0;\n        } else {\n            d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n            h *= 60;\n        }\n        a[0] = ~~(h + .5);\n        a[1] = ~~(s * 100 + .5);\n        a[2] = ~~(l * 100 + .5);\n    }\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n}, _colorOrderData = function _colorOrderData(v) {\n    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a \"c\" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()\n    var values = [], c = [], i = -1;\n    v.split(_colorExp).forEach(function(v) {\n        var a = v.match(_numWithUnitExp) || [];\n        values.push.apply(values, a);\n        c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n}, _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\", colors = (s + result).match(_colorExp), type = toHSL ? \"hsla(\" : \"rgba(\", i = 0, c, shell, d, l;\n    if (!colors) {\n        return s;\n    }\n    colors = colors.map(function(color) {\n        return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n    if (orderMatchData) {\n        d = _colorOrderData(s);\n        c = orderMatchData.c;\n        if (c.join(result) !== d.c.join(result)) {\n            shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n            l = shell.length - 1;\n            for(; i < l; i++){\n                result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n            }\n        }\n    }\n    if (!shell) {\n        shell = s.split(_colorExp);\n        l = shell.length - 1;\n        for(; i < l; i++){\n            result += shell[i] + colors[i];\n        }\n    }\n    return result + shell[l];\n}, _colorExp = function() {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,\n    p;\n    for(p in _colorLookup){\n        s += \"|\" + p + \"\\\\b\";\n    }\n    return new RegExp(s + \")\", \"gi\");\n}(), _hslExp = /hsl[a]?\\(/, _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"), toHSL;\n    _colorExp.lastIndex = 0;\n    if (_colorExp.test(combined)) {\n        toHSL = _hslExp.test(combined);\n        a[1] = _formatColors(a[1], toHSL);\n        a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.\n        return true;\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * TICKER\n * --------------------------------------------------------------------------------------\n */ _tickerActive, _ticker = function() {\n    var _getTime = Date.now, _lagThreshold = 500, _adjustedLag = 33, _startTime = _getTime(), _lastUpdate = _startTime, _gap = 1000 / 240, _nextTime = _gap, _listeners = [], _id, _req, _raf, _self, _delta, _i, _tick = function _tick(v) {\n        var elapsed = _getTime() - _lastUpdate, manual = v === true, overlap, dispatch, time, frame;\n        (elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);\n        _lastUpdate += elapsed;\n        time = _lastUpdate - _startTime;\n        overlap = time - _nextTime;\n        if (overlap > 0 || manual) {\n            frame = ++_self.frame;\n            _delta = time - _self.time * 1000;\n            _self.time = time = time / 1000;\n            _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n            dispatch = 1;\n        }\n        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n        if (dispatch) {\n            for(_i = 0; _i < _listeners.length; _i++){\n                // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.\n                _listeners[_i](time, _delta, frame, v);\n            }\n        }\n    };\n    _self = {\n        time: 0,\n        frame: 0,\n        tick: function tick() {\n            _tick(true);\n        },\n        deltaRatio: function deltaRatio(fps) {\n            return _delta / (1000 / (fps || 60));\n        },\n        wake: function wake() {\n            if (_coreReady) {\n                if (!_coreInitted && _windowExists()) {\n                    _win = _coreInitted = window;\n                    _doc = _win.document || {};\n                    _globals.gsap = gsap;\n                    (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n                    _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n                    _registerPluginQueue.forEach(_createPlugin);\n                }\n                _raf = typeof requestAnimationFrame !== \"undefined\" && requestAnimationFrame;\n                _id && _self.sleep();\n                _req = _raf || function(f) {\n                    return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n                };\n                _tickerActive = 1;\n                _tick(2);\n            }\n        },\n        sleep: function sleep() {\n            (_raf ? cancelAnimationFrame : clearTimeout)(_id);\n            _tickerActive = 0;\n            _req = _emptyFunc;\n        },\n        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n            _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited\n            _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);\n        },\n        fps: function fps(_fps) {\n            _gap = 1000 / (_fps || 240);\n            _nextTime = _self.time * 1000 + _gap;\n        },\n        add: function add(callback, once, prioritize) {\n            var func = once ? function(t, d, f, v) {\n                callback(t, d, f, v);\n                _self.remove(func);\n            } : callback;\n            _self.remove(callback);\n            _listeners[prioritize ? \"unshift\" : \"push\"](func);\n            _wake();\n            return func;\n        },\n        remove: function remove(callback, i) {\n            ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n        },\n        _listeners: _listeners\n    };\n    return _self;\n}(), _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n}, //also ensures the core classes are initialized.\n/*\n* -------------------------------------------------\n* EASING\n* -------------------------------------------------\n*/ _easeMap = {}, _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/, _quotesExp = /[\"']/g, _parseObjectInString = function _parseObjectInString(value) {\n    //takes a string like \"{wiggles:10, type:anticipate})\" and turns it into a real object. Notice it ends in \")\" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.\n    var obj = {}, split = value.substr(1, value.length - 3).split(\":\"), key = split[0], i = 1, l = split.length, index, val, parsedVal;\n    for(; i < l; i++){\n        val = split[i];\n        index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n        parsedVal = val.substr(0, index);\n        obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n        key = val.substr(index + 1).trim();\n    }\n    return obj;\n}, _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1, close = value.indexOf(\")\"), nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n}, _configEaseFromString = function _configEaseFromString(name) {\n    //name can be a string like \"elastic.out(1,0.5)\", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).\n    var split = (name + \"\").split(\"(\"), ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [\n        _parseObjectInString(split[1])\n    ] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n}, _invertEase = function _invertEase(ease) {\n    return function(p) {\n        return 1 - ease(1 - p);\n    };\n}, // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.\n_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first, ease;\n    while(child){\n        if (child instanceof Timeline) {\n            _propagateYoyoEase(child, isYoyo);\n        } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n            if (child.timeline) {\n                _propagateYoyoEase(child.timeline, isYoyo);\n            } else {\n                ease = child._ease;\n                child._ease = child._yEase;\n                child._yEase = ease;\n                child._yoyo = isYoyo;\n            }\n        }\n        child = child._next;\n    }\n}, _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n}, _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n        easeOut = function easeOut(p) {\n            return 1 - easeIn(1 - p);\n        };\n    }\n    if (easeInOut === void 0) {\n        easeInOut = function easeInOut(p) {\n            return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n        };\n    }\n    var ease = {\n        easeIn: easeIn,\n        easeOut: easeOut,\n        easeInOut: easeInOut\n    }, lowercaseName;\n    _forEachName(names, function(name) {\n        _easeMap[name] = _globals[name] = ease;\n        _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n        for(var p in ease){\n            _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n        }\n    });\n    return ease;\n}, _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function(p) {\n        return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n}, _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n    p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1), p3 = p2 / _2PI * (Math.asin(1 / p1) || 0), easeOut = function easeOut(p) {\n        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n        return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n    p2 = _2PI / p2; //precalculate to optimize\n    ease.config = function(amplitude, period) {\n        return _configElastic(type, amplitude, period);\n    };\n    return ease;\n}, _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n        overshoot = 1.70158;\n    }\n    var easeOut = function easeOut(p) {\n        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n        return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n    ease.config = function(overshoot) {\n        return _configBack(type, overshoot);\n    };\n    return ease;\n}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEase = ratio => {\n// \tlet y = 0.5 + ratio / 2;\n// \treturn p => (2 * (1 - p) * p * y + p * p);\n// },\n// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEaseStrong = ratio => {\n// \tratio = .5 + ratio / 2;\n// \tlet o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),\n// \t\tb = ratio - o,\n// \t\tc = ratio + o;\n// \treturn p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;\n// };\n_forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function(name, i) {\n    var power = i < 5 ? i + 1 : i;\n    _insertEase(name + \",Power\" + (power - 1), i ? function(p) {\n        return Math.pow(p, power);\n    } : function(p) {\n        return p;\n    }, function(p) {\n        return 1 - Math.pow(1 - p, power);\n    }, function(p) {\n        return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n});\n_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n_insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n(function(n, c) {\n    var n1 = 1 / c, n2 = 2 * n1, n3 = 2.5 * n1, easeOut = function easeOut(p) {\n        return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n    _insertEase(\"Bounce\", function(p) {\n        return 1 - easeOut(1 - p);\n    }, easeOut);\n})(7.5625, 2.75);\n_insertEase(\"Expo\", function(p) {\n    return Math.pow(2, 10 * (p - 1)) * p + p * p * p * p * p * p * (1 - p);\n}); // previously 2 ** (10 * (p - 1)) but that doesn't end up with the value quite at the right spot so we do a blended ease to ensure it lands where it should perfectly.\n_insertEase(\"Circ\", function(p) {\n    return -(_sqrt(1 - p * p) - 1);\n});\n_insertEase(\"Sine\", function(p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n});\n_insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n        if (steps === void 0) {\n            steps = 1;\n        }\n        var p1 = 1 / steps, p2 = steps + (immediateStart ? 0 : 1), p3 = immediateStart ? 1 : 0, max = 1 - _tinyNum;\n        return function(p) {\n            return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n        };\n    }\n};\n_defaults.ease = _easeMap[\"quad.out\"];\n_forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function(name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n});\n/*\n * --------------------------------------------------------------------------------------\n * CACHE\n * --------------------------------------------------------------------------------------\n */ var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n};\n/*\n * --------------------------------------------------------------------------------------\n * ANIMATION\n * --------------------------------------------------------------------------------------\n */ var Animation = /*#__PURE__*/ function() {\n    function Animation(vars) {\n        this.vars = vars;\n        this._delay = +vars.delay || 0;\n        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n            // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.\n            this._rDelay = vars.repeatDelay || 0;\n            this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n        }\n        this._ts = 1;\n        _setDuration(this, +vars.duration, 1, 1);\n        this.data = vars.data;\n        if (_context) {\n            this._ctx = _context;\n            _context.data.push(this);\n        }\n        _tickerActive || _ticker.wake();\n    }\n    var _proto = Animation.prototype;\n    _proto.delay = function delay(value) {\n        if (value || value === 0) {\n            this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n            this._delay = value;\n            return this;\n        }\n        return this._delay;\n    };\n    _proto.duration = function duration(value) {\n        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n    _proto.totalDuration = function totalDuration(value) {\n        if (!arguments.length) {\n            return this._tDur;\n        }\n        this._dirty = 0;\n        return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n        _wake();\n        if (!arguments.length) {\n            return this._tTime;\n        }\n        var parent = this._dp;\n        if (parent && parent.smoothChildTiming && this._ts) {\n            _alignPlayhead(this, _totalTime);\n            !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.\n            //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.\n            while(parent && parent.parent){\n                if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n                    parent.totalTime(parent._tTime, true);\n                }\n                parent = parent.parent;\n            }\n            if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n                //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.\n                _addToTimeline(this._dp, this, this._start - this._delay);\n            }\n        }\n        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n            // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)\n            this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause\n            //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)\n            //   this._lock = 1;\n            _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;\n        //}\n        }\n        return this;\n    };\n    _proto.time = function time(value, suppressEvents) {\n        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!\n    };\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() >= 0 && this._initted ? 1 : 0;\n    };\n    _proto.progress = function progress(value, suppressEvents) {\n        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;\n    };\n    _proto.iteration = function iteration(value, suppressEvents) {\n        var cycleDuration = this.duration() + this._rDelay;\n        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    } // potential future addition:\n    ;\n    _proto.timeScale = function timeScale(value, suppressEvents) {\n        if (!arguments.length) {\n            return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.\n        }\n        if (this._rts === value) {\n            return this;\n        }\n        var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.\n        // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.\n        //(+value < 0 && this._rts >= 0) && _callback(this, \"onReverse\", true);\n        // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.\n        this._rts = +value || 0;\n        this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.\n        this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);\n        _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.\n        return _recacheAncestors(this);\n    };\n    _proto.paused = function paused(value) {\n        if (!arguments.length) {\n            return this._ps;\n        } // possible future addition - if an animation is removed from its parent and then .restart() or .play() or .resume() is called, perhaps we should force it back into the globalTimeline but be careful because what if it's already at its end? We don't want it to just persist forever and not get released for GC.\n        // !this.parent && !value && this._tTime < this._tDur && this !== _globalTimeline && _globalTimeline.add(this);\n        if (this._ps !== value) {\n            this._ps = value;\n            if (value) {\n                this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.\n                this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the \"real\" timeScale as _rts (recorded time scale)\n            } else {\n                _wake();\n                this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.\n                this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.\n            }\n        }\n        return this;\n    };\n    _proto.startTime = function startTime(value) {\n        if (arguments.length) {\n            this._start = value;\n            var parent = this.parent || this._dp;\n            parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n            return this;\n        }\n        return this._start;\n    };\n    _proto.endTime = function endTime(includeRepeats) {\n        return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n    _proto.rawTime = function rawTime(wrapRepeats) {\n        var parent = this.parent || this._dp; // _dp = detached parent\n        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n    _proto.revert = function revert(config) {\n        if (config === void 0) {\n            config = _revertConfig;\n        }\n        var prevIsReverting = _reverting;\n        _reverting = config;\n        if (this._initted || this._startAt) {\n            this.timeline && this.timeline.revert(config);\n            this.totalTime(-0.01, config.suppressEvents);\n        }\n        this.data !== \"nested\" && config.kill !== false && this.kill();\n        _reverting = prevIsReverting;\n        return this;\n    };\n    _proto.globalTime = function globalTime(rawTime) {\n        var animation = this, time = arguments.length ? rawTime : animation.rawTime();\n        while(animation){\n            time = animation._start + time / (Math.abs(animation._ts) || 1);\n            animation = animation._dp;\n        }\n        return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). \"_sat\" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().\n    };\n    _proto.repeat = function repeat(value) {\n        if (arguments.length) {\n            this._repeat = value === Infinity ? -2 : value;\n            return _onUpdateTotalDuration(this);\n        }\n        return this._repeat === -2 ? Infinity : this._repeat;\n    };\n    _proto.repeatDelay = function repeatDelay(value) {\n        if (arguments.length) {\n            var time = this._time;\n            this._rDelay = value;\n            _onUpdateTotalDuration(this);\n            return time ? this.time(time) : this;\n        }\n        return this._rDelay;\n    };\n    _proto.yoyo = function yoyo(value) {\n        if (arguments.length) {\n            this._yoyo = value;\n            return this;\n        }\n        return this._yoyo;\n    };\n    _proto.seek = function seek(position, suppressEvents) {\n        return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n        this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n        this._dur || (this._zTime = -_tinyNum); // ensures onComplete fires on a zero-duration animation that gets restarted.\n        return this;\n    };\n    _proto.play = function play(from, suppressEvents) {\n        from != null && this.seek(from, suppressEvents);\n        return this.reversed(false).paused(false);\n    };\n    _proto.reverse = function reverse(from, suppressEvents) {\n        from != null && this.seek(from || this.totalDuration(), suppressEvents);\n        return this.reversed(true).paused(false);\n    };\n    _proto.pause = function pause(atTime, suppressEvents) {\n        atTime != null && this.seek(atTime, suppressEvents);\n        return this.paused(true);\n    };\n    _proto.resume = function resume() {\n        return this.paused(false);\n    };\n    _proto.reversed = function reversed(value) {\n        if (arguments.length) {\n            !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.\n            return this;\n        }\n        return this._rts < 0;\n    };\n    _proto.invalidate = function invalidate() {\n        this._initted = this._act = 0;\n        this._zTime = -_tinyNum;\n        return this;\n    };\n    _proto.isActive = function isActive() {\n        var parent = this.parent || this._dp, start = this._start, rawTime;\n        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n        var vars = this.vars;\n        if (arguments.length > 1) {\n            if (!callback) {\n                delete vars[type];\n            } else {\n                vars[type] = callback;\n                params && (vars[type + \"Params\"] = params);\n                type === \"onUpdate\" && (this._onUpdate = callback);\n            }\n            return this;\n        }\n        return vars[type];\n    };\n    _proto.then = function then(onFulfilled) {\n        var self = this;\n        return new Promise(function(resolve) {\n            var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough, _resolve = function _resolve() {\n                var _then = self.then;\n                self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)\n                _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n                resolve(f);\n                self.then = _then;\n            };\n            if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n                _resolve();\n            } else {\n                self._prom = _resolve;\n            }\n        });\n    };\n    _proto.kill = function kill() {\n        _interrupt(this);\n    };\n    return Animation;\n}();\n_setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n});\n/*\n * -------------------------------------------------\n * TIMELINE\n * -------------------------------------------------\n */ var Timeline = /*#__PURE__*/ function(_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n    function Timeline(vars, position) {\n        var _this;\n        if (vars === void 0) {\n            vars = {};\n        }\n        _this = _Animation.call(this, vars) || this;\n        _this.labels = {};\n        _this.smoothChildTiming = !!vars.smoothChildTiming;\n        _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n        _this._sort = _isNotFalse(vars.sortChildren);\n        _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n        vars.reversed && _this.reverse();\n        vars.paused && _this.paused(true);\n        vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n        return _this;\n    }\n    var _proto2 = Timeline.prototype;\n    _proto2.to = function to(targets, vars, position) {\n        _createTweenType(0, arguments, this);\n        return this;\n    };\n    _proto2.from = function from(targets, vars, position) {\n        _createTweenType(1, arguments, this);\n        return this;\n    };\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n        _createTweenType(2, arguments, this);\n        return this;\n    };\n    _proto2.set = function set(targets, vars, position) {\n        vars.duration = 0;\n        vars.parent = this;\n        _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n        vars.immediateRender = !!vars.immediateRender;\n        new Tween(targets, vars, _parsePosition(this, position), 1);\n        return this;\n    };\n    _proto2.call = function call(callback, params, position) {\n        return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    } //ONLY for backward compatibility! Maybe delete?\n    ;\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        vars.duration = duration;\n        vars.stagger = vars.stagger || stagger;\n        vars.onComplete = onCompleteAll;\n        vars.onCompleteParams = onCompleteAllParams;\n        vars.parent = this;\n        new Tween(targets, vars, _parsePosition(this, position));\n        return this;\n    };\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        vars.runBackwards = 1;\n        _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        toVars.startAt = fromVars;\n        _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n        var prevTime = this._time, tDur = this._dirty ? this.totalDuration() : this._tDur, dur = this._dur, tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.\n        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur), time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;\n        this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n        if (tTime !== this._tTime || force || crossingStart) {\n            if (prevTime !== this._time && dur) {\n                //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n                tTime += this._time - prevTime;\n                totalTime += this._time - prevTime;\n            }\n            time = tTime;\n            prevStart = this._start;\n            timeScale = this._ts;\n            prevPaused = !timeScale;\n            if (crossingStart) {\n                dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n                (totalTime || !suppressEvents) && (this._zTime = totalTime);\n            }\n            if (this._repeat) {\n                //adjust the time for repeats and yoyos\n                yoyo = this._yoyo;\n                cycleDuration = dur + this._rDelay;\n                if (this._repeat < -1 && totalTime < 0) {\n                    return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                }\n                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n                if (tTime === tDur) {\n                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n                    iteration = this._repeat;\n                    time = dur;\n                } else {\n                    prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)\n                    iteration = ~~prevIteration;\n                    if (iteration && iteration === prevIteration) {\n                        time = dur;\n                        iteration--;\n                    }\n                    time > dur && (time = dur);\n                }\n                prevIteration = _animationCycle(this._tTime, cycleDuration);\n                !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the \"repeatDelay\" portion\n                if (yoyo && iteration & 1) {\n                    time = dur - time;\n                    isYoyo = 1;\n                }\n                /*\n        make sure children at the end/beginning of the timeline are rendered properly. If, for example,\n        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n        ensure that zero-duration tweens at the very beginning or end of the Timeline work.\n        */ if (iteration !== prevIteration && !this._lock) {\n                    var rewinding = yoyo && prevIteration & 1, doesWrap = rewinding === (yoyo && iteration & 1);\n                    iteration < prevIteration && (rewinding = !rewinding);\n                    prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.\n                    this._lock = 1;\n                    this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n                    this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.\n                    !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n                    this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n                    if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n                        // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.\n                        return this;\n                    }\n                    dur = this._dur; // in case the duration changed in the onRepeat\n                    tDur = this._tDur;\n                    if (doesWrap) {\n                        this._lock = 2;\n                        prevTime = rewinding ? dur : -0.0001;\n                        this.render(prevTime, true);\n                        this.vars.repeatRefresh && !isYoyo && this.invalidate();\n                    }\n                    this._lock = 0;\n                    if (!this._ts && !prevPaused) {\n                        return this;\n                    } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.\n                    _propagateYoyoEase(this, isYoyo);\n                }\n            }\n            if (this._hasPause && !this._forcing && this._lock < 2) {\n                pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n                if (pauseTween) {\n                    tTime -= time - (time = pauseTween._start);\n                }\n            }\n            this._tTime = tTime;\n            this._time = time;\n            this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n            if (!this._initted) {\n                this._onUpdate = this.vars.onUpdate;\n                this._initted = 1;\n                this._zTime = totalTime;\n                prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).\n            }\n            if (!prevTime && time && !suppressEvents && !iteration) {\n                _callback(this, \"onStart\");\n                if (this._tTime !== tTime) {\n                    // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.\n                    return this;\n                }\n            }\n            if (time >= prevTime && totalTime >= 0) {\n                child = this._first;\n                while(child){\n                    next = child._next;\n                    if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n                        if (child.parent !== this) {\n                            // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n                            return this.render(totalTime, suppressEvents, force);\n                        }\n                        child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n                        if (time !== this._time || !this._ts && !prevPaused) {\n                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n                            pauseTween = 0;\n                            next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that the next time render() is called it'll be forced (to render any remaining children)\n                            break;\n                        }\n                    }\n                    child = next;\n                }\n            } else {\n                child = this._last;\n                var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.\n                while(child){\n                    next = child._prev;\n                    if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n                        if (child.parent !== this) {\n                            // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n                            return this.render(totalTime, suppressEvents, force);\n                        }\n                        child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.\n                        if (time !== this._time || !this._ts && !prevPaused) {\n                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n                            pauseTween = 0;\n                            next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)\n                            break;\n                        }\n                    }\n                    child = next;\n                }\n            }\n            if (pauseTween && !suppressEvents) {\n                this.pause();\n                pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n                if (this._ts) {\n                    //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).\n                    this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.\n                    _setEnd(this);\n                    return this.render(totalTime, suppressEvents, force);\n                }\n            }\n            this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n            if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) {\n                if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) {\n                    if (!this._lock) {\n                        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.\n                        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n                        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n                            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n                            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                        }\n                    }\n                }\n            }\n        }\n        return this;\n    };\n    _proto2.add = function add(child, position) {\n        var _this2 = this;\n        _isNumber(position) || (position = _parsePosition(this, position, child));\n        if (!(child instanceof Animation)) {\n            if (_isArray(child)) {\n                child.forEach(function(obj) {\n                    return _this2.add(obj, position);\n                });\n                return this;\n            }\n            if (_isString(child)) {\n                return this.addLabel(child, position);\n            }\n            if (_isFunction(child)) {\n                child = Tween.delayedCall(0, child);\n            } else {\n                return this;\n            }\n        }\n        return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!\n    };\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n        if (nested === void 0) {\n            nested = true;\n        }\n        if (tweens === void 0) {\n            tweens = true;\n        }\n        if (timelines === void 0) {\n            timelines = true;\n        }\n        if (ignoreBeforeTime === void 0) {\n            ignoreBeforeTime = -_bigNum;\n        }\n        var a = [], child = this._first;\n        while(child){\n            if (child._start >= ignoreBeforeTime) {\n                if (child instanceof Tween) {\n                    tweens && a.push(child);\n                } else {\n                    timelines && a.push(child);\n                    nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n                }\n            }\n            child = child._next;\n        }\n        return a;\n    };\n    _proto2.getById = function getById(id) {\n        var animations = this.getChildren(1, 1, 1), i = animations.length;\n        while(i--){\n            if (animations[i].vars.id === id) {\n                return animations[i];\n            }\n        }\n    };\n    _proto2.remove = function remove(child) {\n        if (_isString(child)) {\n            return this.removeLabel(child);\n        }\n        if (_isFunction(child)) {\n            return this.killTweensOf(child);\n        }\n        child.parent === this && _removeLinkedListItem(this, child);\n        if (child === this._recent) {\n            this._recent = this._last;\n        }\n        return _uncache(this);\n    };\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n        if (!arguments.length) {\n            return this._tTime;\n        }\n        this._forcing = 1;\n        if (!this._dp && this._ts) {\n            //special case for the global timeline (or any other that has no parent or detached parent).\n            this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n        }\n        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n        this._forcing = 0;\n        return this;\n    };\n    _proto2.addLabel = function addLabel(label, position) {\n        this.labels[label] = _parsePosition(this, position);\n        return this;\n    };\n    _proto2.removeLabel = function removeLabel(label) {\n        delete this.labels[label];\n        return this;\n    };\n    _proto2.addPause = function addPause(position, callback, params) {\n        var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n        t.data = \"isPause\";\n        this._hasPause = 1;\n        return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n    _proto2.removePause = function removePause(position) {\n        var child = this._first;\n        position = _parsePosition(this, position);\n        while(child){\n            if (child._start === position && child.data === \"isPause\") {\n                _removeFromParent(child);\n            }\n            child = child._next;\n        }\n    };\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n        var tweens = this.getTweensOf(targets, onlyActive), i = tweens.length;\n        while(i--){\n            _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n        }\n        return this;\n    };\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n        var a = [], parsedTargets = toArray(targets), child = this._first, isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans\n        children;\n        while(child){\n            if (child instanceof Tween) {\n                if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n                    // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.\n                    a.push(child);\n                }\n            } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n                a.push.apply(a, children);\n            }\n            child = child._next;\n        }\n        return a;\n    } // potential future feature - targets() on timelines\n    ;\n    _proto2.tweenTo = function tweenTo(position, vars) {\n        vars = vars || {};\n        var tl = this, endTime = _parsePosition(tl, position), _vars = vars, startAt = _vars.startAt, _onStart = _vars.onStart, onStartParams = _vars.onStartParams, immediateRender = _vars.immediateRender, initted, tween = Tween.to(tl, _setDefaults({\n            ease: vars.ease || \"none\",\n            lazy: false,\n            immediateRender: false,\n            time: endTime,\n            overwrite: \"auto\",\n            duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n            onStart: function onStart() {\n                tl.pause();\n                if (!initted) {\n                    var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n                    tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n                    initted = 1;\n                }\n                _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.\n            }\n        }, vars));\n        return immediateRender ? tween.render(0) : tween;\n    };\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n        return this.tweenTo(toPosition, _setDefaults({\n            startAt: {\n                time: _parsePosition(this, fromPosition)\n            }\n        }, vars));\n    };\n    _proto2.recent = function recent() {\n        return this._recent;\n    };\n    _proto2.nextLabel = function nextLabel(afterTime) {\n        if (afterTime === void 0) {\n            afterTime = this._time;\n        }\n        return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n        if (beforeTime === void 0) {\n            beforeTime = this._time;\n        }\n        return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n    _proto2.currentLabel = function currentLabel(value) {\n        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n        if (ignoreBeforeTime === void 0) {\n            ignoreBeforeTime = 0;\n        }\n        var child = this._first, labels = this.labels, p;\n        while(child){\n            if (child._start >= ignoreBeforeTime) {\n                child._start += amount;\n                child._end += amount;\n            }\n            child = child._next;\n        }\n        if (adjustLabels) {\n            for(p in labels){\n                if (labels[p] >= ignoreBeforeTime) {\n                    labels[p] += amount;\n                }\n            }\n        }\n        return _uncache(this);\n    };\n    _proto2.invalidate = function invalidate(soft) {\n        var child = this._first;\n        this._lock = 0;\n        while(child){\n            child.invalidate(soft);\n            child = child._next;\n        }\n        return _Animation.prototype.invalidate.call(this, soft);\n    };\n    _proto2.clear = function clear(includeLabels) {\n        if (includeLabels === void 0) {\n            includeLabels = true;\n        }\n        var child = this._first, next;\n        while(child){\n            next = child._next;\n            this.remove(child);\n            child = next;\n        }\n        this._dp && (this._time = this._tTime = this._pTime = 0);\n        includeLabels && (this.labels = {});\n        return _uncache(this);\n    };\n    _proto2.totalDuration = function totalDuration(value) {\n        var max = 0, self = this, child = self._last, prevStart = _bigNum, prev, start, parent;\n        if (arguments.length) {\n            return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n        }\n        if (self._dirty) {\n            parent = self.parent;\n            while(child){\n                prev = child._prev; //record it here in case the tween changes position in the sequence...\n                child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.\n                start = child._start;\n                if (start > prevStart && self._sort && child._ts && !self._lock) {\n                    //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n                    self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().\n                    _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n                } else {\n                    prevStart = start;\n                }\n                if (start < 0 && child._ts) {\n                    //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n                    max -= start;\n                    if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n                        self._start += start / self._ts;\n                        self._time -= start;\n                        self._tTime -= start;\n                    }\n                    self.shiftChildren(-start, false, -Infinity);\n                    prevStart = 0;\n                }\n                child._end > max && child._ts && (max = child._end);\n                child = prev;\n            }\n            _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n            self._dirty = 0;\n        }\n        return self._tDur;\n    };\n    Timeline.updateRoot = function updateRoot(time) {\n        if (_globalTimeline._ts) {\n            _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n            _lastRenderedFrame = _ticker.frame;\n        }\n        if (_ticker.frame >= _nextGCFrame) {\n            _nextGCFrame += _config.autoSleep || 120;\n            var child = _globalTimeline._first;\n            if (!child || !child._ts) {\n                if (_config.autoSleep && _ticker._listeners.length < 2) {\n                    while(child && !child._ts){\n                        child = child._next;\n                    }\n                    child || _ticker.sleep();\n                }\n            }\n        }\n    };\n    return Timeline;\n}(Animation);\n_setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n});\nvar _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter), index = 0, matchIndex = 0, result, startNums, color, endNum, chunk, startNum, hasRandom, a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\"; //ensure values are strings\n    end += \"\";\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n    }\n    if (stringFilter) {\n        a = [\n            start,\n            end\n        ];\n        stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n        start = a[0];\n        end = a[1];\n    }\n    startNums = start.match(_complexStringNumExp) || [];\n    while(result = _complexStringNumExp.exec(end)){\n        endNum = result[0];\n        chunk = end.substring(index, result.index);\n        if (color) {\n            color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\") {\n            color = 1;\n        }\n        if (endNum !== startNums[matchIndex++]) {\n            startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n            pt._pt = {\n                _next: pt._pt,\n                p: chunk || matchIndex === 1 ? chunk : \",\",\n                //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n                s: startNum,\n                c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n                m: color && color < 4 ? Math.round : 0\n            };\n            index = _complexStringNumExp.lastIndex;\n        }\n    }\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n    pt.fp = funcParam;\n    if (_relExp.test(end) || hasRandom) {\n        pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n    }\n    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    return pt;\n}, _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop], parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](), setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc, pt;\n    if (_isString(end)) {\n        if (~end.indexOf(\"random(\")) {\n            end = _replaceRandom(end);\n        }\n        if (end.charAt(1) === \"=\") {\n            pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n            if (pt || pt === 0) {\n                // to avoid isNaN, like if someone passes in a value like \"!= whatever\"\n                end = pt;\n            }\n        }\n    }\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n        if (!isNaN(parsedStart * end) && end !== \"\") {\n            // fun fact: any number multiplied by \"\" is evaluated as the number 0!\n            pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n            funcParam && (pt.fp = funcParam);\n            modifier && pt.modifier(modifier, this, target);\n            return this._pt = pt;\n        }\n        !currentValue && !(prop in target) && _missingPlugin(prop, end);\n        return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n}, //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with \"random()\" in them. It does NOT process relative values.\n_processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n        return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n    var copy = {}, p;\n    for(p in vars){\n        copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n    return copy;\n}, _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n        tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n        if (tween !== _quickTween) {\n            ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.\n            i = plugin._props.length;\n            while(i--){\n                ptLookup[plugin._props[i]] = pt;\n            }\n        }\n    }\n    return plugin;\n}, _overwritingTween, //store a reference temporarily so we can avoid overwriting itself.\n_forceAllPropTweens, _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars, ease = vars.ease, startAt = vars.startAt, immediateRender = vars.immediateRender, lazy = vars.lazy, onUpdate = vars.onUpdate, runBackwards = vars.runBackwards, yoyoEase = vars.yoyoEase, keyframes = vars.keyframes, autoRevert = vars.autoRevert, dur = tween._dur, prevStartAt = tween._startAt, targets = tween._targets, parent = tween.parent, fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets, autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites, tl = tween.timeline, cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n        //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.\n        yoyoEase = tween._yEase;\n        tween._yEase = tween._ease;\n        tween._ease = yoyoEase;\n    }\n    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.\n    if (!tl || keyframes && !vars.stagger) {\n        //if there's an internal timeline, skip all the parsing because we passed that task down the chain.\n        harness = targets[0] ? _getCache(targets[0]).harness : 0;\n        harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an \"x\" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.\n        cleanVars = _copyExcluding(vars, _reservedProps);\n        if (prevStartAt) {\n            prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.\n            time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a \"startAt\" (not \"from()\" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)\n            // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for \"startAt\" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.\n            prevStartAt._lazy = 0;\n        }\n        if (startAt) {\n            _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n                data: \"isStart\",\n                overwrite: false,\n                parent: parent,\n                immediateRender: true,\n                lazy: !prevStartAt && _isNotFalse(lazy),\n                startAt: null,\n                delay: 0,\n                onUpdate: onUpdate && function() {\n                    return _callback(tween, \"onUpdate\");\n                },\n                stagger: 0\n            }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);\n            tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.\n            tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween\n            time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.\n            if (immediateRender) {\n                if (dur && time <= 0 && tTime <= 0) {\n                    // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.\n                    time && (tween._zTime = time);\n                    return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n                }\n            }\n        } else if (runBackwards && dur) {\n            //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n            if (!prevStartAt) {\n                time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n                p = _setDefaults({\n                    overwrite: false,\n                    data: \"isFromStart\",\n                    //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n                    lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),\n                    immediateRender: immediateRender,\n                    //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n                    stagger: 0,\n                    parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(\".class\", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})\n                }, cleanVars);\n                harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})\n                _removeFromParent(tween._startAt = Tween.set(targets, p));\n                tween._startAt._dp = 0; // don't allow it to get put back into root timeline!\n                tween._startAt._sat = tween; // used in globalTime()\n                time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n                tween._zTime = time;\n                if (!immediateRender) {\n                    _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded\n                } else if (!time) {\n                    return;\n                }\n            }\n        }\n        tween._pt = tween._ptCache = 0;\n        lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n        for(i = 0; i < targets.length; i++){\n            target = targets[i];\n            gsData = target._gsap || _harness(targets)[i]._gsap;\n            tween._ptLookup[i] = ptLookup = {};\n            _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n            index = fullTargets === targets ? i : fullTargets.indexOf(target);\n            if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n                tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n                plugin._props.forEach(function(name) {\n                    ptLookup[name] = pt;\n                });\n                plugin.priority && (hasPriority = 1);\n            }\n            if (!harness || harnessVars) {\n                for(p in cleanVars){\n                    if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n                        plugin.priority && (hasPriority = 1);\n                    } else {\n                        ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n                    }\n                }\n            }\n            tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n            if (autoOverwrite && tween._pt) {\n                _overwritingTween = tween;\n                _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!\n                overwritten = !tween.parent;\n                _overwritingTween = 0;\n            }\n            tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n        }\n        hasPriority && _sortPropTweensByPriority(tween);\n        tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.\n    }\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.\n    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the \"before\" state for any staggered/delayed animations thus when the following tween initializes, it'll use the \"before\" state instead of the \"after\" state as the initial values.\n}, _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time, skipRecursion) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property], pt, rootPT, lookup, i;\n    if (!ptCache) {\n        ptCache = tween._ptCache[property] = [];\n        lookup = tween._ptLookup;\n        i = tween._targets.length;\n        while(i--){\n            pt = lookup[i][property];\n            if (pt && pt.d && pt.d._pt) {\n                // it's a plugin, so find the nested PropTween\n                pt = pt.d._pt;\n                while(pt && pt.p !== property && pt.fp !== property){\n                    // \"fp\" is functionParam for things like setting CSS variables which require .setProperty(\"--var-name\", value)\n                    pt = pt._next;\n                }\n            }\n            if (!pt) {\n                // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this\n                // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo(\"x\", 200) for example.\n                _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.\n                tween.vars[property] = \"+=0\";\n                _initTween(tween, time);\n                _forceAllPropTweens = 0;\n                return skipRecursion ? _warn(property + \" not eligible for reset\") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().\n            }\n            ptCache.push(pt);\n        }\n    }\n    i = ptCache.length;\n    while(i--){\n        rootPT = ptCache[i];\n        pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.\n        pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n        pt.c = value - pt.s;\n        rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)\n        rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)\n    }\n}, _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0, propertyAliases = harness && harness.aliases, copy, p, i, aliases;\n    if (!propertyAliases) {\n        return vars;\n    }\n    copy = _merge({}, vars);\n    for(p in propertyAliases){\n        if (p in copy) {\n            aliases = propertyAliases[p].split(\",\");\n            i = aliases.length;\n            while(i--){\n                copy[aliases[i]] = copy[p];\n            }\n        }\n    }\n    return copy;\n}, // parses multiple formats, like {\"0%\": {x: 100}, {\"50%\": {x: -20}} and { x: {\"0%\": 100, \"50%\": -20} }, and an \"ease\" can be set on any object. We populate an \"allProps\" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a \"t\" (time), \"v\", (value), and \"e\" (ease) property. This allows us to piece together a timeline later.\n_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\", p, a;\n    if (_isArray(obj)) {\n        a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease\n        obj.forEach(function(value, i) {\n            return a.push({\n                t: i / (obj.length - 1) * 100,\n                v: value,\n                e: ease\n            });\n        });\n    } else {\n        for(p in obj){\n            a = allProps[p] || (allProps[p] = []);\n            p === \"ease\" || a.push({\n                t: parseFloat(prop),\n                v: obj[p],\n                e: ease\n            });\n        }\n    }\n}, _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n}, _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\", _staggerPropsToSkip = {};\n_forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function(name) {\n    return _staggerPropsToSkip[name] = 1;\n});\n/*\n * --------------------------------------------------------------------------------------\n * TWEEN\n * --------------------------------------------------------------------------------------\n */ var Tween = /*#__PURE__*/ function(_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n    function Tween(targets, vars, position, skipInherit) {\n        var _this3;\n        if (typeof vars === \"number\") {\n            position.duration = vars;\n            vars = position;\n            position = null;\n        }\n        _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n        var _this3$vars = _this3.vars, duration = _this3$vars.duration, delay = _this3$vars.delay, immediateRender = _this3$vars.immediateRender, stagger = _this3$vars.stagger, overwrite = _this3$vars.overwrite, keyframes = _this3$vars.keyframes, defaults = _this3$vars.defaults, scrollTrigger = _this3$vars.scrollTrigger, yoyoEase = _this3$vars.yoyoEase, parent = vars.parent || _globalTimeline, parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [\n            targets\n        ] : toArray(targets), tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;\n        _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://gsap.com\", !_config.nullTargetWarn) || [];\n        _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property\n        _this3._overwrite = overwrite;\n        if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n            vars = _this3.vars;\n            tl = _this3.timeline = new Timeline({\n                data: \"nested\",\n                defaults: defaults || {},\n                targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n            }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.\n            tl.kill();\n            tl.parent = tl._dp = _assertThisInitialized(_this3);\n            tl._start = 0;\n            if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n                l = parsedTargets.length;\n                staggerFunc = stagger && distribute(stagger);\n                if (_isObject(stagger)) {\n                    //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.\n                    for(p in stagger){\n                        if (~_staggerTweenProps.indexOf(p)) {\n                            staggerVarsToMerge || (staggerVarsToMerge = {});\n                            staggerVarsToMerge[p] = stagger[p];\n                        }\n                    }\n                }\n                for(i = 0; i < l; i++){\n                    copy = _copyExcluding(vars, _staggerPropsToSkip);\n                    copy.stagger = 0;\n                    yoyoEase && (copy.yoyoEase = yoyoEase);\n                    staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n                    curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.\n                    copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n                    copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n                    if (!stagger && l === 1 && copy.delay) {\n                        // if someone does delay:\"random(1, 5)\", repeat:-1, for example, the delay shouldn't be inside the repeat.\n                        _this3._delay = delay = copy.delay;\n                        _this3._start += delay;\n                        copy.delay = 0;\n                    }\n                    tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n                    tl._ease = _easeMap.none;\n                }\n                tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!\n            } else if (keyframes) {\n                _inheritDefaults(_setDefaults(tl.vars.defaults, {\n                    ease: \"none\"\n                }));\n                tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n                var time = 0, a, kf, v;\n                if (_isArray(keyframes)) {\n                    keyframes.forEach(function(frame) {\n                        return tl.to(parsedTargets, frame, \">\");\n                    });\n                    tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.\n                } else {\n                    copy = {};\n                    for(p in keyframes){\n                        p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n                    }\n                    for(p in copy){\n                        a = copy[p].sort(function(a, b) {\n                            return a.t - b.t;\n                        });\n                        time = 0;\n                        for(i = 0; i < a.length; i++){\n                            kf = a[i];\n                            v = {\n                                ease: kf.e,\n                                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                            };\n                            v[p] = kf.v;\n                            tl.to(parsedTargets, v, time);\n                            time += v.duration;\n                        }\n                    }\n                    tl.duration() < duration && tl.to({}, {\n                        duration: duration - tl.duration()\n                    }); // in case keyframes didn't go to 100%\n                }\n            }\n            duration || _this3.duration(duration = tl.duration());\n        } else {\n            _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)\n        }\n        if (overwrite === true && !_suppressOverwrites) {\n            _overwritingTween = _assertThisInitialized(_this3);\n            _globalTimeline.killTweensOf(parsedTargets);\n            _overwritingTween = 0;\n        }\n        _addToTimeline(parent, _assertThisInitialized(_this3), position);\n        vars.reversed && _this3.reverse();\n        vars.paused && _this3.paused(true);\n        if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n            _this3._tTime = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n            _this3.render(Math.max(0, -delay) || 0); //in case delay is negative\n        }\n        scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n        return _this3;\n    }\n    var _proto3 = Tween.prototype;\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n        var prevTime = this._time, tDur = this._tDur, dur = this._dur, isNegative = totalTime < 0, tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime, time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;\n        if (!dur) {\n            _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n        } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative || this._lazy) {\n            // this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)\n            time = tTime;\n            timeline = this.timeline;\n            if (this._repeat) {\n                //adjust the time for repeats and yoyos\n                cycleDuration = dur + this._rDelay;\n                if (this._repeat < -1 && isNegative) {\n                    return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                }\n                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n                if (tTime === tDur) {\n                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n                    iteration = this._repeat;\n                    time = dur;\n                } else {\n                    prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)\n                    iteration = ~~prevIteration;\n                    if (iteration && iteration === prevIteration) {\n                        time = dur;\n                        iteration--;\n                    } else if (time > dur) {\n                        time = dur;\n                    }\n                }\n                isYoyo = this._yoyo && iteration & 1;\n                if (isYoyo) {\n                    yoyoEase = this._yEase;\n                    time = dur - time;\n                }\n                prevIteration = _animationCycle(this._tTime, cycleDuration);\n                if (time === prevTime && !force && this._initted && iteration === prevIteration) {\n                    //could be during the repeatDelay part. No need to render and fire callbacks.\n                    this._tTime = tTime;\n                    return this;\n                }\n                if (iteration !== prevIteration) {\n                    timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality\n                    if (this.vars.repeatRefresh && !isYoyo && !this._lock && time !== cycleDuration && this._initted) {\n                        // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).\n                        this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.\n                        this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n                    }\n                }\n            }\n            if (!this._initted) {\n                if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n                    this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.\n                    return this;\n                }\n                if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) {\n                    // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!\n                    return this;\n                }\n                if (dur !== this._dur) {\n                    // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.\n                    return this.render(totalTime, suppressEvents, force);\n                }\n            }\n            this._tTime = tTime;\n            this._time = time;\n            if (!this._act && this._ts) {\n                this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n                this._lazy = 0;\n            }\n            this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n            if (this._from) {\n                this.ratio = ratio = 1 - ratio;\n            }\n            if (time && !prevTime && !suppressEvents && !iteration) {\n                _callback(this, \"onStart\");\n                if (this._tTime !== tTime) {\n                    // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.\n                    return this;\n                }\n            }\n            pt = this._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n            timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n            if (this._onUpdate && !suppressEvents) {\n                isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n                _callback(this, \"onUpdate\");\n            }\n            this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n                isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n                (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n                if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n                    // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();\n                    _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n                    this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                }\n            }\n        }\n        return this;\n    };\n    _proto3.targets = function targets() {\n        return this._targets;\n    };\n    _proto3.invalidate = function invalidate(soft) {\n        // \"soft\" gives us a way to clear out everything EXCEPT the recorded pre-\"from\" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the \"from\" values would persist and then on the next render, the from() tweens would initialize and the current value would match the \"from\" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.\n        (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n        this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n        this._ptLookup = [];\n        this.timeline && this.timeline.invalidate(soft);\n        return _Animation2.prototype.invalidate.call(this, soft);\n    };\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative, skipRecursion) {\n        _tickerActive || _ticker.wake();\n        this._ts || this.play();\n        var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts), ratio;\n        this._initted || _initTween(this, time);\n        ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.\n        // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.\n        // if (_isObject(property)) { // performance optimization\n        // \tfor (p in property) {\n        // \t\tif (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {\n        // \t\t\treturn this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.\n        // \t\t}\n        // \t}\n        // } else {\n        if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {\n            return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.\n        } //}\n        _alignPlayhead(this, 0);\n        this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n        return this.render(0);\n    };\n    _proto3.kill = function kill(targets, vars) {\n        if (vars === void 0) {\n            vars = \"all\";\n        }\n        if (!targets && (!vars || vars === \"all\")) {\n            this._lazy = this._pt = 0;\n            this.parent ? _interrupt(this) : this.scrollTrigger && this.scrollTrigger.kill(!!_reverting);\n            return this;\n        }\n        if (this.timeline) {\n            var tDur = this.timeline.totalDuration();\n            this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.\n            this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.\n            return this;\n        }\n        var parsedTargets = this._targets, killingTargets = targets ? toArray(targets) : parsedTargets, propTweenLookup = this._ptLookup, firstPT = this._pt, overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;\n        if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n            vars === \"all\" && (this._pt = 0);\n            return _interrupt(this);\n        }\n        overwrittenProps = this._op = this._op || [];\n        if (vars !== \"all\") {\n            //so people can pass in a comma-delimited list of property names\n            if (_isString(vars)) {\n                p = {};\n                _forEachName(vars, function(name) {\n                    return p[name] = 1;\n                });\n                vars = p;\n            }\n            vars = _addAliasesToVars(parsedTargets, vars);\n        }\n        i = parsedTargets.length;\n        while(i--){\n            if (~killingTargets.indexOf(parsedTargets[i])) {\n                curLookup = propTweenLookup[i];\n                if (vars === \"all\") {\n                    overwrittenProps[i] = vars;\n                    props = curLookup;\n                    curOverwriteProps = {};\n                } else {\n                    curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n                    props = vars;\n                }\n                for(p in props){\n                    pt = curLookup && curLookup[p];\n                    if (pt) {\n                        if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                            _removeLinkedListItem(this, pt, \"_pt\");\n                        }\n                        delete curLookup[p];\n                    }\n                    if (curOverwriteProps !== \"all\") {\n                        curOverwriteProps[p] = 1;\n                    }\n                }\n            }\n        }\n        this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n        return this;\n    };\n    Tween.to = function to(targets, vars) {\n        return new Tween(targets, vars, arguments[2]);\n    };\n    Tween.from = function from(targets, vars) {\n        return _createTweenType(1, arguments);\n    };\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n        return new Tween(callback, 0, {\n            immediateRender: false,\n            lazy: false,\n            overwrite: false,\n            delay: delay,\n            onComplete: callback,\n            onReverseComplete: callback,\n            onCompleteParams: params,\n            onReverseCompleteParams: params,\n            callbackScope: scope\n        }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)\n    };\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n        return _createTweenType(2, arguments);\n    };\n    Tween.set = function set(targets, vars) {\n        vars.duration = 0;\n        vars.repeatDelay || (vars.repeat = 0);\n        return new Tween(targets, vars);\n    };\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n        return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n    return Tween;\n}(Animation);\n_setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)\n// _forEachName(\"to,from,fromTo,set,call,add,addLabel,addPause\", name => {\n// \tTween.prototype[name] = function() {\n// \t\tlet tl = new Timeline();\n// \t\treturn _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));\n// \t}\n// });\n//for backward compatibility. Leverage the timeline calls.\n_forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function(name) {\n    Tween[name] = function() {\n        var tl = new Timeline(), params = _slice.call(arguments, 0);\n        params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n        return tl[name].apply(tl, params);\n    };\n});\n/*\n * --------------------------------------------------------------------------------------\n * PROPTWEEN\n * --------------------------------------------------------------------------------------\n */ var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n}, _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n}, _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n}, _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n}, _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n}, _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n}, _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n}, _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt, s = \"\";\n    if (!ratio && data.b) {\n        //b = beginning string\n        s = data.b;\n    } else if (ratio === 1 && data.e) {\n        //e = ending string\n        s = data.e;\n    } else {\n        while(pt){\n            s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the \"p\" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.\n            pt = pt._next;\n        }\n        s += data.c; //we use the \"c\" of the PropTween to store the final chunk of non-numeric text.\n    }\n    data.set(data.t, data.p, s, data);\n}, _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n    while(pt){\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n    }\n}, _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt, next;\n    while(pt){\n        next = pt._next;\n        pt.p === property && pt.modifier(modifier, tween, target);\n        pt = next;\n    }\n}, _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt, hasNonDependentRemaining, next;\n    while(pt){\n        next = pt._next;\n        if (pt.p === property && !pt.op || pt.op === property) {\n            _removeLinkedListItem(this, pt, \"_pt\");\n        } else if (!pt.dep) {\n            hasNonDependentRemaining = 1;\n        }\n        pt = next;\n    }\n    return !hasNonDependentRemaining;\n}, _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n}, _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt, next, pt2, first, last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)\n    while(pt){\n        next = pt._next;\n        pt2 = first;\n        while(pt2 && pt2.pr > pt.pr){\n            pt2 = pt2._next;\n        }\n        if (pt._prev = pt2 ? pt2._prev : last) {\n            pt._prev._next = pt;\n        } else {\n            first = pt;\n        }\n        if (pt._next = pt2) {\n            pt2._prev = pt;\n        } else {\n            last = pt;\n        }\n        pt = next;\n    }\n    parent._pt = first;\n}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)\nvar PropTween = /*#__PURE__*/ function() {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n        this.t = target;\n        this.s = start;\n        this.c = change;\n        this.p = prop;\n        this.r = renderer || _renderPlain;\n        this.d = data || this;\n        this.set = setter || _setterPlain;\n        this.pr = priority || 0;\n        this._next = next;\n        if (next) {\n            next._prev = this;\n        }\n    }\n    var _proto4 = PropTween.prototype;\n    _proto4.modifier = function modifier(func, tween, target) {\n        this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)\n        this.set = _setterWithModifier;\n        this.m = func;\n        this.mt = target; //modifier target\n        this.tween = tween;\n    };\n    return PropTween;\n}(); //Initialization tasks\n_forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function(name) {\n    return _reservedProps[name] = 1;\n});\n_globals.TweenMax = _globals.TweenLite = Tween;\n_globals.TimelineLite = _globals.TimelineMax = Timeline;\n_globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n});\n_config.stringFilter = _colorStringFilter;\nvar _media = [], _listeners = {}, _emptyArray = [], _lastMediaTime = 0, _contextID = 0, _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function(f) {\n        return f();\n    });\n}, _onMediaChange = function _onMediaChange() {\n    var time = Date.now(), matches = [];\n    if (time - _lastMediaTime > 2) {\n        _dispatch(\"matchMediaInit\");\n        _media.forEach(function(c) {\n            var queries = c.queries, conditions = c.conditions, match, p, anyMatch, toggled;\n            for(p in queries){\n                match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the \"matches\" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.\n                match && (anyMatch = 1);\n                if (match !== conditions[p]) {\n                    conditions[p] = match;\n                    toggled = 1;\n                }\n            }\n            if (toggled) {\n                c.revert();\n                anyMatch && matches.push(c);\n            }\n        });\n        _dispatch(\"matchMediaRevert\");\n        matches.forEach(function(c) {\n            return c.onMatch(c, function(func) {\n                return c.add(null, func);\n            });\n        });\n        _lastMediaTime = time;\n        _dispatch(\"matchMedia\");\n    }\n};\nvar Context = /*#__PURE__*/ function() {\n    function Context(func, scope) {\n        this.selector = scope && selector(scope);\n        this.data = [];\n        this._r = []; // returned/cleanup functions\n        this.isReverted = false;\n        this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because \"this\" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely\n        func && this.add(func);\n    }\n    var _proto5 = Context.prototype;\n    _proto5.add = function add(name, func, scope) {\n        // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.\n        // if (name && _isFunction(name.revert)) {\n        // \tthis.data.push(name);\n        // \treturn (name._ctx = this);\n        // }\n        if (_isFunction(name)) {\n            scope = func;\n            func = name;\n            name = _isFunction;\n        }\n        var self = this, f = function f() {\n            var prev = _context, prevSelector = self.selector, result;\n            prev && prev !== self && prev.data.push(self);\n            scope && (self.selector = selector(scope));\n            _context = self;\n            result = func.apply(self, arguments);\n            _isFunction(result) && self._r.push(result);\n            _context = prev;\n            self.selector = prevSelector;\n            self.isReverted = false;\n            return result;\n        };\n        self.last = f;\n        return name === _isFunction ? f(self, function(func) {\n            return self.add(null, func);\n        }) : name ? self[name] = f : f;\n    };\n    _proto5.ignore = function ignore(func) {\n        var prev = _context;\n        _context = null;\n        func(this);\n        _context = prev;\n    };\n    _proto5.getTweens = function getTweens() {\n        var a = [];\n        this.data.forEach(function(e) {\n            return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n        });\n        return a;\n    };\n    _proto5.clear = function clear() {\n        this._r.length = this.data.length = 0;\n    };\n    _proto5.kill = function kill(revert, matchMedia) {\n        var _this4 = this;\n        if (revert) {\n            (function() {\n                var tweens = _this4.getTweens(), i = _this4.data.length, t;\n                while(i--){\n                    // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.\n                    t = _this4.data[i];\n                    if (t.data === \"isFlip\") {\n                        t.revert();\n                        t.getChildren(true, true, false).forEach(function(tween) {\n                            return tweens.splice(tweens.indexOf(tween), 1);\n                        });\n                    }\n                } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort\n                tweens.map(function(t) {\n                    return {\n                        g: t._dur || t._delay || t._sat && !t._sat.vars.immediateRender ? t.globalTime(0) : -Infinity,\n                        t: t\n                    };\n                }).sort(function(a, b) {\n                    return b.g - a.g || -Infinity;\n                }).forEach(function(o) {\n                    return o.t.revert(revert);\n                }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the \" || -1\" in the sort keeps the order properly.\n                i = _this4.data.length;\n                while(i--){\n                    // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first\n                    t = _this4.data[i];\n                    if (t instanceof Timeline) {\n                        if (t.data !== \"nested\") {\n                            t.scrollTrigger && t.scrollTrigger.revert();\n                            t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens\n                        }\n                    } else {\n                        !(t instanceof Tween) && t.revert && t.revert(revert);\n                    }\n                }\n                _this4._r.forEach(function(f) {\n                    return f(revert, _this4);\n                });\n                _this4.isReverted = true;\n            })();\n        } else {\n            this.data.forEach(function(e) {\n                return e.kill && e.kill();\n            });\n        }\n        this.clear();\n        if (matchMedia) {\n            var i = _media.length;\n            while(i--){\n                // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.\n                _media[i].id === this.id && _media.splice(i, 1);\n            }\n        }\n    } // killWithCleanup() {\n    ;\n    _proto5.revert = function revert(config) {\n        this.kill(config || {});\n    };\n    return Context;\n}();\nvar MatchMedia = /*#__PURE__*/ function() {\n    function MatchMedia(scope) {\n        this.contexts = [];\n        this.scope = scope;\n        _context && _context.data.push(this);\n    }\n    var _proto6 = MatchMedia.prototype;\n    _proto6.add = function add(conditions, func, scope) {\n        _isObject(conditions) || (conditions = {\n            matches: conditions\n        });\n        var context = new Context(0, scope || this.scope), cond = context.conditions = {}, mq, p, active;\n        _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()\n        this.contexts.push(context);\n        func = context.add(\"onMatch\", func);\n        context.queries = conditions;\n        for(p in conditions){\n            if (p === \"all\") {\n                active = 1;\n            } else {\n                mq = _win.matchMedia(conditions[p]);\n                if (mq) {\n                    _media.indexOf(context) < 0 && _media.push(context);\n                    (cond[p] = mq.matches) && (active = 1);\n                    mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n                }\n            }\n        }\n        active && func(context, function(f) {\n            return context.add(null, f);\n        });\n        return this;\n    } // refresh() {\n    ;\n    _proto6.revert = function revert(config) {\n        this.kill(config || {});\n    };\n    _proto6.kill = function kill(revert) {\n        this.contexts.forEach(function(c) {\n            return c.kill(revert, true);\n        });\n    };\n    return MatchMedia;\n}();\n/*\n * --------------------------------------------------------------------------------------\n * GSAP\n * --------------------------------------------------------------------------------------\n */ var _gsap = {\n    registerPlugin: function registerPlugin() {\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        args.forEach(function(config) {\n            return _createPlugin(config);\n        });\n    },\n    timeline: function timeline(vars) {\n        return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n        return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n        _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in\n        var getter = _getCache(target || {}).get, format = unit ? _passThrough : _numericIfPossible;\n        unit === \"native\" && (unit = \"\");\n        return !target ? target : !property ? function(property, unit, uncache) {\n            return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n        } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n        target = toArray(target);\n        if (target.length > 1) {\n            var setters = target.map(function(t) {\n                return gsap.quickSetter(t, property, unit);\n            }), l = setters.length;\n            return function(value) {\n                var i = l;\n                while(i--){\n                    setters[i](value);\n                }\n            };\n        }\n        target = target[0] || {};\n        var Plugin = _plugins[property], cache = _getCache(target), p = cache.harness && (cache.harness.aliases || {})[property] || property, // in case it's an alias, like \"rotate\" for \"rotation\".\n        setter = Plugin ? function(value) {\n            var p = new Plugin();\n            _quickTween._pt = 0;\n            p.init(target, unit ? value + unit : value, _quickTween, 0, [\n                target\n            ]);\n            p.render(1, p);\n            _quickTween._pt && _renderPropTweens(1, _quickTween);\n        } : cache.set(target, p);\n        return Plugin ? setter : function(value) {\n            return setter(target, p, unit ? value + unit : value, cache, 1);\n        };\n    },\n    quickTo: function quickTo(target, property, vars) {\n        var _setDefaults2;\n        var tween = gsap.to(target, _setDefaults((_setDefaults2 = {}, _setDefaults2[property] = \"+=0.1\", _setDefaults2.paused = true, _setDefaults2.stagger = 0, _setDefaults2), vars || {})), func = function func(value, start, startIsRelative) {\n            return tween.resetTo(property, value, start, startIsRelative);\n        };\n        func.tween = tween;\n        return func;\n    },\n    isTweening: function isTweening(targets) {\n        return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n        value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n        return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n        return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n        var name = _ref3.name, effect = _ref3.effect, plugins = _ref3.plugins, defaults = _ref3.defaults, extendTimeline = _ref3.extendTimeline;\n        (plugins || \"\").split(\",\").forEach(function(pluginName) {\n            return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n        });\n        _effects[name] = function(targets, vars, tl) {\n            return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n        };\n        if (extendTimeline) {\n            Timeline.prototype[name] = function(targets, vars, position) {\n                return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n            };\n        }\n    },\n    registerEase: function registerEase(name, ease) {\n        _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n        return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n        return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n        if (vars === void 0) {\n            vars = {};\n        }\n        var tl = new Timeline(vars), child, next;\n        tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n        _globalTimeline.remove(tl);\n        tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).\n        tl._time = tl._tTime = _globalTimeline._time;\n        child = _globalTimeline._first;\n        while(child){\n            next = child._next;\n            if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n                _addToTimeline(tl, child, child._start - child._delay);\n            }\n            child = next;\n        }\n        _addToTimeline(_globalTimeline, tl, 0);\n        return tl;\n    },\n    context: function context(func, scope) {\n        return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n        return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n        return _media.forEach(function(c) {\n            var cond = c.conditions, found, p;\n            for(p in cond){\n                if (cond[p]) {\n                    cond[p] = false;\n                    found = 1;\n                }\n            }\n            found && c.revert();\n        }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n        var a = _listeners[type] || (_listeners[type] = []);\n        ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n        var a = _listeners[type], i = a && a.indexOf(callback);\n        i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n        wrap: wrap,\n        wrapYoyo: wrapYoyo,\n        distribute: distribute,\n        random: random,\n        snap: snap,\n        normalize: normalize,\n        getUnit: getUnit,\n        clamp: clamp,\n        splitColor: splitColor,\n        toArray: toArray,\n        selector: selector,\n        mapRange: mapRange,\n        pipe: pipe,\n        unitize: unitize,\n        interpolate: interpolate,\n        shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n        PropTween: PropTween,\n        globals: _addGlobal,\n        Tween: Tween,\n        Timeline: Timeline,\n        Animation: Animation,\n        getCache: _getCache,\n        _removeLinkedListItem: _removeLinkedListItem,\n        reverting: function reverting() {\n            return _reverting;\n        },\n        context: function context(toAdd) {\n            if (toAdd && _context) {\n                _context.data.push(toAdd);\n                toAdd._ctx = _context;\n            }\n            return _context;\n        },\n        suppressOverwrites: function suppressOverwrites(value) {\n            return _suppressOverwrites = value;\n        }\n    }\n};\n_forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function(name) {\n    return _gsap[name] = Tween[name];\n});\n_ticker.add(Timeline.updateRoot);\n_quickTween = _gsap.to({}, {\n    duration: 0\n}); // ---- EXTRA PLUGINS --------------------------------------------------------\nvar _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n    while(pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop){\n        pt = pt._next;\n    }\n    return pt;\n}, _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets, p, i, pt;\n    for(p in modifiers){\n        i = targets.length;\n        while(i--){\n            pt = tween._ptLookup[i][p];\n            if (pt && (pt = pt.d)) {\n                if (pt._pt) {\n                    // is a plugin\n                    pt = _getPluginPropTween(pt, p);\n                }\n                pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n            }\n        }\n    }\n}, _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n        name: name,\n        rawVars: 1,\n        //don't pre-process function-based values or \"random()\" strings.\n        init: function init(target, vars, tween) {\n            tween._onInit = function(tween) {\n                var temp, p;\n                if (_isString(vars)) {\n                    temp = {};\n                    _forEachName(vars, function(name) {\n                        return temp[name] = 1;\n                    }); //if the user passes in a comma-delimited list of property names to roundProps, like \"x,y\", we round to whole numbers.\n                    vars = temp;\n                }\n                if (modifier) {\n                    temp = {};\n                    for(p in vars){\n                        temp[p] = modifier(vars[p]);\n                    }\n                    vars = temp;\n                }\n                _addModifiers(tween, vars);\n            };\n        }\n    };\n}; //register core plugins\nvar gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n        var p, pt, v;\n        this.tween = tween;\n        for(p in vars){\n            v = target.getAttribute(p) || \"\";\n            pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n            pt.op = p;\n            pt.b = v; // record the beginning value so we can revert()\n            this._props.push(p);\n        }\n    },\n    render: function render(ratio, data) {\n        var pt = data._pt;\n        while(pt){\n            _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)\n            pt = pt._next;\n        }\n    }\n}, {\n    name: \"endArray\",\n    init: function init(target, value) {\n        var i = value.length;\n        while(i--){\n            this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n        }\n    }\n}, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.\nTween.version = Timeline.version = gsap.version = \"3.12.7\";\n_coreReady = 1;\n_windowExists() && _wake();\nvar Power0 = _easeMap.Power0, Power1 = _easeMap.Power1, Power2 = _easeMap.Power2, Power3 = _easeMap.Power3, Power4 = _easeMap.Power4, Linear = _easeMap.Linear, Quad = _easeMap.Quad, Cubic = _easeMap.Cubic, Quart = _easeMap.Quart, Quint = _easeMap.Quint, Strong = _easeMap.Strong, Elastic = _easeMap.Elastic, Back = _easeMap.Back, SteppedEase = _easeMap.SteppedEase, Bounce = _easeMap.Bounce, Sine = _easeMap.Sine, Expo = _easeMap.Expo, Circ = _easeMap.Circ;\n\n //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsdUJBQXVCQyxJQUFJO0lBQUksSUFBSUEsU0FBUyxLQUFLLEdBQUc7UUFBRSxNQUFNLElBQUlDLGVBQWU7SUFBOEQ7SUFBRSxPQUFPRDtBQUFNO0FBRXJLLFNBQVNFLGVBQWVDLFFBQVEsRUFBRUMsVUFBVTtJQUFJRCxTQUFTRSxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ0gsV0FBV0MsU0FBUztJQUFHRixTQUFTRSxTQUFTLENBQUNHLFdBQVcsR0FBR0w7SUFBVUEsU0FBU00sU0FBUyxHQUFHTDtBQUFZO0FBRXRMOzs7Ozs7OztBQVFBLEdBRUEsa0JBQWtCLEdBQ2xCLElBQUlNLFVBQVU7SUFDWkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLGdCQUFnQjtJQUNoQkMsT0FBTztRQUNMQyxZQUFZO0lBQ2Q7QUFDRixHQUNJQyxZQUFZO0lBQ2RDLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxPQUFPO0FBQ1QsR0FDSUMscUJBQ0FDLFlBQ0FDLFVBQ0FDLFVBQVUsS0FDVkMsV0FBVyxJQUFJRCxTQUNmRSxPQUFPQyxLQUFLQyxFQUFFLEdBQUcsR0FDakJDLFdBQVdILE9BQU8sR0FDbEJJLFFBQVEsR0FDUkMsUUFBUUosS0FBS0ssSUFBSSxFQUNqQkMsT0FBT04sS0FBS08sR0FBRyxFQUNmQyxPQUFPUixLQUFLUyxHQUFHLEVBQ2ZDLFlBQVksU0FBU0EsVUFBVUMsS0FBSztJQUN0QyxPQUFPLE9BQU9BLFVBQVU7QUFDMUIsR0FDSUMsY0FBYyxTQUFTQSxZQUFZRCxLQUFLO0lBQzFDLE9BQU8sT0FBT0EsVUFBVTtBQUMxQixHQUNJRSxZQUFZLFNBQVNBLFVBQVVGLEtBQUs7SUFDdEMsT0FBTyxPQUFPQSxVQUFVO0FBQzFCLEdBQ0lHLGVB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TyxFQUMxQkMsT0FBT3hVLFNBQVN3VSxJQUFJLEVBQ3BCNVIsY0FBYzVDLFNBQVM0QyxXQUFXLEVBQ2xDNlIsU0FBU3pVLFNBQVN5VSxNQUFNLEVBQ3hCQyxPQUFPMVUsU0FBUzBVLElBQUksRUFDcEJDLE9BQU8zVSxTQUFTMlUsSUFBSSxFQUNwQkMsT0FBTzVVLFNBQVM0VSxJQUFJO0FBQzJIO0FBQ3FILENBQUMsMElBQTBJO0FBRW5EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdzRjLWFkbWluLXBhbmVsLy4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzPzcyOGUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMi43XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnTm9LaWxsID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWVcbn0sXG4gICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgIF9sYXp5TG9va3VwID0ge30sXG4gICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgIF9wbHVnaW5zID0ge30sXG4gICAgX2VmZmVjdHMgPSB7fSxcbiAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICBfY2FsbGJhY2tOYW1lcyA9IFwiXCIsXG4gICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgaGFybmVzc1BsdWdpbixcbiAgICAgIGk7XG4gIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gIGlmICghKGhhcm5lc3NQbHVnaW4gPSAodGFyZ2V0Ll9nc2FwIHx8IHt9KS5oYXJuZXNzKSkge1xuICAgIC8vIGZpbmQgdGhlIGZpcnN0IHRhcmdldCB3aXRoIGEgaGFybmVzcy4gV2UgYXNzdW1lIHRhcmdldHMgcGFzc2VkIGludG8gYW4gYW5pbWF0aW9uIHdpbGwgYmUgb2Ygc2ltaWxhciB0eXBlLCBtZWFuaW5nIHRoZSBzYW1lIGtpbmQgb2YgaGFybmVzcyBjYW4gYmUgdXNlZCBmb3IgdGhlbSBhbGwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfcm91bmRQcmVjaXNlID0gZnVuY3Rpb24gX3JvdW5kUHJlY2lzZSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMDAwKSAvIDEwMDAwMDAwIHx8IDA7XG59LFxuICAgIC8vIGluY3JlYXNlZCBwcmVjaXNpb24gbW9zdGx5IGZvciB0aW1pbmcgdmFsdWVzLlxuX3BhcnNlUmVsYXRpdmUgPSBmdW5jdGlvbiBfcGFyc2VSZWxhdGl2ZShzdGFydCwgdmFsdWUpIHtcbiAgdmFyIG9wZXJhdG9yID0gdmFsdWUuY2hhckF0KDApLFxuICAgICAgZW5kID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpO1xuICBzdGFydCA9IHBhcnNlRmxvYXQoc3RhcnQpO1xuICByZXR1cm4gb3BlcmF0b3IgPT09IFwiK1wiID8gc3RhcnQgKyBlbmQgOiBvcGVyYXRvciA9PT0gXCItXCIgPyBzdGFydCAtIGVuZCA6IG9wZXJhdG9yID09PSBcIipcIiA/IHN0YXJ0ICogZW5kIDogc3RhcnQgLyBlbmQ7XG59LFxuICAgIF9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAvL3NlYXJjaGVzIG9uZSBhcnJheSB0byBmaW5kIG1hdGNoZXMgZm9yIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHRvRmluZCBhcnJheS4gQXMgc29vbiBhcyBvbmUgaXMgZm91bmQsIGl0IHJldHVybnMgdHJ1ZS4gSXQgZG9lcyBOT1QgcmV0dXJuIGFsbCB0aGUgbWF0Y2hlczsgaXQncyBzaW1wbHkgYSBib29sZWFuIHNlYXJjaC5cbiAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IHRvU2VhcmNoLmluZGV4T2YodG9GaW5kW2ldKSA8IDAgJiYgKytpIDwgbDspIHt9XG5cbiAgcmV0dXJuIGkgPCBsO1xufSxcbiAgICBfbGF6eVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5UmVuZGVyKCkge1xuICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgIGksXG4gICAgICB0d2VlbjtcblxuICBfbGF6eUxvb2t1cCA9IHt9O1xuICBfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB0d2VlbiA9IGFbaV07XG4gICAgdHdlZW4gJiYgdHdlZW4uX2xhenkgJiYgKHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpLl9sYXp5ID0gMCk7XG4gIH1cbn0sXG4gICAgX2xhenlTYWZlUmVuZGVyID0gZnVuY3Rpb24gX2xhenlTYWZlUmVuZGVyKGFuaW1hdGlvbiwgdGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpO1xuICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIHRpbWUgPCAwICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgYW5pbWF0aW9uLl9zdGFydEF0KSk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICBjaGlsZC5fYWN0ID0gMDtcbn0sXG4gICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gIGlmIChhbmltYXRpb24gJiYgKCFjaGlsZCB8fCBjaGlsZC5fZW5kID4gYW5pbWF0aW9uLl9kdXIgfHwgY2hpbGQuX3N0YXJ0IDwgMCkpIHtcbiAgICAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGlmIGEgY2hpbGQgYW5pbWF0aW9uIGlzIHBhc3NlZCBpbiB3ZSBzaG91bGQgb25seSB1bmNhY2hlIGlmIHRoYXQgY2hpbGQgRVhURU5EUyB0aGUgYW5pbWF0aW9uIChpdHMgZW5kIHRpbWUgaXMgYmV5b25kIHRoZSBlbmQpXG4gICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICB3aGlsZSAoYSkge1xuICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgYSA9IGEucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgIC8vc29tZXRpbWVzIHdlIG11c3QgZm9yY2UgYSByZS1zb3J0IG9mIGFsbCBjaGlsZHJlbiBhbmQgdXBkYXRlIHRoZSBkdXJhdGlvbi90b3RhbER1cmF0aW9uIG9mIGFsbCBhbmNlc3RvciB0aW1lbGluZXMgaW1tZWRpYXRlbHkgaW4gY2FzZSwgZm9yIGV4YW1wbGUsIGluIHRoZSBtaWRkbGUgb2YgYSByZW5kZXIgbG9vcCwgb25lIHR3ZWVuIGFsdGVycyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIHdoaWNoIHNob3ZlcyBpdHMgc3RhcnRUaW1lIGJlZm9yZSAwLCBmb3JjaW5nIHRoZSBwYXJlbnQgdGltZWxpbmUgdG8gc2hpZnQgYXJvdW5kIGFuZCBzaGlmdENoaWxkcmVuKCkgd2hpY2ggY291bGQgYWZmZWN0IHRoYXQgbmV4dCB0d2VlbidzIHJlbmRlciAoc3RhcnRUaW1lKS4gRG9lc24ndCBtYXR0ZXIgZm9yIHRoZSByb290IHRpbWVsaW5lIHRob3VnaC5cbiAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICBwYXJlbnQudG90YWxEdXJhdGlvbigpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICByZXR1cm4gdHdlZW4uX3N0YXJ0QXQgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi52YXJzLmltbWVkaWF0ZVJlbmRlciAmJiAhdHdlZW4udmFycy5hdXRvUmV2ZXJ0IHx8IHR3ZWVuLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKSk7XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pKTtcbiAgcmV0dXJuIHRUaW1lICYmIHdob2xlID09PSB0VGltZSA/IHdob2xlIC0gMSA6IHdob2xlO1xufSxcbiAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gIHJldHVybiAocGFyZW50VGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgKyAoY2hpbGQuX3RzID49IDAgPyAwIDogY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpO1xufSxcbiAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fZW5kID0gX3JvdW5kUHJlY2lzZShhbmltYXRpb24uX3N0YXJ0ICsgKGFuaW1hdGlvbi5fdER1ciAvIE1hdGguYWJzKGFuaW1hdGlvbi5fdHMgfHwgYW5pbWF0aW9uLl9ydHMgfHwgX3RpbnlOdW0pIHx8IDApKTtcbn0sXG4gICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAvLyBhZGp1c3RzIHRoZSBhbmltYXRpb24ncyBfc3RhcnQgYW5kIF9lbmQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCB0b3RhbFRpbWUgKG9ubHkgaWYgdGhlIHBhcmVudCdzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUgYW5kIHRoZSBhbmltYXRpb24gaXNuJ3QgcGF1c2VkKS4gSXQgZG9lc24ndCBkbyBhbnkgcmVuZGVyaW5nIG9yIGZvcmNpbmcgdGhpbmdzIGJhY2sgaW50byBwYXJlbnQgdGltZWxpbmVzLCBldGMuIC0gdGhhdCdzIHdoYXQgdG90YWxUaW1lKCkgaXMgZm9yLlxuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLl9kcDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8ICFjaGlsZC5fZHVyICYmIGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydCA8IHRpbWVsaW5lLl90aW1lICYmIChjaGlsZC5fZHVyIHx8ICFjaGlsZC5hZGQpKSB7XG4gICAgLy8gaW4gY2FzZSwgZm9yIGV4YW1wbGUsIHRoZSBfc3RhcnQgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLCBvciBpZiBpdCdzIGJlaW5nIGluc2VydGVkIGludG8gYSB0aW1lbGluZSBCRUZPUkUgd2hlcmUgdGhlIHBsYXloZWFkIGlzIGN1cnJlbnRseS4gSW1hZ2luZSBpdCdzIGF0IGl0cyBlbmQgc3RhdGUsIHRoZW4gdGhlIHN0YXJ0VGltZSBpcyBtb3ZlZCBXQVkgbGF0ZXIgKGFmdGVyIHRoZSBlbmQgb2YgdGhpcyB0aW1lbGluZSksIGl0IHNob3VsZCByZW5kZXIgYXQgaXRzIGJlZ2lubmluZy4gU3BlY2lhbCBjYXNlOiBpZiBpdCdzIGEgdGltZWxpbmUgKGhhcyAuYWRkKCkgbWV0aG9kKSBhbmQgbm8gZHVyYXRpb24sIHdlIGNhbiBza2lwIHJlbmRlcmluZyBiZWNhdXNlIHRoZSB1c2VyIG1heSBiZSBwb3B1bGF0aW5nIGl0IEFGVEVSIGFkZGluZyBpdCB0byBhIHBhcmVudCB0aW1lbGluZSAodW5jb252ZW50aW9uYWwsIGJ1dCBwb3NzaWJsZSwgYW5kIHdlIHdvdWxkbid0IHdhbnQgaXQgdG8gZ2V0IHJlbW92ZWQgaWYgdGhlIHBhcmVudCdzIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlKS5cbiAgICB0ID0gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZWxpbmUucmF3VGltZSgpLCBjaGlsZCk7XG5cbiAgICBpZiAoIWNoaWxkLl9kdXIgfHwgX2NsYW1wKDAsIGNoaWxkLnRvdGFsRHVyYXRpb24oKSwgdCkgLSBjaGlsZC5fdFRpbWUgPiBfdGlueU51bSkge1xuICAgICAgY2hpbGQucmVuZGVyKHQsIHRydWUpO1xuICAgIH1cbiAgfSAvL2lmIHRoZSB0aW1lbGluZSBoYXMgYWxyZWFkeSBlbmRlZCBidXQgdGhlIGluc2VydGVkIHR3ZWVuL3RpbWVsaW5lIGV4dGVuZHMgdGhlIGR1cmF0aW9uLCB3ZSBzaG91bGQgZW5hYmxlIHRoaXMgdGltZWxpbmUgYWdhaW4gc28gdGhhdCBpdCByZW5kZXJzIHByb3Blcmx5LiBXZSBzaG91bGQgYWxzbyBhbGlnbiB0aGUgcGxheWhlYWQgd2l0aCB0aGUgcGFyZW50IHRpbWVsaW5lJ3Mgd2hlbiBhcHByb3ByaWF0ZS5cblxuXG4gIGlmIChfdW5jYWNoZSh0aW1lbGluZSwgY2hpbGQpLl9kcCAmJiB0aW1lbGluZS5faW5pdHRlZCAmJiB0aW1lbGluZS5fdGltZSA+PSB0aW1lbGluZS5fZHVyICYmIHRpbWVsaW5lLl90cykge1xuICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9ycyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQuLi5cbiAgICBpZiAodGltZWxpbmUuX2R1ciA8IHRpbWVsaW5lLmR1cmF0aW9uKCkpIHtcbiAgICAgIHQgPSB0aW1lbGluZTtcblxuICAgICAgd2hpbGUgKHQuX2RwKSB7XG4gICAgICAgIHQucmF3VGltZSgpID49IDAgJiYgdC50b3RhbFRpbWUodC5fdFRpbWUpOyAvL21vdmVzIHRoZSB0aW1lbGluZSAoc2hpZnRzIGl0cyBzdGFydFRpbWUpIGlmIG5lY2Vzc2FyeSwgYW5kIGFsc28gZW5hYmxlcyBpdC4gSWYgaXQncyBjdXJyZW50bHkgemVybywgdGhvdWdoLCBpdCBtYXkgbm90IGJlIHNjaGVkdWxlZCB0byByZW5kZXIgdW50aWwgbGF0ZXIgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIGl0IHRvIGFsaWduIHdpdGggdGhlIGN1cnJlbnQgcGxheWhlYWQgcG9zaXRpb24uIE9ubHkgbW92ZSB0byBjYXRjaCB1cCB3aXRoIHRoZSBwbGF5aGVhZC5cblxuICAgICAgICB0ID0gdC5fZHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGltZWxpbmUuX3pUaW1lID0gLV90aW55TnVtOyAvLyBoZWxwcyBlbnN1cmUgdGhhdCB0aGUgbmV4dCByZW5kZXIoKSB3aWxsIGJlIGZvcmNlZCAoY3Jvc3NpbmdTdGFydCA9IHRydWUgaW4gcmVuZGVyKCkpLCBldmVuIGlmIHRoZSBkdXJhdGlvbiBoYXNuJ3QgY2hhbmdlZCAod2UncmUgYWRkaW5nIGEgY2hpbGQgd2hpY2ggd291bGQgbmVlZCB0byBnZXQgcmVuZGVyZWQpLiBEZWZpbml0ZWx5IGFuIGVkZ2UgY2FzZS4gTm90ZTogd2UgTVVTVCBkbyB0aGlzIEFGVEVSIHRoZSBsb29wIGFib3ZlIHdoZXJlIHRoZSB0b3RhbFRpbWUoKSBtaWdodCB0cmlnZ2VyIGEgcmVuZGVyKCkgYmVjYXVzZSB0aGlzIF9hZGRUb1RpbWVsaW5lKCkgbWV0aG9kIGdldHMgY2FsbGVkIGZyb20gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgQkVGT1JFIHR3ZWVucyBldmVuIHJlY29yZCB0aGVpciB0YXJnZXRzLCBldGMuIHNvIHdlIHdvdWxkbid0IHdhbnQgdGhpbmdzIHRvIGdldCB0cmlnZ2VyZWQgaW4gdGhlIHdyb25nIG9yZGVyLlxuICB9XG59LFxuICAgIF9hZGRUb1RpbWVsaW5lID0gZnVuY3Rpb24gX2FkZFRvVGltZWxpbmUodGltZWxpbmUsIGNoaWxkLCBwb3NpdGlvbiwgc2tpcENoZWNrcykge1xuICBjaGlsZC5wYXJlbnQgJiYgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICBjaGlsZC5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKChfaXNOdW1iZXIocG9zaXRpb24pID8gcG9zaXRpb24gOiBwb3NpdGlvbiB8fCB0aW1lbGluZSAhPT0gX2dsb2JhbFRpbWVsaW5lID8gX3BhcnNlUG9zaXRpb24odGltZWxpbmUsIHBvc2l0aW9uLCBjaGlsZCkgOiB0aW1lbGluZS5fdGltZSkgKyBjaGlsZC5fZGVsYXkpO1xuICBjaGlsZC5fZW5kID0gX3JvdW5kUHJlY2lzZShjaGlsZC5fc3RhcnQgKyAoY2hpbGQudG90YWxEdXJhdGlvbigpIC8gTWF0aC5hYnMoY2hpbGQudGltZVNjYWxlKCkpIHx8IDApKTtcblxuICBfYWRkTGlua2VkTGlzdEl0ZW0odGltZWxpbmUsIGNoaWxkLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRpbWVsaW5lLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuXG4gIF9pc0Zyb21PckZyb21TdGFydChjaGlsZCkgfHwgKHRpbWVsaW5lLl9yZWNlbnQgPSBjaGlsZCk7XG4gIHNraXBDaGVja3MgfHwgX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKTtcbiAgdGltZWxpbmUuX3RzIDwgMCAmJiBfYWxpZ25QbGF5aGVhZCh0aW1lbGluZSwgdGltZWxpbmUuX3RUaW1lKTsgLy8gaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgbmV3IGNoaWxkIG1ha2VzIGl0IGxvbmdlciwgd2UgbWF5IG5lZWQgdG8gYWRqdXN0IHRoZSBwYXJlbnQncyBfc3RhcnQgKHB1c2ggaXQgYmFjaylcblxuICByZXR1cm4gdGltZWxpbmU7XG59LFxuICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gIHJldHVybiAoX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlciB8fCBfbWlzc2luZ1BsdWdpbihcInNjcm9sbFRyaWdnZXJcIiwgdHJpZ2dlcikpICYmIF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIuY3JlYXRlKHRyaWdnZXIsIGFuaW1hdGlvbik7XG59LFxuICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpIHtcbiAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICFfcmV2ZXJ0aW5nICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RUaW1lLCBzdXBwcmVzc0V2ZW50c107XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0sXG4gICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Ll90cyAmJiBwYXJlbnQuX2luaXR0ZWQgJiYgIXBhcmVudC5fbG9jayAmJiAocGFyZW50LnJhd1RpbWUoKSA8IDAgfHwgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChwYXJlbnQpKTtcbn0sXG4gICAgLy8gY2hlY2sgcGFyZW50J3MgX2xvY2sgYmVjYXVzZSB3aGVuIGEgdGltZWxpbmUgcmVwZWF0cy95b3lvcyBhbmQgZG9lcyBpdHMgYXJ0aWZpY2lhbCB3cmFwcGluZywgd2Ugc2hvdWxkbid0IGZvcmNlIHRoZSByYXRpbyBiYWNrIHRvIDBcbl9pc0Zyb21PckZyb21TdGFydCA9IGZ1bmN0aW9uIF9pc0Zyb21PckZyb21TdGFydChfcmVmMikge1xuICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgKCF0d2Vlbi5fc3RhcnQgJiYgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCh0d2VlbikgJiYgISghdHdlZW4uX2luaXR0ZWQgJiYgX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgfHwgKHR3ZWVuLl90cyA8IDAgfHwgdHdlZW4uX2RwLl90cyA8IDApICYmICFfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSA/IDAgOiAxLFxuICAgICAgLy8gaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC4gRWRnZSBjYXNlOiBpZiBhIGZyb20oKSBvciBmcm9tVG8oKSBzdGFnZ2VyIHR3ZWVuIGlzIHBsYWNlZCBsYXRlciBpbiBhIHRpbWVsaW5lLCB0aGUgXCJzdGFydEF0XCIgemVyby1kdXJhdGlvbiB0d2VlbiBjb3VsZCBpbml0aWFsbHkgcmVuZGVyIGF0IGEgdGltZSB3aGVuIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBpcyB0ZWNobmljYWxseSBCRUZPUkUgd2hlcmUgdGhpcyB0d2VlbiBpcywgc28gbWFrZSBzdXJlIHRoYXQgYW55IFwiZnJvbVwiIGFuZCBcImZyb21Ub1wiIHN0YXJ0QXQgdHdlZW5zIGFyZSByZW5kZXJlZCB0aGUgZmlyc3QgdGltZSBhdCBhIHJhdGlvIG9mIDEuXG4gIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgIHRUaW1lID0gMCxcbiAgICAgIHB0LFxuICAgICAgaXRlcmF0aW9uLFxuICAgICAgcHJldkl0ZXJhdGlvbjtcblxuICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vIGluIGNhc2UgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gdGhhdCBoYXMgYSByZXBlYXQgd2l0aCBhIHJlcGVhdERlbGF5XG4gICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgdHdlZW4uX3lveW8gJiYgaXRlcmF0aW9uICYgMSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuXG4gICAgaWYgKGl0ZXJhdGlvbiAhPT0gX2FuaW1hdGlvbkN5Y2xlKHR3ZWVuLl90VGltZSwgcmVwZWF0RGVsYXkpKSB7XG4gICAgICAvLyBpZiBpdGVyYXRpb24gY2hhbmdlZFxuICAgICAgcHJldlJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgdHdlZW4udmFycy5yZXBlYXRSZWZyZXNoICYmIHR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBpZiAocmF0aW8gIT09IHByZXZSYXRpbyB8fCBfcmV2ZXJ0aW5nIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhX3JldmVydGluZykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgJiYgX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCBhbmltYXRpb24uX3RUaW1lID0gYW5pbWF0aW9uLl90RHVyICogdG90YWxQcm9ncmVzcyk7XG4gIGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSAoTWF0aC5yYW5kb20oKSAqIGkpIHwgMCwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdCA8IGwgJiYgd3JhcEF0LS07XG4gICAgICB9XG5cbiAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdID0gW107XG4gICAgICBvcmlnaW5YID0gcmF0aW9zID8gTWF0aC5taW4od3JhcEF0LCBsKSAqIHJhdGlvWCAtIC41IDogZnJvbSAlIHdyYXBBdDtcbiAgICAgIG9yaWdpblkgPSB3cmFwQXQgPT09IF9iaWdOdW0gPyAwIDogcmF0aW9zID8gbCAqIHJhdGlvWSAvIHdyYXBBdCAtIC41IDogZnJvbSAvIHdyYXBBdCB8IDA7XG4gICAgICBtYXggPSAwO1xuICAgICAgbWluID0gX2JpZ051bTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICB4ID0gaiAlIHdyYXBBdCAtIG9yaWdpblg7XG4gICAgICAgIHkgPSBvcmlnaW5ZIC0gKGogLyB3cmFwQXQgfCAwKTtcbiAgICAgICAgZGlzdGFuY2VzW2pdID0gZCA9ICFheGlzID8gX3NxcnQoeCAqIHggKyB5ICogeSkgOiBNYXRoLmFicyhheGlzID09PSBcInlcIiA/IHkgOiB4KTtcbiAgICAgICAgZCA+IG1heCAmJiAobWF4ID0gZCk7XG4gICAgICAgIGQgPCBtaW4gJiYgKG1pbiA9IGQpO1xuICAgICAgfVxuXG4gICAgICBmcm9tID09PSBcInJhbmRvbVwiICYmIHNodWZmbGUoZGlzdGFuY2VzKTtcbiAgICAgIGRpc3RhbmNlcy5tYXggPSBtYXggLSBtaW47XG4gICAgICBkaXN0YW5jZXMubWluID0gbWluO1xuICAgICAgZGlzdGFuY2VzLnYgPSBsID0gKHBhcnNlRmxvYXQodmFycy5hbW91bnQpIHx8IHBhcnNlRmxvYXQodmFycy5lYWNoKSAqICh3cmFwQXQgPiBsID8gbCAtIDEgOiAhYXhpcyA/IE1hdGgubWF4KHdyYXBBdCwgbCAvIHdyYXBBdCkgOiBheGlzID09PSBcInlcIiA/IGwgLyB3cmFwQXQgOiB3cmFwQXQpIHx8IDApICogKGZyb20gPT09IFwiZWRnZXNcIiA/IC0xIDogMSk7XG4gICAgICBkaXN0YW5jZXMuYiA9IGwgPCAwID8gYmFzZSAtIGwgOiBiYXNlO1xuICAgICAgZGlzdGFuY2VzLnUgPSBnZXRVbml0KHZhcnMuYW1vdW50IHx8IHZhcnMuZWFjaCkgfHwgMDsgLy91bml0XG5cbiAgICAgIGVhc2UgPSBlYXNlICYmIGwgPCAwID8gX2ludmVydEVhc2UoZWFzZSkgOiBlYXNlO1xuICAgIH1cblxuICAgIGwgPSAoZGlzdGFuY2VzW2ldIC0gZGlzdGFuY2VzLm1pbikgLyBkaXN0YW5jZXMubWF4IHx8IDA7XG4gICAgcmV0dXJuIF9yb3VuZFByZWNpc2UoZGlzdGFuY2VzLmIgKyAoZWFzZSA/IGVhc2UobCkgOiBsKSAqIGRpc3RhbmNlcy52KSArIGRpc3RhbmNlcy51OyAvL3JvdW5kIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kIGZsb2F0aW5nIHBvaW50IGVycm9yc1xuICB9O1xufSxcbiAgICBfcm91bmRNb2RpZmllciA9IGZ1bmN0aW9uIF9yb3VuZE1vZGlmaWVyKHYpIHtcbiAgLy9wYXNzIGluIDAuMSBnZXQgYSBmdW5jdGlvbiB0aGF0J2xsIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHRlbnRoLCBvciA1IHRvIHJvdW5kIHRvIHRoZSBjbG9zZXN0IDUsIG9yIDAuMDAxIHRvIHRoZSBjbG9zZXN0IDEwMDB0aCwgZXRjLlxuICB2YXIgcCA9IE1hdGgucG93KDEwLCAoKHYgKyBcIlwiKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoKTsgLy90byBhdm9pZCBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAobGlrZSAyNCAqIDAuMSA9PSAyLjQwMDAwMDAwMDAwMDAwMDQpLCB3ZSBjaG9wIG9mZiBhdCBhIHNwZWNpZmljIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAobXVjaCBmYXN0ZXIgdGhhbiB0b0ZpeGVkKCkpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgbiA9IF9yb3VuZFByZWNpc2UoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJhdykgLyB2KSAqIHYgKiBwKTtcblxuICAgIHJldHVybiAobiAtIG4gJSAxKSAvIHAgKyAoX2lzTnVtYmVyKHJhdykgPyAwIDogZ2V0VW5pdChyYXcpKTsgLy8gbiAtIG4gJSAxIHJlcGxhY2VzIE1hdGguZmxvb3IoKSBpbiBvcmRlciB0byBoYW5kbGUgbmVnYXRpdmUgdmFsdWVzIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgTWF0aC5mbG9vcigtMTUwLjAwMDAwMDAwMDAwMDAzKSBpcyAxNTEhXG4gIH07XG59LFxuICAgIHNuYXAgPSBmdW5jdGlvbiBzbmFwKHNuYXBUbywgdmFsdWUpIHtcbiAgdmFyIGlzQXJyYXkgPSBfaXNBcnJheShzbmFwVG8pLFxuICAgICAgcmFkaXVzLFxuICAgICAgaXMyRDtcblxuICBpZiAoIWlzQXJyYXkgJiYgX2lzT2JqZWN0KHNuYXBUbykpIHtcbiAgICByYWRpdXMgPSBpc0FycmF5ID0gc25hcFRvLnJhZGl1cyB8fCBfYmlnTnVtO1xuXG4gICAgaWYgKHNuYXBUby52YWx1ZXMpIHtcbiAgICAgIHNuYXBUbyA9IHRvQXJyYXkoc25hcFRvLnZhbHVlcyk7XG5cbiAgICAgIGlmIChpczJEID0gIV9pc051bWJlcihzbmFwVG9bMF0pKSB7XG4gICAgICAgIHJhZGl1cyAqPSByYWRpdXM7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHdlIGRvbid0IGhhdmUgdG8gTWF0aC5zcXJ0KCkgaW4gdGhlIGxvb3AuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNuYXBUbyA9IF9yb3VuZE1vZGlmaWVyKHNuYXBUby5pbmNyZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsICFpc0FycmF5ID8gX3JvdW5kTW9kaWZpZXIoc25hcFRvKSA6IF9pc0Z1bmN0aW9uKHNuYXBUbykgPyBmdW5jdGlvbiAocmF3KSB7XG4gICAgaXMyRCA9IHNuYXBUbyhyYXcpO1xuICAgIHJldHVybiBNYXRoLmFicyhpczJEIC0gcmF3KSA8PSByYWRpdXMgPyBpczJEIDogcmF3O1xuICB9IDogZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciB4ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnggOiByYXcpLFxuICAgICAgICB5ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnkgOiAwKSxcbiAgICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgICAgY2xvc2VzdCA9IDAsXG4gICAgICAgIGkgPSBzbmFwVG8ubGVuZ3RoLFxuICAgICAgICBkeCxcbiAgICAgICAgZHk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoaXMyRCkge1xuICAgICAgICBkeCA9IHNuYXBUb1tpXS54IC0geDtcbiAgICAgICAgZHkgPSBzbmFwVG9baV0ueSAtIHk7XG4gICAgICAgIGR4ID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkeCA9IE1hdGguYWJzKHNuYXBUb1tpXSAtIHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHggPCBtaW4pIHtcbiAgICAgICAgbWluID0gZHg7XG4gICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNsb3Nlc3QgPSAhcmFkaXVzIHx8IG1pbiA8PSByYWRpdXMgPyBzbmFwVG9bY2xvc2VzdF0gOiByYXc7XG4gICAgcmV0dXJuIGlzMkQgfHwgY2xvc2VzdCA9PT0gcmF3IHx8IF9pc051bWJlcihyYXcpID8gY2xvc2VzdCA6IGNsb3Nlc3QgKyBnZXRVbml0KHJhdyk7XG4gIH0pO1xufSxcbiAgICByYW5kb20gPSBmdW5jdGlvbiByYW5kb20obWluLCBtYXgsIHJvdW5kaW5nSW5jcmVtZW50LCByZXR1cm5GdW5jdGlvbikge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKF9pc0FycmF5KG1pbikgPyAhbWF4IDogcm91bmRpbmdJbmNyZW1lbnQgPT09IHRydWUgPyAhIShyb3VuZGluZ0luY3JlbWVudCA9IDApIDogIXJldHVybkZ1bmN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBtaW5bfn4oTWF0aC5yYW5kb20oKSAqIG1pbi5sZW5ndGgpXSA6IChyb3VuZGluZ0luY3JlbWVudCA9IHJvdW5kaW5nSW5jcmVtZW50IHx8IDFlLTUpICYmIChyZXR1cm5GdW5jdGlvbiA9IHJvdW5kaW5nSW5jcmVtZW50IDwgMSA/IE1hdGgucG93KDEwLCAocm91bmRpbmdJbmNyZW1lbnQgKyBcIlwiKS5sZW5ndGggLSAyKSA6IDEpICYmIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgobWluIC0gcm91bmRpbmdJbmNyZW1lbnQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyByb3VuZGluZ0luY3JlbWVudCAqIC45OSkpIC8gcm91bmRpbmdJbmNyZW1lbnQpICogcm91bmRpbmdJbmNyZW1lbnQgKiByZXR1cm5GdW5jdGlvbikgLyByZXR1cm5GdW5jdGlvbjtcbiAgfSk7XG59LFxuICAgIHBpcGUgPSBmdW5jdGlvbiBwaXBlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmN0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgcmV0dXJuIGYodik7XG4gICAgfSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICB1bml0aXplID0gZnVuY3Rpb24gdW5pdGl6ZShmdW5jLCB1bml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyhwYXJzZUZsb2F0KHZhbHVlKSkgKyAodW5pdCB8fCBnZXRVbml0KHZhbHVlKSk7XG4gIH07XG59LFxuICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIG1hcFJhbmdlKG1pbiwgbWF4LCAwLCAxLCB2YWx1ZSk7XG59LFxuICAgIF93cmFwQXJyYXkgPSBmdW5jdGlvbiBfd3JhcEFycmF5KGEsIHdyYXBwZXIsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBhW35+d3JhcHBlcihpbmRleCldO1xuICB9KTtcbn0sXG4gICAgd3JhcCA9IGZ1bmN0aW9uIHdyYXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIC8vIE5PVEU6IHdyYXAoKSBDQU5OT1QgYmUgYW4gYXJyb3cgZnVuY3Rpb24hIEEgdmVyeSBvZGQgY29tcGlsaW5nIGJ1ZyBjYXVzZXMgcHJvYmxlbXMgKHVucmVsYXRlZCB0byBHU0FQKS5cbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwKDAsIG1pbi5sZW5ndGgpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKHJhbmdlICsgKHZhbHVlIC0gbWluKSAlIHJhbmdlKSAlIHJhbmdlICsgbWluO1xuICB9KTtcbn0sXG4gICAgd3JhcFlveW8gPSBmdW5jdGlvbiB3cmFwWW95byhtaW4sIG1heCwgdmFsdWUpIHtcbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluLFxuICAgICAgdG90YWwgPSByYW5nZSAqIDI7XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXBZb3lvKDAsIG1pbi5sZW5ndGggLSAxKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSAodG90YWwgKyAodmFsdWUgLSBtaW4pICUgdG90YWwpICUgdG90YWwgfHwgMDtcbiAgICByZXR1cm4gbWluICsgKHZhbHVlID4gcmFuZ2UgPyB0b3RhbCAtIHZhbHVlIDogdmFsdWUpO1xuICB9KTtcbn0sXG4gICAgX3JlcGxhY2VSYW5kb20gPSBmdW5jdGlvbiBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkge1xuICAvL3JlcGxhY2VzIGFsbCBvY2N1cnJlbmNlcyBvZiByYW5kb20oLi4uKSBpbiBhIHN0cmluZyB3aXRoIHRoZSBjYWxjdWxhdGVkIHJhbmRvbSB2YWx1ZS4gY2FuIGJlIGEgcmFuZ2UgbGlrZSByYW5kb20oLTEwMCwgMTAwLCA1KSBvciBhbiBhcnJheSBsaWtlIHJhbmRvbShbMCwgMTAwLCA1MDBdKVxuICB2YXIgcHJldiA9IDAsXG4gICAgICBzID0gXCJcIixcbiAgICAgIGksXG4gICAgICBudW1zLFxuICAgICAgZW5kLFxuICAgICAgaXNBcnJheTtcblxuICB3aGlsZSAofihpID0gdmFsdWUuaW5kZXhPZihcInJhbmRvbShcIiwgcHJldikpKSB7XG4gICAgZW5kID0gdmFsdWUuaW5kZXhPZihcIilcIiwgaSk7XG4gICAgaXNBcnJheSA9IHZhbHVlLmNoYXJBdChpICsgNykgPT09IFwiW1wiO1xuICAgIG51bXMgPSB2YWx1ZS5zdWJzdHIoaSArIDcsIGVuZCAtIGkgLSA3KS5tYXRjaChpc0FycmF5ID8gX2RlbGltaXRlZFZhbHVlRXhwIDogX3N0cmljdE51bUV4cCk7XG4gICAgcyArPSB2YWx1ZS5zdWJzdHIocHJldiwgaSAtIHByZXYpICsgcmFuZG9tKGlzQXJyYXkgPyBudW1zIDogK251bXNbMF0sIGlzQXJyYXkgPyAwIDogK251bXNbMV0sICtudW1zWzJdIHx8IDFlLTUpO1xuICAgIHByZXYgPSBlbmQgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHMgKyB2YWx1ZS5zdWJzdHIocHJldiwgdmFsdWUubGVuZ3RoIC0gcHJldik7XG59LFxuICAgIG1hcFJhbmdlID0gZnVuY3Rpb24gbWFwUmFuZ2UoaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCwgdmFsdWUpIHtcbiAgdmFyIGluUmFuZ2UgPSBpbk1heCAtIGluTWluLFxuICAgICAgb3V0UmFuZ2UgPSBvdXRNYXggLSBvdXRNaW47XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gaW5NaW4pIC8gaW5SYW5nZSAqIG91dFJhbmdlIHx8IDApO1xuICB9KTtcbn0sXG4gICAgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgZW5kLCBwcm9ncmVzcywgbXV0YXRlKSB7XG4gIHZhciBmdW5jID0gaXNOYU4oc3RhcnQgKyBlbmQpID8gMCA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICgxIC0gcCkgKiBzdGFydCArIHAgKiBlbmQ7XG4gIH07XG5cbiAgaWYgKCFmdW5jKSB7XG4gICAgdmFyIGlzU3RyaW5nID0gX2lzU3RyaW5nKHN0YXJ0KSxcbiAgICAgICAgbWFzdGVyID0ge30sXG4gICAgICAgIHAsXG4gICAgICAgIGksXG4gICAgICAgIGludGVycG9sYXRvcnMsXG4gICAgICAgIGwsXG4gICAgICAgIGlsO1xuXG4gICAgcHJvZ3Jlc3MgPT09IHRydWUgJiYgKG11dGF0ZSA9IDEpICYmIChwcm9ncmVzcyA9IG51bGwpO1xuXG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICBzdGFydCA9IHtcbiAgICAgICAgcDogc3RhcnRcbiAgICAgIH07XG4gICAgICBlbmQgPSB7XG4gICAgICAgIHA6IGVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKF9pc0FycmF5KHN0YXJ0KSAmJiAhX2lzQXJyYXkoZW5kKSkge1xuICAgICAgaW50ZXJwb2xhdG9ycyA9IFtdO1xuICAgICAgbCA9IHN0YXJ0Lmxlbmd0aDtcbiAgICAgIGlsID0gbCAtIDI7XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW50ZXJwb2xhdG9ycy5wdXNoKGludGVycG9sYXRlKHN0YXJ0W2kgLSAxXSwgc3RhcnRbaV0pKTsgLy9idWlsZCB0aGUgaW50ZXJwb2xhdG9ycyB1cCBmcm9udCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB0aGF0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBtYW55IHRpbWVzLCBpdCBjYW4ganVzdCByZXVzZSB0aGVtLlxuICAgICAgfVxuXG4gICAgICBsLS07XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcCAqPSBsO1xuICAgICAgICB2YXIgaSA9IE1hdGgubWluKGlsLCB+fnApO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tpXShwIC0gaSk7XG4gICAgICB9O1xuXG4gICAgICBwcm9ncmVzcyA9IGVuZDtcbiAgICB9IGVsc2UgaWYgKCFtdXRhdGUpIHtcbiAgICAgIHN0YXJ0ID0gX21lcmdlKF9pc0FycmF5KHN0YXJ0KSA/IFtdIDoge30sIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAoIWludGVycG9sYXRvcnMpIHtcbiAgICAgIGZvciAocCBpbiBlbmQpIHtcbiAgICAgICAgX2FkZFByb3BUd2Vlbi5jYWxsKG1hc3Rlciwgc3RhcnQsIHAsIFwiZ2V0XCIsIGVuZFtwXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXJQcm9wVHdlZW5zKHAsIG1hc3RlcikgfHwgKGlzU3RyaW5nID8gc3RhcnQucCA6IHN0YXJ0KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihwcm9ncmVzcywgZnVuYyk7XG59LFxuICAgIF9nZXRMYWJlbEluRGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsSW5EaXJlY3Rpb24odGltZWxpbmUsIGZyb21UaW1lLCBiYWNrd2FyZCkge1xuICAvL3VzZWQgZm9yIG5leHRMYWJlbCgpIGFuZCBwcmV2aW91c0xhYmVsKClcbiAgdmFyIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICBwLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBsYWJlbDtcblxuICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgZGlzdGFuY2UgPSBsYWJlbHNbcF0gLSBmcm9tVGltZTtcblxuICAgIGlmIChkaXN0YW5jZSA8IDAgPT09ICEhYmFja3dhcmQgJiYgZGlzdGFuY2UgJiYgbWluID4gKGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2UpKSkge1xuICAgICAgbGFiZWwgPSBwO1xuICAgICAgbWluID0gZGlzdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soYW5pbWF0aW9uLCB0eXBlLCBleGVjdXRlTGF6eUZpcnN0KSB7XG4gIHZhciB2ID0gYW5pbWF0aW9uLnZhcnMsXG4gICAgICBjYWxsYmFjayA9IHZbdHlwZV0sXG4gICAgICBwcmV2Q29udGV4dCA9IF9jb250ZXh0LFxuICAgICAgY29udGV4dCA9IGFuaW1hdGlvbi5fY3R4LFxuICAgICAgcGFyYW1zLFxuICAgICAgc2NvcGUsXG4gICAgICByZXN1bHQ7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhcmFtcyA9IHZbdHlwZSArIFwiUGFyYW1zXCJdO1xuICBzY29wZSA9IHYuY2FsbGJhY2tTY29wZSB8fCBhbmltYXRpb247XG4gIGV4ZWN1dGVMYXp5Rmlyc3QgJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBhIHRpbWVsaW5lIGZpbmlzaGVzLCB1c2VycyBleHBlY3QgdGhpbmdzIHRvIGhhdmUgcmVuZGVyZWQgZnVsbHkuIEltYWdpbmUgYW4gb25VcGRhdGUgb24gYSB0aW1lbGluZSB0aGF0IHJlcG9ydHMvY2hlY2tzIHR3ZWVuZWQgdmFsdWVzLlxuXG4gIGNvbnRleHQgJiYgKF9jb250ZXh0ID0gY29udGV4dCk7XG4gIHJlc3VsdCA9IHBhcmFtcyA/IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpIDogY2FsbGJhY2suY2FsbChzY29wZSk7XG4gIF9jb250ZXh0ID0gcHJldkNvbnRleHQ7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF9pbnRlcnJ1cHQgPSBmdW5jdGlvbiBfaW50ZXJydXB0KGFuaW1hdGlvbikge1xuICBfcmVtb3ZlRnJvbVBhcmVudChhbmltYXRpb24pO1xuXG4gIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyICYmIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmtpbGwoISFfcmV2ZXJ0aW5nKTtcbiAgYW5pbWF0aW9uLnByb2dyZXNzKCkgPCAxICYmIF9jYWxsYmFjayhhbmltYXRpb24sIFwib25JbnRlcnJ1cHRcIik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9xdWlja1R3ZWVuLFxuICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlID0gW10sXG4gICAgX2NyZWF0ZVBsdWdpbiA9IGZ1bmN0aW9uIF9jcmVhdGVQbHVnaW4oY29uZmlnKSB7XG4gIGlmICghY29uZmlnKSByZXR1cm47XG4gIGNvbmZpZyA9ICFjb25maWcubmFtZSAmJiBjb25maWdbXCJkZWZhdWx0XCJdIHx8IGNvbmZpZzsgLy8gVU1EIHBhY2thZ2luZyB3cmFwcyB0aGluZ3Mgb2RkbHksIHNvIGZvciBleGFtcGxlIE1vdGlvblBhdGhIZWxwZXIgYmVjb21lcyB7TW90aW9uUGF0aEhlbHBlcjpNb3Rpb25QYXRoSGVscGVyLCBkZWZhdWx0Ok1vdGlvblBhdGhIZWxwZXJ9LlxuXG4gIGlmIChfd2luZG93RXhpc3RzKCkgfHwgY29uZmlnLmhlYWRsZXNzKSB7XG4gICAgLy8gZWRnZSBjYXNlOiBzb21lIGJ1aWxkIHRvb2xzIG1heSBwYXNzIGluIGEgbnVsbC91bmRlZmluZWQgdmFsdWVcbiAgICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgICBQbHVnaW4gPSBuYW1lICYmICFpc0Z1bmMgJiYgY29uZmlnLmluaXQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICAgIH0gOiBjb25maWcsXG4gICAgICAgIC8vaW4gY2FzZSBzb21lb25lIHBhc3NlcyBpbiBhbiBvYmplY3QgdGhhdCdzIG5vdCBhIHBsdWdpbiwgbGlrZSBDdXN0b21FYXNlXG4gICAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICAgIGluaXQ6IF9lbXB0eUZ1bmMsXG4gICAgICByZW5kZXI6IF9yZW5kZXJQcm9wVHdlZW5zLFxuICAgICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgICAga2lsbDogX2tpbGxQcm9wVHdlZW5zT2YsXG4gICAgICBtb2RpZmllcjogX2FkZFBsdWdpbk1vZGlmaWVyLFxuICAgICAgcmF3VmFyczogMFxuICAgIH0sXG4gICAgICAgIHN0YXRpY3MgPSB7XG4gICAgICB0YXJnZXRUZXN0OiAwLFxuICAgICAgZ2V0OiAwLFxuICAgICAgZ2V0U2V0dGVyOiBfZ2V0U2V0dGVyLFxuICAgICAgYWxpYXNlczoge30sXG4gICAgICByZWdpc3RlcjogMFxuICAgIH07XG5cbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKGNvbmZpZyAhPT0gUGx1Z2luKSB7XG4gICAgICBpZiAoX3BsdWdpbnNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfc2V0RGVmYXVsdHMoUGx1Z2luLCBfc2V0RGVmYXVsdHMoX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBpbnN0YW5jZURlZmF1bHRzKSwgc3RhdGljcykpOyAvL3N0YXRpYyBtZXRob2RzXG5cblxuICAgICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICAgIGlmIChjb25maWcudGFyZ2V0VGVzdCkge1xuICAgICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICAgIH1cblxuICAgICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICAgIH1cblxuICAgIF9hZGRHbG9iYWwobmFtZSwgUGx1Z2luKTtcblxuICAgIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xuICB9IGVsc2Uge1xuICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlLnB1c2goY29uZmlnKTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgaWRlYSB0byByZXBsYWNlIHRoZSBoYXJkLWNvZGVkIGNvbG9yIG5hbWUgdmFsdWVzIC0gcHV0IHRoaXMgaW4gdGhlIHRpY2tlci53YWtlKCkgd2hlcmUgd2Ugc2V0IHRoZSBfZG9jOlxuLy8gbGV0IGN0eCA9IF9kb2MuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyBfZm9yRWFjaE5hbWUoXCJhcXVhLGxpbWUsc2lsdmVyLGJsYWNrLG1hcm9vbix0ZWFsLGJsdWUsbmF2eSx3aGl0ZSxvbGl2ZSx5ZWxsb3csb3JhbmdlLGdyYXkscHVycGxlLGdyZWVuLHJlZCxwaW5rLGN5YW5cIiwgY29sb3IgPT4ge2N0eC5maWxsU3R5bGUgPSBjb2xvcjsgX2NvbG9yTG9va3VwW2NvbG9yXSA9IHNwbGl0Q29sb3IoY3R4LmZpbGxTdHlsZSl9KTtcbl9odWUgPSBmdW5jdGlvbiBfaHVlKGgsIG0xLCBtMikge1xuICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbn0sXG4gICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgaCxcbiAgICAgIHMsXG4gICAgICBsLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZCxcbiAgICAgIHdhc0hTTDtcblxuICBpZiAoIWEpIHtcbiAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cbiAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChfY29sb3JMb29rdXBbdl0pIHtcbiAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICh2Lmxlbmd0aCA8IDYpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMCBvciAjOUYwRiAoY291bGQgaGF2ZSBhbHBoYSlcbiAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgIGIgPSB2LmNoYXJBdCgzKTtcbiAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgLy8gaGV4IHdpdGggYWxwaGEsIGxpa2UgI2ZkNWU1M2ZmXG4gICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICByZXR1cm4gW2EgPj4gMTYsIGEgPj4gOCAmIF8yNTUsIGEgJiBfMjU1LCBwYXJzZUludCh2LnN1YnN0cig3KSwgMTYpIC8gMjU1XTtcbiAgICAgIH1cblxuICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICBhID0gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XTtcbiAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgaWYgKCF0b0hTTCkge1xuICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgbCA9ICthWzJdIC8gMTAwO1xuICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgYS5sZW5ndGggPiAzICYmIChhWzNdICo9IDEpOyAvL2Nhc3QgYXMgbnVtYmVyXG5cbiAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgYVsxXSA9IF9odWUoaCwgciwgZyk7XG4gICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgIC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgciA9IGFbMF0gLyBfMjU1O1xuICAgIGcgPSBhWzFdIC8gXzI1NTtcbiAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgaCA9IHMgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9XG5cbiAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICBhWzJdID0gfn4obCAqIDEwMCArIC41KTtcbiAgfVxuXG4gIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gIHJldHVybiBhO1xufSxcbiAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAvLyBzdHJpcHMgb3V0IHRoZSBjb2xvcnMgZnJvbSB0aGUgc3RyaW5nLCBmaW5kcyBhbGwgdGhlIG51bWVyaWMgc2xvdHMgKHdpdGggdW5pdHMpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRob3NlLiBUaGUgQXJyYXkgYWxzbyBoYXMgYSBcImNcIiBwcm9wZXJ0eSB3aGljaCBpcyBhbiBBcnJheSBvZiB0aGUgaW5kZXggdmFsdWVzIHdoZXJlIHRoZSBjb2xvcnMgYmVsb25nLiBUaGlzIGlzIHRvIGhlbHAgd29yayBhcm91bmQgaXNzdWVzIHdoZXJlIHRoZXJlJ3MgYSBtaXMtbWF0Y2hlZCBvcmRlciBvZiBjb2xvci9udW1lcmljIGRhdGEgbGlrZSBkcm9wLXNoYWRvdygjZjAwIDBweCAxcHggMnB4KSBhbmQgZHJvcC1zaGFkb3coMHggMXB4IDJweCAjZjAwKS4gVGhpcyBpcyBiYXNpY2FsbHkgYSBoZWxwZXIgZnVuY3Rpb24gdXNlZCBpbiBfZm9ybWF0Q29sb3JzKClcbiAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgaSA9IC0xO1xuICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgYSk7XG4gICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgfSk7XG4gIHZhbHVlcy5jID0gYztcbiAgcmV0dXJuIHZhbHVlcztcbn0sXG4gICAgX2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uIF9mb3JtYXRDb2xvcnMocywgdG9IU0wsIG9yZGVyTWF0Y2hEYXRhKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICB0eXBlID0gdG9IU0wgPyBcImhzbGEoXCIgOiBcInJnYmEoXCIsXG4gICAgICBpID0gMCxcbiAgICAgIGMsXG4gICAgICBzaGVsbCxcbiAgICAgIGQsXG4gICAgICBsO1xuXG4gIGlmICghY29sb3JzKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gIH0pO1xuXG4gIGlmIChvcmRlck1hdGNoRGF0YSkge1xuICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICBpZiAoYy5qb2luKHJlc3VsdCkgIT09IGQuYy5qb2luKHJlc3VsdCkpIHtcbiAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaGVsbCkge1xuICAgIHNoZWxsID0gcy5zcGxpdChfY29sb3JFeHApO1xuICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc2hlbGxbbF07XG59LFxuICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHMgPSBcIig/OlxcXFxiKD86KD86cmdifHJnYmF8aHNsfGhzbGEpXFxcXCguKz9cXFxcKSl8XFxcXEIjKD86WzAtOWEtZl17Myw0fSl7MSwyfVxcXFxiXCIsXG4gICAgICAvL3dlJ2xsIGR5bmFtaWNhbGx5IGJ1aWxkIHRoaXMgUmVndWxhciBFeHByZXNzaW9uIHRvIGNvbnNlcnZlIGZpbGUgc2l6ZS4gQWZ0ZXIgYnVpbGRpbmcgaXQsIGl0IHdpbGwgYmUgYWJsZSB0byBmaW5kIHJnYigpLCByZ2JhKCksICMgKGhleGFkZWNpbWFsKSwgYW5kIG5hbWVkIGNvbG9yIHZhbHVlcyBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuLFxuICBwO1xuXG4gIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICBzICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbn0oKSxcbiAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gIHZhciBjb21iaW5lZCA9IGEuam9pbihcIiBcIiksXG4gICAgICB0b0hTTDtcbiAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgaWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgYVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wsIF9jb2xvck9yZGVyRGF0YShhWzFdKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3JkZXIgb2YgbnVtYmVycy9jb2xvcnMgbWF0Y2ggd2l0aCB0aGUgRU5EIHZhbHVlLlxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElDS0VSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fdGlja2VyQWN0aXZlLFxuICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgX2xhZ1RocmVzaG9sZCA9IDUwMCxcbiAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBfbGFzdFVwZGF0ZSA9IF9zdGFydFRpbWUsXG4gICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICBfbGlzdGVuZXJzID0gW10sXG4gICAgICBfaWQsXG4gICAgICBfcmVxLFxuICAgICAgX3JhZixcbiAgICAgIF9zZWxmLFxuICAgICAgX2RlbHRhLFxuICAgICAgX2ksXG4gICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgbWFudWFsID0gdiA9PT0gdHJ1ZSxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGZyYW1lO1xuXG4gICAgKGVsYXBzZWQgPiBfbGFnVGhyZXNob2xkIHx8IGVsYXBzZWQgPCAwKSAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlLmZvckVhY2goX2NyZWF0ZVBsdWdpbik7XG4gICAgICAgIH1cblxuICAgICAgICBfcmFmID0gdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IGNhbmNlbEFuaW1hdGlvbkZyYW1lIDogY2xlYXJUaW1lb3V0KShfaWQpO1xuICAgICAgX3RpY2tlckFjdGl2ZSA9IDA7XG4gICAgICBfcmVxID0gX2VtcHR5RnVuYztcbiAgICB9LFxuICAgIGxhZ1Ntb290aGluZzogZnVuY3Rpb24gbGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgSW5maW5pdHk7IC8vIHplcm8gc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGJhc2ljYWxseSB1bmxpbWl0ZWRcblxuICAgICAgX2FkanVzdGVkTGFnID0gTWF0aC5taW4oYWRqdXN0ZWRMYWcgfHwgMzMsIF9sYWdUaHJlc2hvbGQpO1xuICAgIH0sXG4gICAgZnBzOiBmdW5jdGlvbiBmcHMoX2Zwcykge1xuICAgICAgX2dhcCA9IDEwMDAgLyAoX2ZwcyB8fCAyNDApO1xuICAgICAgX25leHRUaW1lID0gX3NlbGYudGltZSAqIDEwMDAgKyBfZ2FwO1xuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQoY2FsbGJhY2ssIG9uY2UsIHByaW9yaXRpemUpIHtcbiAgICAgIHZhciBmdW5jID0gb25jZSA/IGZ1bmN0aW9uICh0LCBkLCBmLCB2KSB7XG4gICAgICAgIGNhbGxiYWNrKHQsIGQsIGYsIHYpO1xuXG4gICAgICAgIF9zZWxmLnJlbW92ZShmdW5jKTtcbiAgICAgIH0gOiBjYWxsYmFjaztcblxuICAgICAgX3NlbGYucmVtb3ZlKGNhbGxiYWNrKTtcblxuICAgICAgX2xpc3RlbmVyc1twcmlvcml0aXplID8gXCJ1bnNoaWZ0XCIgOiBcInB1c2hcIl0oZnVuYyk7XG5cbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2ssIGkpIHtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpICogcCArIHAgKiBwICogcCAqIHAgKiBwICogcCAqICgxIC0gcCk7XG59KTsgLy8gcHJldmlvdXNseSAyICoqICgxMCAqIChwIC0gMSkpIGJ1dCB0aGF0IGRvZXNuJ3QgZW5kIHVwIHdpdGggdGhlIHZhbHVlIHF1aXRlIGF0IHRoZSByaWdodCBzcG90IHNvIHdlIGRvIGEgYmxlbmRlZCBlYXNlIHRvIGVuc3VyZSBpdCBsYW5kcyB3aGVyZSBpdCBzaG91bGQgcGVyZmVjdGx5LlxuXG5cbl9pbnNlcnRFYXNlKFwiQ2lyY1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gLShfc3FydCgxIC0gcCAqIHApIC0gMSk7XG59KTtcblxuX2luc2VydEVhc2UoXCJTaW5lXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID09PSAxID8gMSA6IC1fY29zKHAgKiBfSEFMRl9QSSkgKyAxO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQmFja1wiLCBfY29uZmlnQmFjayhcImluXCIpLCBfY29uZmlnQmFjayhcIm91dFwiKSwgX2NvbmZpZ0JhY2soKSk7XG5cbl9lYXNlTWFwLlN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuc3RlcHMgPSBfZ2xvYmFscy5TdGVwcGVkRWFzZSA9IHtcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG4gICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHtcbiAgICAgIHN0ZXBzID0gMTtcbiAgICB9XG5cbiAgICB2YXIgcDEgPSAxIC8gc3RlcHMsXG4gICAgICAgIHAyID0gc3RlcHMgKyAoaW1tZWRpYXRlU3RhcnQgPyAwIDogMSksXG4gICAgICAgIHAzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMCxcbiAgICAgICAgbWF4ID0gMSAtIF90aW55TnVtO1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuICgocDIgKiBfY2xhbXAoMCwgbWF4LCBwKSB8IDApICsgcDMpICogcDE7XG4gICAgfTtcbiAgfVxufTtcbl9kZWZhdWx0cy5lYXNlID0gX2Vhc2VNYXBbXCJxdWFkLm91dFwiXTtcblxuX2ZvckVhY2hOYW1lKFwib25Db21wbGV0ZSxvblVwZGF0ZSxvblN0YXJ0LG9uUmVwZWF0LG9uUmV2ZXJzZUNvbXBsZXRlLG9uSW50ZXJydXB0XCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfY2FsbGJhY2tOYW1lcyArPSBuYW1lICsgXCIsXCIgKyBuYW1lICsgXCJQYXJhbXMsXCI7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ0FDSEVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIEdTQ2FjaGUgPSBmdW5jdGlvbiBHU0NhY2hlKHRhcmdldCwgaGFybmVzcykge1xuICB0aGlzLmlkID0gX2dzSUQrKztcbiAgdGFyZ2V0Ll9nc2FwID0gdGhpcztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuaGFybmVzcyA9IGhhcm5lc3M7XG4gIHRoaXMuZ2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0IDogX2dldFByb3BlcnR5O1xuICB0aGlzLnNldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldFNldHRlciA6IF9nZXRTZXR0ZXI7XG59O1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBTklNQVRJT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IHZhciBBbmltYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRpb24odmFycykge1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgdGhpcy5fZGVsYXkgPSArdmFycy5kZWxheSB8fCAwO1xuXG4gICAgaWYgKHRoaXMuX3JlcGVhdCA9IHZhcnMucmVwZWF0ID09PSBJbmZpbml0eSA/IC0yIDogdmFycy5yZXBlYXQgfHwgMCkge1xuICAgICAgLy8gVE9ETzogcmVwZWF0OiBJbmZpbml0eSBvbiBhIHRpbWVsaW5lJ3MgY2hpbGRyZW4gbXVzdCBmbGFnIHRoYXQgdGltZWxpbmUgaW50ZXJuYWxseSBhbmQgYWZmZWN0IGl0cyB0b3RhbER1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc3RvcCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIHdoZW4gcmVhY2hpbmcgdGhlIHN0YXJ0LlxuICAgICAgdGhpcy5fckRlbGF5ID0gdmFycy5yZXBlYXREZWxheSB8fCAwO1xuICAgICAgdGhpcy5feW95byA9ICEhdmFycy55b3lvIHx8ICEhdmFycy55b3lvRWFzZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cyA9IDE7XG5cbiAgICBfc2V0RHVyYXRpb24odGhpcywgK3ZhcnMuZHVyYXRpb24sIDEsIDEpO1xuXG4gICAgdGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXG4gICAgaWYgKF9jb250ZXh0KSB7XG4gICAgICB0aGlzLl9jdHggPSBfY29udGV4dDtcblxuICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICAgIH1cblxuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVsYXkgPSBmdW5jdGlvbiBkZWxheSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5zdGFydFRpbWUodGhpcy5fc3RhcnQgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxEdXJhdGlvbih0aGlzLl9yZXBlYXQgPiAwID8gdmFsdWUgKyAodmFsdWUgKyB0aGlzLl9yRGVsYXkpICogdGhpcy5fcmVwZWF0IDogdmFsdWUpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgJiYgdGhpcy5fZHVyO1xuICB9O1xuXG4gIF9wcm90by50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3REdXI7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHkgPSAwO1xuICAgIHJldHVybiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fcmVwZWF0IDwgMCA/IHZhbHVlIDogKHZhbHVlIC0gdGhpcy5fcmVwZWF0ICogdGhpcy5fckRlbGF5KSAvICh0aGlzLl9yZXBlYXQgKyAxKSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5fZHA7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLl90cykge1xuICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgX3RvdGFsVGltZSk7XG5cbiAgICAgICFwYXJlbnQuX2RwIHx8IHBhcmVudC5wYXJlbnQgfHwgX3Bvc3RBZGRDaGVja3MocGFyZW50LCB0aGlzKTsgLy8gZWRnZSBjYXNlOiBpZiB0aGlzIGlzIGEgY2hpbGQgb2YgYSB0aW1lbGluZSB0aGF0IGFscmVhZHkgY29tcGxldGVkLCBmb3IgZXhhbXBsZSwgd2UgbXVzdCByZS1hY3RpdmF0ZSB0aGUgcGFyZW50LlxuICAgICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3IgdGltZWxpbmVzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZCwgd2Ugc2hvdWxkIHJlc2V0IHRoZWlyIHRvdGFsVGltZSgpIHdoaWNoIHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGV5J3JlIGxpbmVkIHVwIHByb3Blcmx5IGFuZCBlbmFibGVkLiBTa2lwIGZvciBhbmltYXRpb25zIHRoYXQgYXJlIG9uIHRoZSByb290ICh3YXN0ZWZ1bCkuIEV4YW1wbGU6IGEgVGltZWxpbmVMaXRlLmV4cG9ydFJvb3QoKSBpcyBwZXJmb3JtZWQgd2hlbiB0aGVyZSdzIGEgcGF1c2VkIHR3ZWVuIG9uIHRoZSByb290LCB0aGUgZXhwb3J0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoYXQgdHdlZW4gaXMgdW5wYXVzZWQsIGJ1dCBpbWFnaW5lIGEgY2hpbGQgZ2V0cyByZXN0YXJ0ZWQgbGF0ZXIsIGFmdGVyIGFsbCBbdW5wYXVzZWRdIHR3ZWVucyBoYXZlIGNvbXBsZXRlZC4gVGhlIHN0YXJ0IG9mIHRoYXQgY2hpbGQgd291bGQgZ2V0IHB1c2hlZCBvdXQsIGJ1dCBvbmUgb2YgdGhlIGFuY2VzdG9ycyBtYXkgaGF2ZSBjb21wbGV0ZWQuXG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBhcmVudC5fdGltZSAhPT0gcGFyZW50Ll9zdGFydCArIChwYXJlbnQuX3RzID49IDAgPyBwYXJlbnQuX3RUaW1lIC8gcGFyZW50Ll90cyA6IChwYXJlbnQudG90YWxEdXJhdGlvbigpIC0gcGFyZW50Ll90VGltZSkgLyAtcGFyZW50Ll90cykpIHtcbiAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHB1dCBpdCBiYWNrIGludG8gaXRzIGxhc3QgcGFyZW50IChyZWNvcmRlZCBhcyBfZHAgZm9yIGV4YWN0bHkgY2FzZXMgbGlrZSB0aGlzKS4gTGltaXQgdG8gcGFyZW50cyB3aXRoIGF1dG9SZW1vdmVDaGlsZHJlbiAobGlrZSBnbG9iYWxUaW1lbGluZSkgc28gdGhhdCBpZiB0aGUgdXNlciBtYW51YWxseSByZW1vdmVzIGFuIGFuaW1hdGlvbiBmcm9tIGEgdGltZWxpbmUgYW5kIHRoZW4gYWx0ZXJzIGl0cyBwbGF5aGVhZCwgaXQgZG9lc24ndCBnZXQgYWRkZWQgYmFjayBpbi5cbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIF9wdExvb2t1cCBvbiBhIFR3ZWVuIGluc3RhbmNlIHRvIGVuc3VyZSBpdCBoYXMgYWN0dWFsbHkgZmluaXNoZWQgYmVpbmcgaW5zdGFudGlhdGVkLCBvdGhlcndpc2UgaWYgdGhpcy5yZXZlcnNlKCkgZ2V0cyBjYWxsZWQgaW4gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgaXQgY291bGQgdHJpZ2dlciBhIHJlbmRlcigpIGhlcmUgZXZlbiB0aG91Z2ggdGhlIF90YXJnZXRzIHdlcmVuJ3QgcG9wdWxhdGVkLCB0aHVzIHdoZW4gX2luaXQoKSBpcyBjYWxsZWQgdGhlcmUgd29uJ3QgYmUgYW55IFByb3BUd2VlbnMgKGl0J2xsIGFjdCBsaWtlIHRoZSB0d2VlbiBpcyBub24tZnVuY3Rpb25hbClcbiAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpOyAvLyBvdGhlcndpc2UsIGlmIGFuIGFuaW1hdGlvbiBpcyBwYXVzZWQsIHRoZW4gdGhlIHBsYXloZWFkIGlzIG1vdmVkIGJhY2sgdG8gemVybywgdGhlbiByZXN1bWVkLCBpdCdkIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB0aW1lIGF0IHRoZSBwYXVzZVxuICAgICAgLy9pZiAoIXRoaXMuX2xvY2spIHsgLy8gYXZvaWQgZW5kbGVzcyByZWN1cnNpb24gKG5vdCBzdXJlIHdlIG5lZWQgdGhpcyB5ZXQgb3IgaWYgaXQncyB3b3J0aCB0aGUgcGVyZm9ybWFuY2UgaGl0KVxuICAgICAgLy8gICB0aGlzLl9sb2NrID0gMTtcblxuICAgICAgX2xhenlTYWZlUmVuZGVyKHRoaXMsIF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKTsgLy8gICB0aGlzLl9sb2NrID0gMDtcbiAgICAgIC8vfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnRpbWUgPSBmdW5jdGlvbiB0aW1lKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUoTWF0aC5taW4odGhpcy50b3RhbER1cmF0aW9uKCksIHZhbHVlICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpKSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIHx8ICh2YWx1ZSA/IHRoaXMuX2R1ciA6IDApLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl90aW1lOyAvLyBub3RlOiBpZiB0aGUgbW9kdWx1cyByZXN1bHRzIGluIDAsIHRoZSBwbGF5aGVhZCBjb3VsZCBiZSBleGFjdGx5IGF0IHRoZSBlbmQgb3IgdGhlIGJlZ2lubmluZywgYW5kIHdlIGFsd2F5cyBkZWZlciB0byB0aGUgRU5EIHdpdGggYSBub24temVybyB2YWx1ZSwgb3RoZXJ3aXNlIGlmIHlvdSBzZXQgdGhlIHRpbWUoKSB0byB0aGUgdmVyeSBlbmQgKGR1cmF0aW9uKCkpLCBpdCB3b3VsZCByZW5kZXIgYXQgdGhlIFNUQVJUIVxuICB9O1xuXG4gIF9wcm90by50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24gdG90YWxQcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMudG90YWxEdXJhdGlvbigpICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMudG90YWxEdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdFRpbWUgLyB0aGlzLl90RHVyKSA6IHRoaXMucmF3VGltZSgpID49IDAgJiYgdGhpcy5faW5pdHRlZCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXdUaW1lKCkgPiAwID8gMSA6IDA7XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydHMgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIHJlY29yZGVkIHRpbWVTY2FsZS4gU3BlY2lhbCBjYXNlOiBpZiBzb21lb25lIGNhbGxzIHJldmVyc2UoKSBvbiBhbiBhbmltYXRpb24gd2l0aCB0aW1lU2NhbGUgb2YgMCwgd2UgYXNzaWduIGl0IC1fdGlueU51bSB0byByZW1lbWJlciBpdCdzIHJldmVyc2VkLlxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ydHMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgdFRpbWUgPSB0aGlzLnBhcmVudCAmJiB0aGlzLl90cyA/IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRoaXMucGFyZW50Ll90aW1lLCB0aGlzKSA6IHRoaXMuX3RUaW1lOyAvLyBtYWtlIHN1cmUgdG8gZG8gdGhlIHBhcmVudFRvQ2hpbGRUb3RhbFRpbWUoKSBCRUZPUkUgc2V0dGluZyB0aGUgbmV3IF90cyBiZWNhdXNlIHRoZSBvbGQgb25lIG11c3QgYmUgdXNlZCBpbiB0aGF0IGNhbGN1bGF0aW9uLlxuICAgIC8vIGZ1dHVyZSBhZGRpdGlvbj8gVXAgc2lkZTogZmFzdCBhbmQgbWluaW1hbCBmaWxlIHNpemUuIERvd24gc2lkZTogb25seSB3b3JrcyBvbiB0aGlzIGFuaW1hdGlvbjsgaWYgYSB0aW1lbGluZSBpcyByZXZlcnNlZCwgZm9yIGV4YW1wbGUsIGl0cyBjaGlsZHJlbnMnIG9uUmV2ZXJzZSB3b3VsZG4ndCBnZXQgY2FsbGVkLlxuICAgIC8vKCt2YWx1ZSA8IDAgJiYgdGhpcy5fcnRzID49IDApICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmV2ZXJzZVwiLCB0cnVlKTtcbiAgICAvLyBwcmlvcml0aXplIHJlbmRlcmluZyB3aGVyZSB0aGUgcGFyZW50J3MgcGxheWhlYWQgbGluZXMgdXAgaW5zdGVhZCBvZiB0aGlzLl90VGltZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIGEgdHdlZW4gdGhhdCdzIGFuaW1hdGluZyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIGluIHRoZSBzYW1lIHJlbmRlcmluZyBsb29wIChzYW1lIHBhcmVudCksIHRodXMgaWYgdGhlIHRpbWVTY2FsZSB0d2VlbiByZW5kZXJzIGZpcnN0LCBpdCB3b3VsZCBhbHRlciBfc3RhcnQgQkVGT1JFIF90VGltZSB3YXMgc2V0IG9uIHRoYXQgdGljayAoaW4gdGhlIHJlbmRlcmluZyBsb29wKSwgZWZmZWN0aXZlbHkgZnJlZXppbmcgaXQgdW50aWwgdGhlIHRpbWVTY2FsZSB0d2VlbiBmaW5pc2hlcy5cblxuICAgIHRoaXMuX3J0cyA9ICt2YWx1ZSB8fCAwO1xuICAgIHRoaXMuX3RzID0gdGhpcy5fcHMgfHwgdmFsdWUgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUgd2hpY2ggd291bGQgYmUgMCBpZiB0aGUgYW5pbWF0aW9uIGlzIHBhdXNlZC5cblxuICAgIHRoaXMudG90YWxUaW1lKF9jbGFtcCgtTWF0aC5hYnModGhpcy5fZGVsYXkpLCB0aGlzLl90RHVyLCB0VGltZSksIHN1cHByZXNzRXZlbnRzICE9PSBmYWxzZSk7XG5cbiAgICBfc2V0RW5kKHRoaXMpOyAvLyBpZiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgd2FzIGZhbHNlLCB0aGUgZW5kIHRpbWUgZGlkbid0IGdldCB1cGRhdGVkIGluIHRoZSBfYWxpZ25QbGF5aGVhZCgpIG1ldGhvZCwgc28gZG8gaXQgaGVyZS5cblxuXG4gICAgcmV0dXJuIF9yZWNhY2hlQW5jZXN0b3JzKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQodmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcztcbiAgICB9IC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiAtIGlmIGFuIGFuaW1hdGlvbiBpcyByZW1vdmVkIGZyb20gaXRzIHBhcmVudCBhbmQgdGhlbiAucmVzdGFydCgpIG9yIC5wbGF5KCkgb3IgLnJlc3VtZSgpIGlzIGNhbGxlZCwgcGVyaGFwcyB3ZSBzaG91bGQgZm9yY2UgaXQgYmFjayBpbnRvIHRoZSBnbG9iYWxUaW1lbGluZSBidXQgYmUgY2FyZWZ1bCBiZWNhdXNlIHdoYXQgaWYgaXQncyBhbHJlYWR5IGF0IGl0cyBlbmQ/IFdlIGRvbid0IHdhbnQgaXQgdG8ganVzdCBwZXJzaXN0IGZvcmV2ZXIgYW5kIG5vdCBnZXQgcmVsZWFzZWQgZm9yIEdDLlxuICAgIC8vICF0aGlzLnBhcmVudCAmJiAhdmFsdWUgJiYgdGhpcy5fdFRpbWUgPCB0aGlzLl90RHVyICYmIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiBfZ2xvYmFsVGltZWxpbmUuYWRkKHRoaXMpO1xuXG5cbiAgICBpZiAodGhpcy5fcHMgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9wcyA9IHZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcFRpbWUgPSB0aGlzLl90VGltZSB8fCBNYXRoLm1heCgtdGhpcy5fZGVsYXksIHRoaXMucmF3VGltZSgpKTsgLy8gaWYgdGhlIHBhdXNlIG9jY3VycyBkdXJpbmcgdGhlIGRlbGF5IHBoYXNlLCBtYWtlIHN1cmUgdGhhdCdzIGZhY3RvcmVkIGluIHdoZW4gcmVzdW1pbmcuXG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9hY3QgPSAwOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlLCBzbyBhIHBhdXNlZCB0d2VlbiB3b3VsZCBlZmZlY3RpdmVseSBoYXZlIGEgdGltZVNjYWxlIG9mIDAuIFdlIHJlY29yZCB0aGUgXCJyZWFsXCIgdGltZVNjYWxlIGFzIF9ydHMgKHJlY29yZGVkIHRpbWUgc2NhbGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfd2FrZSgpO1xuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fcnRzOyAvL29ubHkgZGVmZXIgdG8gX3BUaW1lIChwYXVzZVRpbWUpIGlmIHRUaW1lIGlzIHplcm8uIFJlbWVtYmVyLCBzb21lb25lIGNvdWxkIHBhdXNlKCkgYW4gYW5pbWF0aW9uLCB0aGVuIHNjcnViIHRoZSBwbGF5aGVhZCBhbmQgcmVzdW1lKCkuIElmIHRoZSBwYXJlbnQgZG9lc24ndCBoYXZlIHNtb290aENoaWxkVGltaW5nLCB3ZSByZW5kZXIgYXQgdGhlIHJhd1RpbWUoKSBiZWNhdXNlIHRoZSBzdGFydFRpbWUgd29uJ3QgZ2V0IHVwZGF0ZWQuXG5cbiAgICAgICAgdGhpcy50b3RhbFRpbWUodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nID8gdGhpcy5yYXdUaW1lKCkgOiB0aGlzLl90VGltZSB8fCB0aGlzLl9wVGltZSwgdGhpcy5wcm9ncmVzcygpID09PSAxICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3RUaW1lIC09IF90aW55TnVtKSk7IC8vIGVkZ2UgY2FzZTogYW5pbWF0aW9uLnByb2dyZXNzKDEpLnBhdXNlKCkucGxheSgpIHdvdWxkbid0IHJlbmRlciBhZ2FpbiBiZWNhdXNlIHRoZSBwbGF5aGVhZCBpcyBhbHJlYWR5IGF0IHRoZSBlbmQsIGJ1dCB0aGUgY2FsbCB0byB0b3RhbFRpbWUoKSBiZWxvdyB3aWxsIGFkZCBpdCBiYWNrIHRvIGl0cyBwYXJlbnQuLi5hbmQgbm90IHJlbW92ZSBpdCBhZ2FpbiAoc2luY2UgcmVtb3Zpbmcgb25seSBoYXBwZW5zIHVwb24gcmVuZGVyaW5nIGF0IGEgbmV3IHRpbWUpLiBPZmZzZXR0aW5nIHRoZSBfdFRpbWUgc2xpZ2h0bHkgaXMgZG9uZSBzaW1wbHkgdG8gY2F1c2UgdGhlIGZpbmFsIHJlbmRlciBpbiB0b3RhbFRpbWUoKSB0aGF0J2xsIHBvcCBpdCBvZmYgaXRzIHRpbWVsaW5lIChpZiBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSwgb2YgY291cnNlKS4gQ2hlY2sgdG8gbWFrZSBzdXJlIF96VGltZSBpc24ndCAtX3RpbnlOdW0gdG8gYXZvaWQgYW4gZWRnZSBjYXNlIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBwdXNoZWQgdG8gdGhlIGVuZCBidXQgSU5TSURFIGEgdHdlZW4vY2FsbGJhY2ssIHRoZSB0aW1lbGluZSBpdHNlbGYgaXMgcGF1c2VkIHRodXMgaGFsdGluZyByZW5kZXJpbmcgYW5kIGxlYXZpbmcgYSBmZXcgdW5yZW5kZXJlZC4gV2hlbiByZXN1bWluZywgaXQgd291bGRuJ3QgcmVuZGVyIHRob3NlIG90aGVyd2lzZS5cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uc3RhcnRUaW1lID0gZnVuY3Rpb24gc3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gdmFsdWU7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7XG4gICAgICBwYXJlbnQgJiYgKHBhcmVudC5fc29ydCB8fCAhdGhpcy5wYXJlbnQpICYmIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgdGhpcywgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gIH07XG5cbiAgX3Byb3RvLmVuZFRpbWUgPSBmdW5jdGlvbiBlbmRUaW1lKGluY2x1ZGVSZXBlYXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0ICsgKF9pc05vdEZhbHNlKGluY2x1ZGVSZXBlYXRzKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIE1hdGguYWJzKHRoaXMuX3RzIHx8IDEpO1xuICB9O1xuXG4gIF9wcm90by5yYXdUaW1lID0gZnVuY3Rpb24gcmF3VGltZSh3cmFwUmVwZWF0cykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDsgLy8gX2RwID0gZGV0YWNoZWQgcGFyZW50XG5cbiAgICByZXR1cm4gIXBhcmVudCA/IHRoaXMuX3RUaW1lIDogd3JhcFJlcGVhdHMgJiYgKCF0aGlzLl90cyB8fCB0aGlzLl9yZXBlYXQgJiYgdGhpcy5fdGltZSAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpID8gdGhpcy5fdFRpbWUgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSA6ICF0aGlzLl90cyA/IHRoaXMuX3RUaW1lIDogX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50LnJhd1RpbWUod3JhcFJlcGVhdHMpLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgY29uZmlnID0gX3JldmVydENvbmZpZztcbiAgICB9XG5cbiAgICB2YXIgcHJldklzUmV2ZXJ0aW5nID0gX3JldmVydGluZztcbiAgICBfcmV2ZXJ0aW5nID0gY29uZmlnO1xuXG4gICAgaWYgKHRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fc3RhcnRBdCkge1xuICAgICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJldmVydChjb25maWcpO1xuICAgICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIGNvbmZpZy5raWxsICE9PSBmYWxzZSAmJiB0aGlzLmtpbGwoKTtcbiAgICBfcmV2ZXJ0aW5nID0gcHJldklzUmV2ZXJ0aW5nO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nbG9iYWxUaW1lID0gZnVuY3Rpb24gZ2xvYmFsVGltZShyYXdUaW1lKSB7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID8gcmF3VGltZSA6IGFuaW1hdGlvbi5yYXdUaW1lKCk7XG5cbiAgICB3aGlsZSAoYW5pbWF0aW9uKSB7XG4gICAgICB0aW1lID0gYW5pbWF0aW9uLl9zdGFydCArIHRpbWUgLyAoTWF0aC5hYnMoYW5pbWF0aW9uLl90cykgfHwgMSk7XG4gICAgICBhbmltYXRpb24gPSBhbmltYXRpb24uX2RwO1xuICAgIH1cblxuICAgIHJldHVybiAhdGhpcy5wYXJlbnQgJiYgdGhpcy5fc2F0ID8gdGhpcy5fc2F0Lmdsb2JhbFRpbWUocmF3VGltZSkgOiB0aW1lOyAvLyB0aGUgX3N0YXJ0QXQgdHdlZW5zIGZvciAuZnJvbVRvKCkgYW5kIC5mcm9tKCkgdGhhdCBoYXZlIGltbWVkaWF0ZVJlbmRlciBzaG91bGQgYWx3YXlzIGJlIEZJUlNUIGluIHRoZSB0aW1lbGluZSAoaW1wb3J0YW50IGZvciBjb250ZXh0LnJldmVydCgpKS4gXCJfc2F0XCIgc3RhbmRzIGZvciBfc3RhcnRBdFR3ZWVuLCByZWZlcnJpbmcgdG8gdGhlIHBhcmVudCB0d2VlbiB0aGF0IGNyZWF0ZWQgdGhlIF9zdGFydEF0LiBXZSBtdXN0IGRpc2Nlcm4gaWYgdGhhdCB0d2VlbiBoYWQgaW1tZWRpYXRlUmVuZGVyIHNvIHRoYXQgd2UgY2FuIGtub3cgd2hldGhlciBvciBub3QgdG8gcHJpb3JpdGl6ZSBpdCBpbiByZXZlcnQoKS5cbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB0aGlzLnBsYXkoKS50b3RhbFRpbWUoaW5jbHVkZURlbGF5ID8gLXRoaXMuX2RlbGF5IDogMCwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgICB0aGlzLl9kdXIgfHwgKHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gZW5zdXJlcyBvbkNvbXBsZXRlIGZpcmVzIG9uIGEgemVyby1kdXJhdGlvbiBhbmltYXRpb24gdGhhdCBnZXRzIHJlc3RhcnRlZC5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9yb3VuZFByZWNpc2UodFRpbWUgLyBjeWNsZUR1cmF0aW9uKTsgLy8gZnVsbCBkZWNpbWFsIHZlcnNpb24gb2YgaXRlcmF0aW9ucywgbm90IHRoZSBwcmV2aW91cyBpdGVyYXRpb24gKHdlJ3JlIHJldXNpbmcgcHJldkl0ZXJhdGlvbiB2YXJpYWJsZSBmb3IgZWZmaWNpZW5jeSlcblxuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+cHJldkl0ZXJhdGlvbjtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcbiAgICAgICAgIXByZXZUaW1lICYmIHRoaXMuX3RUaW1lICYmIHByZXZJdGVyYXRpb24gIT09IGl0ZXJhdGlvbiAmJiB0aGlzLl90VGltZSAtIHByZXZJdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uIC0gdGhpcy5fZHVyIDw9IDAgJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMzgyMy1jbG9zaW5nLW5hdi1hbmltYXRpb24tbm90LXdvcmtpbmctb24taWUtYW5kLWlwaG9uZS02LW1heWJlLW90aGVyLW9sZGVyLWJyb3dzZXIvP3RhYj1jb21tZW50cyNjb21tZW50LTExMzAwNSBhbHNvLCB0aGlzLl90VGltZSAtIHByZXZJdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uIC0gdGhpcy5fZHVyIDw9IDAganVzdCBjaGVja3MgdG8gbWFrZSBzdXJlIGl0IHdhc24ndCBwcmV2aW91c2x5IGluIHRoZSBcInJlcGVhdERlbGF5XCIgcG9ydGlvblxuXG4gICAgICAgIGlmICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpIHtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICBpc1lveW8gPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIG1ha2Ugc3VyZSBjaGlsZHJlbiBhdCB0aGUgZW5kL2JlZ2lubmluZyBvZiB0aGUgdGltZWxpbmUgYXJlIHJlbmRlcmVkIHByb3Blcmx5LiBJZiwgZm9yIGV4YW1wbGUsXG4gICAgICAgIGEgMy1zZWNvbmQgbG9uZyB0aW1lbGluZSByZW5kZXJlZCBhdCAyLjkgc2Vjb25kcyBwcmV2aW91c2x5LCBhbmQgbm93IHJlbmRlcnMgYXQgMy4yIHNlY29uZHMgKHdoaWNoXG4gICAgICAgIHdvdWxkIGdldCB0cmFuc2xhdGVkIHRvIDIuOCBzZWNvbmRzIGlmIHRoZSB0aW1lbGluZSB5b3lvcyBvciAwLjIgc2Vjb25kcyBpZiBpdCBqdXN0IHJlcGVhdHMpLCB0aGVyZVxuICAgICAgICBjb3VsZCBiZSBhIGNhbGxiYWNrIG9yIGEgc2hvcnQgdHdlZW4gdGhhdCdzIGF0IDIuOTUgb3IgMyBzZWNvbmRzIGluIHdoaWNoIHdvdWxkbid0IHJlbmRlci4gU29cbiAgICAgICAgd2UgbmVlZCB0byBwdXNoIHRoZSB0aW1lbGluZSB0byB0aGUgZW5kIChhbmQvb3IgYmVnaW5uaW5nIGRlcGVuZGluZyBvbiBpdHMgeW95byB2YWx1ZSkuIEFsc28gd2UgbXVzdFxuICAgICAgICBlbnN1cmUgdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSBUaW1lbGluZSB3b3JrLlxuICAgICAgICAqL1xuXG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgIHZhciByZXdpbmRpbmcgPSB5b3lvICYmIHByZXZJdGVyYXRpb24gJiAxLFxuICAgICAgICAgICAgICBkb2VzV3JhcCA9IHJld2luZGluZyA9PT0gKHlveW8gJiYgaXRlcmF0aW9uICYgMSk7XG4gICAgICAgICAgaXRlcmF0aW9uIDwgcHJldkl0ZXJhdGlvbiAmJiAocmV3aW5kaW5nID0gIXJld2luZGluZyk7XG4gICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyAwIDogdFRpbWUgJSBkdXIgPyBkdXIgOiB0VGltZTsgLy8gaWYgdGhlIHBsYXloZWFkIGlzIGxhbmRpbmcgZXhhY3RseSBhdCB0aGUgZW5kIG9mIGFuIGl0ZXJhdGlvbiwgdXNlIHRoYXQgdG90YWxUaW1lIHJhdGhlciB0aGFuIG9ubHkgdGhlIGR1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc2tpcCB0aGUgMm5kIHJlbmRlciBzaW5jZSBpdCdzIGVmZmVjdGl2ZWx5IGF0IHRoZSBzYW1lIHRpbWUuXG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMTtcbiAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSB8fCAoaXNZb3lvID8gMCA6IF9yb3VuZFByZWNpc2UoaXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbikpLCBzdXBwcmVzc0V2ZW50cywgIWR1cikuX2xvY2sgPSAwO1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7IC8vIGlmIGEgdXNlciBnZXRzIHRoZSBpdGVyYXRpb24oKSBpbnNpZGUgdGhlIG9uUmVwZWF0LCBmb3IgZXhhbXBsZSwgaXQgc2hvdWxkIGJlIGFjY3VyYXRlLlxuXG4gICAgICAgICAgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgKHRoaXMuaW52YWxpZGF0ZSgpLl9sb2NrID0gMSk7XG5cbiAgICAgICAgICBpZiAocHJldlRpbWUgJiYgcHJldlRpbWUgIT09IHRoaXMuX3RpbWUgfHwgcHJldlBhdXNlZCAhPT0gIXRoaXMuX3RzIHx8IHRoaXMudmFycy5vblJlcGVhdCAmJiAhdGhpcy5wYXJlbnQgJiYgIXRoaXMuX2FjdCkge1xuICAgICAgICAgICAgLy8gaWYgcHJldlRpbWUgaXMgMCBhbmQgd2UgcmVuZGVyIGF0IHRoZSB2ZXJ5IGVuZCwgX3RpbWUgd2lsbCBiZSB0aGUgZW5kLCB0aHVzIHdvbid0IG1hdGNoLiBTbyBpbiB0aGlzIGVkZ2UgY2FzZSwgcHJldlRpbWUgd29uJ3QgbWF0Y2ggX3RpbWUgYnV0IHRoYXQncyBva2F5LiBJZiBpdCBnZXRzIGtpbGxlZCBpbiB0aGUgb25SZXBlYXQsIGVqZWN0IGFzIHdlbGwuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkdXIgPSB0aGlzLl9kdXI7IC8vIGluIGNhc2UgdGhlIGR1cmF0aW9uIGNoYW5nZWQgaW4gdGhlIG9uUmVwZWF0XG5cbiAgICAgICAgICB0RHVyID0gdGhpcy5fdER1cjtcblxuICAgICAgICAgIGlmIChkb2VzV3JhcCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IDI7XG4gICAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IGR1ciA6IC0wLjAwMDE7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSAvL2luIG9yZGVyIGZvciB5b3lvRWFzZSB0byB3b3JrIHByb3Blcmx5IHdoZW4gdGhlcmUncyBhIHN0YWdnZXIsIHdlIG11c3Qgc3dhcCBvdXQgdGhlIGVhc2UgaW4gZWFjaCBzdWItdHdlZW4uXG5cblxuICAgICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZSh0aGlzLCBpc1lveW8pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZyAmJiB0aGlzLl9sb2NrIDwgMikge1xuICAgICAgICBwYXVzZVR3ZWVuID0gX2ZpbmROZXh0UGF1c2VUd2Vlbih0aGlzLCBfcm91bmRQcmVjaXNlKHByZXZUaW1lKSwgX3JvdW5kUHJlY2lzZSh0aW1lKSk7XG5cbiAgICAgICAgaWYgKHBhdXNlVHdlZW4pIHtcbiAgICAgICAgICB0VGltZSAtPSB0aW1lIC0gKHRpbWUgPSBwYXVzZVR3ZWVuLl9zdGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgICAgdGhpcy5fYWN0ID0gIXRpbWVTY2FsZTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICB0aGlzLl9vblVwZGF0ZSA9IHRoaXMudmFycy5vblVwZGF0ZTtcbiAgICAgICAgdGhpcy5faW5pdHRlZCA9IDE7XG4gICAgICAgIHRoaXMuX3pUaW1lID0gdG90YWxUaW1lO1xuICAgICAgICBwcmV2VGltZSA9IDA7IC8vIHVwb24gaW5pdCwgdGhlIHBsYXloZWFkIHNob3VsZCBhbHdheXMgZ28gZm9yd2FyZDsgc29tZW9uZSBjb3VsZCBpbnZhbGlkYXRlKCkgYSBjb21wbGV0ZWQgdGltZWxpbmUgYW5kIHRoZW4gaWYgdGhleSByZXN0YXJ0KCksIHRoYXQgd291bGQgbWFrZSBjaGlsZCB0d2VlbnMgcmVuZGVyIGluIHJldmVyc2Ugb3JkZXIgd2hpY2ggY291bGQgbG9jayBpbiB0aGUgd3Jvbmcgc3RhcnRpbmcgdmFsdWVzIGlmIHRoZXkgYnVpbGQgb24gZWFjaCBvdGhlciwgbGlrZSB0bC50byhvYmosIHt4OiAxMDB9KS50byhvYmosIHt4OiAwfSkuXG4gICAgICB9XG5cbiAgICAgIGlmICghcHJldlRpbWUgJiYgdGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBmbGFnIHpUaW1lIGFzIG5lZ2F0aXZlIHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgKGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydEF0KSk7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzIG9mIGluaXR0ZWQgdHdlZW5zIChidXQgcmVtZW1iZXIgdGhhdCAuZnJvbVRvKCkgb3IgLmZyb20oKSBtYXkgaGF2ZSBhIF9zdGFydEF0IGJ1dCBub3QgX2luaXR0ZWQgeWV0KS4gSWYsIGZvciBleGFtcGxlLCBhIC5mcm9tVG8oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciAod2hpY2ggY3JlYXRlcyBhbiBpbnRlcm5hbCB0aW1lbGluZSkgZ2V0cyByZXZlcnRlZCBCRUZPUkUgc29tZSBvZiBpdHMgY2hpbGQgdHdlZW5zIHJlbmRlciBmb3IgdGhlIGZpcnN0IHRpbWUsIGl0IG1heSBub3QgcHJvcGVybHkgdHJpZ2dlciB0aGVtIHRvIHJldmVydC5cblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBjaGlsZC5wYXJlbnQgPT09IHRoaXMgJiYgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5felRpbWUgPCAwICYmIHByZXZTdGFydEF0LnByb2dyZXNzKDEpOyAvLyBpbiBjYXNlIGl0J3MgYSBsYXp5IHN0YXJ0QXQgdGhhdCBoYXNuJ3QgcmVuZGVyZWQgeWV0LlxuXG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZ05vS2lsbCA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6ICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhIExpa2Ugd2hlbiByZXZlcnQoKSBpcyBjYWxsZWQgYW5kIHRvdGFsVGltZSgpIGdldHMgc2V0LlxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpLiBfc2F0IHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlblxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgIC8vIGNoZWNrIHRUaW1lIGhlcmUgYmVjYXVzZSBpbiB0aGUgY2FzZSBvZiBhIHlveW8gdHdlZW4gd2hvc2UgcGxheWhlYWQgZ2V0cyBwdXNoZWQgdG8gdGhlIGVuZCBsaWtlIHR3ZWVuLnByb2dyZXNzKDEpLCB3ZSBzaG91bGQgYWxsb3cgaXQgdGhyb3VnaCBzbyB0aGF0IHRoZSBvbkNvbXBsZXRlIGdldHMgZmlyZWQgcHJvcGVybHkuXG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTogZ3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pLCBzdGFnZ2VyOiAwLjV9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhXG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gc2tpcFJlY3Vyc2lvbiA/IF93YXJuKHByb3BlcnR5ICsgXCIgbm90IGVsaWdpYmxlIGZvciByZXNldFwiKSA6IDE7IC8vIGlmIHNvbWVvbmUgdHJpZXMgdG8gZG8gYSBxdWlja1RvKCkgb24gYSBzcGVjaWFsIHByb3BlcnR5IGxpa2UgYm9yZGVyUmFkaXVzIHdoaWNoIG11c3QgZ2V0IHNwbGl0IGludG8gNCBkaWZmZXJlbnQgcHJvcGVydGllcywgdGhhdCdzIG5vdCBlbGlnaWJsZSBmb3IgLnJlc2V0VG8oKS5cbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3NhcC5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICB0YXJnZXRzOiBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogcGFyc2VkVGFyZ2V0c1xuICAgICAgfSk7IC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIHRhcmdldHMgYmVjYXVzZSBmb3Igc3RhZ2dlcnMgYW5kIGtleWZyYW1lcywgd2UgZW5kIHVwIGNyZWF0aW5nIGFuIGluZGl2aWR1YWwgdHdlZW4gZm9yIGVhY2ggYnV0IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBuZWVkIHRvIGtub3cgdGhlIGluZGV4IGFuZCB0aGUgd2hvbGUgQXJyYXkgb2YgdGFyZ2V0cy5cblxuICAgICAgdGwua2lsbCgpO1xuICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgaWYgKHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgIHRsLl9lYXNlID0gX2Vhc2VNYXAubm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgdjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGwuZHVyYXRpb24oKTsgLy8gdG8gZW5zdXJlIHRsLl9kdXIgaXMgY2FjaGVkIGJlY2F1c2Ugd2UgdGFwIGludG8gaXQgZm9yIHBlcmZvcm1hbmNlIHB1cnBvc2VzIGluIHRoZSByZW5kZXIoKSBtZXRob2QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIGtleWZyYW1lcykge1xuICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gY29weSkge1xuICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2YgPSBhW2ldO1xuICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IChrZi50IC0gKGkgPyBhW2kgLSAxXS50IDogMCkpIC8gMTAwICogZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgIHRsLnRvKHBhcnNlZFRhcmdldHMsIHYsIHRpbWUpO1xuICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgfSk7IC8vIGluIGNhc2Uga2V5ZnJhbWVzIGRpZG4ndCBnbyB0byAxMDAlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUgfHwgdGhpcy5fbGF6eSkge1xuICAgICAgLy8gdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZJdGVyYXRpb24gPSBfcm91bmRQcmVjaXNlKHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7IC8vIGZ1bGwgZGVjaW1hbCB2ZXJzaW9uIG9mIGl0ZXJhdGlvbnMsIG5vdCB0aGUgcHJldmlvdXMgaXRlcmF0aW9uICh3ZSdyZSByZXVzaW5nIHByZXZJdGVyYXRpb24gdmFyaWFibGUgZm9yIGVmZmljaWVuY3kpXG5cbiAgICAgICAgICBpdGVyYXRpb24gPSB+fnByZXZJdGVyYXRpb247XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGltZSA+IGR1cikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQgJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrICYmIHRpbWUgIT09IGN5Y2xlRHVyYXRpb24gJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgICAgLy8gdGhpcy5fdGltZSB3aWxsID09PSBjeWNsZUR1cmF0aW9uIHdoZW4gd2UgcmVuZGVyIGF0IEVYQUNUTFkgdGhlIGVuZCBvZiBhbiBpdGVyYXRpb24uIFdpdGhvdXQgdGhpcyBjb25kaXRpb24sIGl0J2Qgb2Z0ZW4gZG8gdGhlIHJlcGVhdFJlZnJlc2ggcmVuZGVyIFRXSUNFIChhZ2FpbiBvbiB0aGUgdmVyeSBuZXh0IHRpY2spLlxuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmICEoZm9yY2UgJiYgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSkge1xuICAgICAgICAgIC8vIHJhcmUgZWRnZSBjYXNlIC0gZHVyaW5nIGluaXRpYWxpemF0aW9uLCBhbiBvblVwZGF0ZSBpbiB0aGUgX3N0YXJ0QXQgKC5mcm9tVG8oKSkgbWlnaHQgZm9yY2UgdGhpcyB0d2VlbiB0byByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkaXRjaCB0aGlzIHJlbmRlcigpIGNhbGwgc28gdGhhdCBpdCBkb2Vzbid0IHJldmVydCB0aGUgdmFsdWVzLiBCdXQgd2UgYWxzbyBkb24ndCB3YW50IHRvIGR1bXAgaWYgd2UncmUgZG9pbmcgYSByZXBlYXRSZWZyZXNoIHJlbmRlciFcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnJlbmRlcih0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZWxpbmUuX2R1ciAqIHRpbWVsaW5lLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHx8IHRoaXMuX3N0YXJ0QXQgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcblxuICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHdlJ3JlIHJlbmRlcmluZyBhdCBleGFjdGx5IGEgdGltZSBvZiAwLCBhcyB0aGVyZSBjb3VsZCBiZSBhdXRvUmV2ZXJ0IHZhbHVlcyB0aGF0IHNob3VsZCBnZXQgc2V0IG9uIHRoZSBuZXh0IHRpY2sgKGlmIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnRUaW1lLCBuZWdhdGl2ZSB0b3RhbFRpbWUpLiBEb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEoaXNOZWdhdGl2ZSAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCBpc1lveW8pKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAvLyBcInNvZnRcIiBnaXZlcyB1cyBhIHdheSB0byBjbGVhciBvdXQgZXZlcnl0aGluZyBFWENFUFQgdGhlIHJlY29yZGVkIHByZS1cImZyb21cIiBwb3J0aW9uIG9mIGZyb20oKSB0d2VlbnMuIE90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGlmIHlvdSB0d2Vlbi5wcm9ncmVzcygxKS5yZW5kZXIoMCwgdHJ1ZSB0cnVlKS5pbnZhbGlkYXRlKCksIHRoZSBcImZyb21cIiB2YWx1ZXMgd291bGQgcGVyc2lzdCBhbmQgdGhlbiBvbiB0aGUgbmV4dCByZW5kZXIsIHRoZSBmcm9tKCkgdHdlZW5zIHdvdWxkIGluaXRpYWxpemUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIG1hdGNoIHRoZSBcImZyb21cIiB2YWx1ZXMsIHRodXMgYW5pbWF0ZSBmcm9tIHRoZSBzYW1lIHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlIChubyBhbmltYXRpb24pLiBXZSB0YXAgaW50byB0aGlzIGluIFNjcm9sbFRyaWdnZXIncyByZWZyZXNoKCkgd2hlcmUgd2UgbXVzdCBwdXNoIGEgdHdlZW4gdG8gY29tcGxldGlvbiBhbmQgdGhlbiBiYWNrIGFnYWluIGJ1dCBob25vciBpdHMgaW5pdCBzdGF0ZSBpbiBjYXNlIHRoZSB0d2VlbiBpcyBkZXBlbmRlbnQgb24gYW5vdGhlciB0d2VlbiBmdXJ0aGVyIHVwIG9uIHRoZSBwYWdlLlxuICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgc2tpcFJlY3Vyc2lvbikge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgMSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcy5zY3JvbGxUcmlnZ2VyICYmIHRoaXMuc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7IC8vIHdlIG11c3QgdXNlIG9uUmV2ZXJzZUNvbXBsZXRlIHRvbyBmb3IgdGhpbmdzIGxpa2UgdGltZWxpbmUuYWRkKCgpID0+IHsuLi59KSB3aGljaCBzaG91bGQgYmUgdHJpZ2dlcmVkIGluIEJPVEggZGlyZWN0aW9ucyAoZm9yd2FyZCBhbmQgcmV2ZXJzZSlcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gIH07XG5cbiAgVHdlZW4ua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICB9O1xuXG4gIHJldHVybiBUd2Vlbjtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICBfdGFyZ2V0czogW10sXG4gIF9sYXp5OiAwLFxuICBfc3RhcnRBdDogMCxcbiAgX29wOiAwLFxuICBfb25Jbml0OiAwXG59KTsgLy9hZGQgdGhlIHBlcnRpbmVudCB0aW1lbGluZSBtZXRob2RzIHRvIFR3ZWVuIGluc3RhbmNlcyBzbyB0aGF0IHVzZXJzIGNhbiBjaGFpbiBjb252ZW5pZW50bHkgYW5kIGNyZWF0ZSBhIHRpbWVsaW5lIGF1dG9tYXRpY2FsbHkuIChyZW1vdmVkIGR1ZSB0byBjb25jZXJucyB0aGF0IGl0J2QgdWx0aW1hdGVseSBhZGQgdG8gbW9yZSBjb25mdXNpb24gZXNwZWNpYWxseSBmb3IgYmVnaW5uZXJzKVxuLy8gX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sc2V0LGNhbGwsYWRkLGFkZExhYmVsLGFkZFBhdXNlXCIsIG5hbWUgPT4ge1xuLy8gXHRUd2Vlbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbi8vIFx0XHRsZXQgdGwgPSBuZXcgVGltZWxpbmUoKTtcbi8vIFx0XHRyZXR1cm4gX2FkZFRvVGltZWxpbmUodGwsIHRoaXMpW25hbWVdLmFwcGx5KHRsLCB0b0FycmF5KGFyZ3VtZW50cykpO1xuLy8gXHR9XG4vLyB9KTtcbi8vZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIExldmVyYWdlIHRoZSB0aW1lbGluZSBjYWxscy5cblxuXG5fZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICBUd2VlbltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHBhcmFtcy5zcGxpY2UobmFtZSA9PT0gXCJzdGFnZ2VyRnJvbVRvXCIgPyA1IDogNCwgMCwgMCk7XG4gICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICB9O1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBST1BUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xufSxcbiAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgIHMgPSBcIlwiO1xuXG4gIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgLy9iID0gYmVnaW5uaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmI7XG4gIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgLy9lID0gZW5kaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmU7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBzID0gcHQucCArIChwdC5tID8gcHQubShwdC5zICsgcHQuYyAqIHJhdGlvKSA6IE1hdGgucm91bmQoKHB0LnMgKyBwdC5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDApICsgczsgLy93ZSB1c2UgdGhlIFwicFwiIHByb3BlcnR5IGZvciB0aGUgdGV4dCBpbmJldHdlZW4gKGxpa2UgYSBzdWZmaXgpLiBBbmQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb21wbGV4IHN0cmluZywgdGhlIG1vZGlmaWVyIChtKSBpcyB0eXBpY2FsbHkganVzdCBNYXRoLnJvdW5kKCksIGxpa2UgZm9yIFJHQiBjb2xvcnMuXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcyArPSBkYXRhLmM7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBjaHVuayBvZiBub24tbnVtZXJpYyB0ZXh0LlxuICB9XG5cbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHMsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cbn0sXG4gICAgX2FkZFBsdWdpbk1vZGlmaWVyID0gZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICBwdCA9IG5leHQ7XG4gIH1cbn0sXG4gICAgX2tpbGxQcm9wVHdlZW5zT2YgPSBmdW5jdGlvbiBfa2lsbFByb3BUd2VlbnNPZihwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgaWYgKHB0LnAgPT09IHByb3BlcnR5ICYmICFwdC5vcCB8fCBwdC5vcCA9PT0gcHJvcGVydHkpIHtcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcgPSAxO1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xufSxcbiAgICBfc2V0dGVyV2l0aE1vZGlmaWVyID0gZnVuY3Rpb24gX3NldHRlcldpdGhNb2RpZmllcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbn0sXG4gICAgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSA9IGZ1bmN0aW9uIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkocGFyZW50KSB7XG4gIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICBuZXh0LFxuICAgICAgcHQyLFxuICAgICAgZmlyc3QsXG4gICAgICBsYXN0OyAvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byBkbyB0aGVpciB3b3JrIGFmdGVyIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyB3ZXJlIGNyZWF0ZWQgKGxpa2UgUm91bmRQcm9wc1BsdWdpbiBhbmQgTW9kaWZpZXJzUGx1Z2luKVxuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdDIgPSBmaXJzdDtcblxuICAgIHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcbiAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSB7XG4gICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IHB0O1xuICAgIH1cblxuICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgcHQyLl9wcmV2ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBwdDtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICBwYXJlbnQuX3B0ID0gZmlyc3Q7XG59OyAvL1Byb3BUd2VlbiBrZXk6IHQgPSB0YXJnZXQsIHAgPSBwcm9wLCByID0gcmVuZGVyZXIsIGQgPSBkYXRhLCBzID0gc3RhcnQsIGMgPSBjaGFuZ2UsIG9wID0gb3ZlcndyaXRlUHJvcGVydHkgKE9OTFkgcG9wdWxhdGVkIHdoZW4gaXQncyBkaWZmZXJlbnQgdGhhbiBwKSwgcHIgPSBwcmlvcml0eSwgX25leHQvX3ByZXYgZm9yIHRoZSBsaW5rZWQgbGlzdCBzaWJsaW5ncywgc2V0ID0gc2V0dGVyLCBtID0gbW9kaWZpZXIsIG1TZXQgPSBtb2RpZmllclNldHRlciAodGhlIG9yaWdpbmFsIHNldHRlciwgYmVmb3JlIGEgbW9kaWZpZXIgd2FzIGFkZGVkKVxuXG5cbmV4cG9ydCB2YXIgUHJvcFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zID0gc3RhcnQ7XG4gICAgdGhpcy5jID0gY2hhbmdlO1xuICAgIHRoaXMucCA9IHByb3A7XG4gICAgdGhpcy5yID0gcmVuZGVyZXIgfHwgX3JlbmRlclBsYWluO1xuICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgdGhpcy5wciA9IHByaW9yaXR5IHx8IDA7XG4gICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBQcm9wVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0OyAvL2luIGNhc2UgaXQgd2FzIGFscmVhZHkgc2V0IChhIFByb3BUd2VlbiBjYW4gb25seSBoYXZlIG9uZSBtb2RpZmllcilcblxuICAgIHRoaXMuc2V0ID0gX3NldHRlcldpdGhNb2RpZmllcjtcbiAgICB0aGlzLm0gPSBmdW5jO1xuICAgIHRoaXMubXQgPSB0YXJnZXQ7IC8vbW9kaWZpZXIgdGFyZ2V0XG5cbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gIH07XG5cbiAgcmV0dXJuIFByb3BUd2Vlbjtcbn0oKTsgLy9Jbml0aWFsaXphdGlvbiB0YXNrc1xuXG5fZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG59KTtcblxuX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2Vlbjtcbl9nbG9iYWxzLlRpbWVsaW5lTGl0ZSA9IF9nbG9iYWxzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG5fZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICBkZWZhdWx0czogX2RlZmF1bHRzLFxuICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gIGlkOiBcInJvb3RcIixcbiAgc21vb3RoQ2hpbGRUaW1pbmc6IHRydWVcbn0pO1xuX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbnZhciBfbWVkaWEgPSBbXSxcbiAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfbGFzdE1lZGlhVGltZSA9IDAsXG4gICAgX2NvbnRleHRJRCA9IDAsXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIChfbGlzdGVuZXJzW3R5cGVdIHx8IF9lbXB0eUFycmF5KS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KTtcbn0sXG4gICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgIHRvZ2dsZWQ7XG5cbiAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cblxuICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICBjb25kaXRpb25zW3BdID0gbWF0Y2g7XG4gICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgYW55TWF0Y2ggJiYgbWF0Y2hlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVJldmVydFwiKTtcblxuICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMub25NYXRjaChjLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICByZXR1cm4gYy5hZGQobnVsbCwgZnVuYyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICB9XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuX3IgPSBbXTsgLy8gcmV0dXJuZWQvY2xlYW51cCBmdW5jdGlvbnNcblxuICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaWQgPSBfY29udGV4dElEKys7IC8vIHRvIHdvcmsgYXJvdW5kIGlzc3VlcyB0aGF0IGZyYW1ld29ya3MgbGlrZSBWdWUgY2F1c2UgYnkgbWFraW5nIHRoaW5ncyBpbnRvIFByb3hpZXMgd2hpY2ggbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGRvIHNvbWV0aGluZyBsaWtlIF9tZWRpYS5pbmRleE9mKHRoaXMpIGJlY2F1c2UgXCJ0aGlzXCIgd291bGQgbm8gbG9uZ2VyIHJlZmVyIHRvIHRoZSBDb250ZXh0IGluc3RhbmNlIGl0c2VsZiAtIGl0J2QgcmVmZXIgdG8gYSBQcm94eSEgV2UgbmVlZGVkIGEgd2F5IHRvIGlkZW50aWZ5IHRoZSBjb250ZXh0IHVuaXF1ZWx5XG5cbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiBpZiB3ZSBuZWVkIHRoZSBhYmlsaXR5IHRvIGFkZCgpIGFuIGFuaW1hdGlvbiB0byBhIGNvbnRleHQgYW5kIGZvciB3aGF0ZXZlciByZWFzb24gY2Fubm90IGNyZWF0ZSB0aGF0IGFuaW1hdGlvbiBpbnNpZGUgb2YgYSBjb250ZXh0LmFkZCgoKSA9PiB7Li4ufSkgZnVuY3Rpb24uXG4gICAgLy8gaWYgKG5hbWUgJiYgX2lzRnVuY3Rpb24obmFtZS5yZXZlcnQpKSB7XG4gICAgLy8gXHR0aGlzLmRhdGEucHVzaChuYW1lKTtcbiAgICAvLyBcdHJldHVybiAobmFtZS5fY3R4ID0gdGhpcyk7XG4gICAgLy8gfVxuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICBfY29udGV4dCA9IHNlbGY7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2VsZi5sYXN0ID0gZjtcbiAgICByZXR1cm4gbmFtZSA9PT0gX2lzRnVuY3Rpb24gPyBmKHNlbGYsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICByZXR1cm4gc2VsZi5hZGQobnVsbCwgZnVuYyk7XG4gICAgfSkgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0d2VlbnMgPSBfdGhpczQuZ2V0VHdlZW5zKCksXG4gICAgICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gRmxpcCBwbHVnaW4gdHdlZW5zIGFyZSB2ZXJ5IGRpZmZlcmVudCBpbiB0aGF0IHRoZXkgc2hvdWxkIGFjdHVhbGx5IGJlIHB1c2hlZCB0byB0aGVpciBlbmQuIFRoZSBwbHVnaW4gcmVwbGFjZXMgdGhlIHRpbWVsaW5lJ3MgLnJldmVydCgpIG1ldGhvZCB0byBkbyBleGFjdGx5IHRoYXQuIEJ1dCB3ZSBhbHNvIG5lZWQgdG8gcmVtb3ZlIGFueSBvZiB0aG9zZSBuZXN0ZWQgdHdlZW5zIGluc2lkZSB0aGUgZmxpcCB0aW1lbGluZSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGluZGl2aWR1YWxseSByZXZlcnRlZC5cbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodC5kYXRhID09PSBcImlzRmxpcFwiKSB7XG4gICAgICAgICAgICB0LnJldmVydCgpO1xuICAgICAgICAgICAgdC5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR3ZWVucy5zcGxpY2UodHdlZW5zLmluZGV4T2YodHdlZW4pLCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBzYXZlIGFzIGFuIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBjYWNoZSB0aGUgZ2xvYmFsVGltZSBmb3IgZWFjaCB0d2VlbiB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBkdXJpbmcgdGhlIHNvcnRcblxuXG4gICAgICAgIHR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZzogdC5fZHVyIHx8IHQuX2RlbGF5IHx8IHQuX3NhdCAmJiAhdC5fc2F0LnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gdC5nbG9iYWxUaW1lKDApIDogLUluZmluaXR5LFxuICAgICAgICAgICAgdDogdFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYi5nIC0gYS5nIHx8IC1JbmZpbml0eTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgIH0pOyAvLyBub3RlOiBhbGwgb2YgdGhlIF9zdGFydEF0IHR3ZWVucyBzaG91bGQgYmUgcmV2ZXJ0ZWQgaW4gcmV2ZXJzZSBvcmRlciB0aGF0IHRoZXkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBsb29wIGJhY2t3YXJkcyBzbyB0aGF0LCBmb3IgZXhhbXBsZSwgU3BsaXRUZXh0cyB0aGF0IHdlcmUgY3JlYXRlZCBsYXRlciBvbiB0aGUgc2FtZSBlbGVtZW50IGdldCByZXZlcnRlZCBmaXJzdFxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgICAgICAgIGlmICh0LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgICAgICAgICAgdC5zY3JvbGxUcmlnZ2VyICYmIHQuc2Nyb2xsVHJpZ2dlci5yZXZlcnQoKTtcbiAgICAgICAgICAgICAgdC5raWxsKCk7IC8vIGRvbid0IHJldmVydCgpIHRoZSB0aW1lbGluZSBiZWNhdXNlIHRoYXQncyBkdXBsaWNhdGluZyBlZmZvcnRzIHNpbmNlIHdlIGFscmVhZHkgcmV2ZXJ0ZWQgYWxsIHRoZSB0d2VlbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgISh0IGluc3RhbmNlb2YgVHdlZW4pICYmIHQucmV2ZXJ0ICYmIHQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM0Ll9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzNC5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICAgIH0pKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIGkgPSBfbWVkaWEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHByZXZpb3VzbHksIHdlIGNoZWNrZWQgX21lZGlhLmluZGV4T2YodGhpcyksIGJ1dCBzb21lIGZyYW1ld29ya3MgbGlrZSBWdWUgZW5mb3JjZSBQcm94eSBvYmplY3RzIHRoYXQgbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGdldCB0aGUgcHJvcGVyIHJlc3VsdCB0aGF0IHdheSwgc28gd2UgbXVzdCB1c2UgYSB1bmlxdWUgSUQgbnVtYmVyIGluc3RlYWQuXG4gICAgICAgIF9tZWRpYVtpXS5pZCA9PT0gdGhpcy5pZCAmJiBfbWVkaWEuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBraWxsV2l0aENsZWFudXAoKSB7XG4gIC8vIFx0dGhpcy5raWxsKCk7XG4gIC8vIFx0dGhpcy5fci5mb3JFYWNoKGYgPT4gZihmYWxzZSwgdGhpcykpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gQ29udGV4dDtcbn0oKTtcblxudmFyIE1hdGNoTWVkaWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICBfY29udGV4dCAmJiBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IE1hdGNoTWVkaWEucHJvdG90eXBlO1xuXG4gIF9wcm90bzYuYWRkID0gZnVuY3Rpb24gYWRkKGNvbmRpdGlvbnMsIGZ1bmMsIHNjb3BlKSB7XG4gICAgX2lzT2JqZWN0KGNvbmRpdGlvbnMpIHx8IChjb25kaXRpb25zID0ge1xuICAgICAgbWF0Y2hlczogY29uZGl0aW9uc1xuICAgIH0pO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoMCwgc2NvcGUgfHwgdGhpcy5zY29wZSksXG4gICAgICAgIGNvbmQgPSBjb250ZXh0LmNvbmRpdGlvbnMgPSB7fSxcbiAgICAgICAgbXEsXG4gICAgICAgIHAsXG4gICAgICAgIGFjdGl2ZTtcbiAgICBfY29udGV4dCAmJiAhY29udGV4dC5zZWxlY3RvciAmJiAoY29udGV4dC5zZWxlY3RvciA9IF9jb250ZXh0LnNlbGVjdG9yKTsgLy8gaW4gY2FzZSBhIGNvbnRleHQgaXMgY3JlYXRlZCBpbnNpZGUgYSBjb250ZXh0LiBMaWtlIGEgZ3NhcC5tYXRjaE1lZGlhKCkgdGhhdCdzIGluc2lkZSBhIHNjb3BlZCBnc2FwLmNvbnRleHQoKVxuXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0LCBmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGNvbnRleHQuYWRkKG51bGwsIGYpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHJlZnJlc2goKSB7XG4gIC8vIFx0bGV0IHRpbWUgPSBfbGFzdE1lZGlhVGltZSxcbiAgLy8gXHRcdG1lZGlhID0gX21lZGlhO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gLTE7XG4gIC8vIFx0X21lZGlhID0gdGhpcy5jb250ZXh0cztcbiAgLy8gXHRfb25NZWRpYUNoYW5nZSgpO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gdGltZTtcbiAgLy8gXHRfbWVkaWEgPSBtZWRpYTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvNi5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgX3Byb3RvNi5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQpIHtcbiAgICB0aGlzLmNvbnRleHRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmtpbGwocmV2ZXJ0LCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWF0Y2hNZWRpYTtcbn0oKTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogR1NBUFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBxdWlja1RvOiBmdW5jdGlvbiBxdWlja1RvKHRhcmdldCwgcHJvcGVydHksIHZhcnMpIHtcbiAgICB2YXIgX3NldERlZmF1bHRzMjtcblxuICAgIHZhciB0d2VlbiA9IGdzYXAudG8odGFyZ2V0LCBfc2V0RGVmYXVsdHMoKF9zZXREZWZhdWx0czIgPSB7fSwgX3NldERlZmF1bHRzMltwcm9wZXJ0eV0gPSBcIis9MC4xXCIsIF9zZXREZWZhdWx0czIucGF1c2VkID0gdHJ1ZSwgX3NldERlZmF1bHRzMi5zdGFnZ2VyID0gMCwgX3NldERlZmF1bHRzMiksIHZhcnMgfHwge30pKSxcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmModmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpIHtcbiAgICAgIHJldHVybiB0d2Vlbi5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7XG4gICAgfTtcblxuICAgIGZ1bmMudHdlZW4gPSB0d2VlbjtcbiAgICByZXR1cm4gZnVuYztcbiAgfSxcbiAgaXNUd2VlbmluZzogZnVuY3Rpb24gaXNUd2VlbmluZyh0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICB9LFxuICBkZWZhdWx0czogZnVuY3Rpb24gZGVmYXVsdHModmFsdWUpIHtcbiAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICB9LFxuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3QsXG4gICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYzLmV4dGVuZFRpbWVsaW5lO1xuICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICB9KTtcblxuICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICB9O1xuXG4gICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKF9lZmZlY3RzW25hbWVdKHRhcmdldHMsIF9pc09iamVjdCh2YXJzKSA/IHZhcnMgOiAocG9zaXRpb24gPSB2YXJzKSAmJiB7fSwgdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICB9LFxuICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgfSxcbiAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gIH0sXG4gIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0O1xuICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICBfZ2xvYmFsVGltZWxpbmUucmVtb3ZlKHRsKTtcblxuICAgIHRsLl9kcCA9IDA7IC8vb3RoZXJ3aXNlIGl0J2xsIGdldCByZS1hY3RpdmF0ZWQgd2hlbiBhZGRpbmcgY2hpbGRyZW4gYW5kIGJlIHJlLWludHJvZHVjZWQgaW50byBfZ2xvYmFsVGltZWxpbmUncyBsaW5rZWQgbGlzdCAodGhlbiBhZGRlZCB0byBpdHNlbGYpLlxuXG4gICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgIGlmIChpbmNsdWRlRGVsYXllZENhbGxzIHx8ICEoIWNoaWxkLl9kdXIgJiYgY2hpbGQgaW5zdGFuY2VvZiBUd2VlbiAmJiBjaGlsZC52YXJzLm9uQ29tcGxldGUgPT09IGNoaWxkLl90YXJnZXRzWzBdKSkge1xuICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgIHJldHVybiB0bDtcbiAgfSxcbiAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHJldHVybiBmdW5jID8gbmV3IENvbnRleHQoZnVuYywgc2NvcGUpIDogX2NvbnRleHQ7XG4gIH0sXG4gIG1hdGNoTWVkaWE6IGZ1bmN0aW9uIG1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoTWVkaWEoc2NvcGUpO1xuICB9LFxuICBtYXRjaE1lZGlhUmVmcmVzaDogZnVuY3Rpb24gbWF0Y2hNZWRpYVJlZnJlc2goKSB7XG4gICAgcmV0dXJuIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgY29uZCA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICBwO1xuXG4gICAgICBmb3IgKHAgaW4gY29uZCkge1xuICAgICAgICBpZiAoY29uZFtwXSkge1xuICAgICAgICAgIGNvbmRbcF0gPSBmYWxzZTtcbiAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm91bmQgJiYgYy5yZXZlcnQoKTtcbiAgICB9KSB8fCBfb25NZWRpYUNoYW5nZSgpO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG4gIH0sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICBwaXBlOiBwaXBlLFxuICAgIHVuaXRpemU6IHVuaXRpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfSxcbiAgaW5zdGFsbDogX2luc3RhbGwsXG4gIGVmZmVjdHM6IF9lZmZlY3RzLFxuICB0aWNrZXI6IF90aWNrZXIsXG4gIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gIHBsdWdpbnM6IF9wbHVnaW5zLFxuICBnbG9iYWxUaW1lbGluZTogX2dsb2JhbFRpbWVsaW5lLFxuICBjb3JlOiB7XG4gICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgZ2xvYmFsczogX2FkZEdsb2JhbCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgIEFuaW1hdGlvbjogQW5pbWF0aW9uLFxuICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgcmV2ZXJ0aW5nOiBmdW5jdGlvbiByZXZlcnRpbmcoKSB7XG4gICAgICByZXR1cm4gX3JldmVydGluZztcbiAgICB9LFxuICAgIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQodG9BZGQpIHtcbiAgICAgIGlmICh0b0FkZCAmJiBfY29udGV4dCkge1xuICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godG9BZGQpO1xuXG4gICAgICAgIHRvQWRkLl9jdHggPSBfY29udGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9jb250ZXh0O1xuICAgIH0sXG4gICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0LCB2O1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICB2ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCBcIlwiO1xuICAgICAgcHQgPSB0aGlzLmFkZCh0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsICh2IHx8IDApICsgXCJcIiwgdmFyc1twXSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgcHQub3AgPSBwO1xuICAgICAgcHQuYiA9IHY7IC8vIHJlY29yZCB0aGUgYmVnaW5uaW5nIHZhbHVlIHNvIHdlIGNhbiByZXZlcnQoKVxuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgX3JldmVydGluZyA/IHB0LnNldChwdC50LCBwdC5wLCBwdC5iLCBwdCkgOiBwdC5yKHJhdGlvLCBwdC5kKTsgLy8gaWYgcmV2ZXJ0aW5nLCBnbyBiYWNrIHRvIHRoZSBvcmlnaW5hbCAocHQuYilcblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG4gIH1cbn0sIHtcbiAgbmFtZTogXCJlbmRBcnJheVwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuYWRkKHRhcmdldCwgaSwgdGFyZ2V0W2ldIHx8IDAsIHZhbHVlW2ldLCAwLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG4gIH1cbn0sIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwicm91bmRQcm9wc1wiLCBfcm91bmRNb2RpZmllciksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwibW9kaWZpZXJzXCIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcInNuYXBcIiwgc25hcCkpIHx8IF9nc2FwOyAvL3RvIHByZXZlbnQgdGhlIGNvcmUgcGx1Z2lucyBmcm9tIGJlaW5nIGRyb3BwZWQgdmlhIGFnZ3Jlc3NpdmUgdHJlZSBzaGFraW5nLCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gdGhpcyB3YXkuXG5cblR3ZWVuLnZlcnNpb24gPSBUaW1lbGluZS52ZXJzaW9uID0gZ3NhcC52ZXJzaW9uID0gXCIzLjEyLjdcIjtcbl9jb3JlUmVhZHkgPSAxO1xuX3dpbmRvd0V4aXN0cygpICYmIF93YWtlKCk7XG52YXIgUG93ZXIwID0gX2Vhc2VNYXAuUG93ZXIwLFxuICAgIFBvd2VyMSA9IF9lYXNlTWFwLlBvd2VyMSxcbiAgICBQb3dlcjIgPSBfZWFzZU1hcC5Qb3dlcjIsXG4gICAgUG93ZXIzID0gX2Vhc2VNYXAuUG93ZXIzLFxuICAgIFBvd2VyNCA9IF9lYXNlTWFwLlBvd2VyNCxcbiAgICBMaW5lYXIgPSBfZWFzZU1hcC5MaW5lYXIsXG4gICAgUXVhZCA9IF9lYXNlTWFwLlF1YWQsXG4gICAgQ3ViaWMgPSBfZWFzZU1hcC5DdWJpYyxcbiAgICBRdWFydCA9IF9lYXNlTWFwLlF1YXJ0LFxuICAgIFF1aW50ID0gX2Vhc2VNYXAuUXVpbnQsXG4gICAgU3Ryb25nID0gX2Vhc2VNYXAuU3Ryb25nLFxuICAgIEVsYXN0aWMgPSBfZWFzZU1hcC5FbGFzdGljLFxuICAgIEJhY2sgPSBfZWFzZU1hcC5CYWNrLFxuICAgIFN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuU3RlcHBlZEVhc2UsXG4gICAgQm91bmNlID0gX2Vhc2VNYXAuQm91bmNlLFxuICAgIFNpbmUgPSBfZWFzZU1hcC5TaW5lLFxuICAgIEV4cG8gPSBfZWFzZU1hcC5FeHBvLFxuICAgIENpcmMgPSBfZWFzZU1hcC5DaXJjO1xuZXhwb3J0IHsgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07XG5leHBvcnQgeyBUd2VlbiBhcyBUd2Vlbk1heCwgVHdlZW4gYXMgVHdlZW5MaXRlLCBUaW1lbGluZSBhcyBUaW1lbGluZU1heCwgVGltZWxpbmUgYXMgVGltZWxpbmVMaXRlLCBnc2FwIGFzIGRlZmF1bHQsIHdyYXAsIHdyYXBZb3lvLCBkaXN0cmlidXRlLCByYW5kb20sIHNuYXAsIG5vcm1hbGl6ZSwgZ2V0VW5pdCwgY2xhbXAsIHNwbGl0Q29sb3IsIHRvQXJyYXksIHNlbGVjdG9yLCBtYXBSYW5nZSwgcGlwZSwgdW5pdGl6ZSwgaW50ZXJwb2xhdGUsIHNodWZmbGUgfTsgLy9leHBvcnQgc29tZSBpbnRlcm5hbCBtZXRob2RzL29yb2plY3RzIGZvciB1c2UgaW4gQ1NTUGx1Z2luIHNvIHRoYXQgd2UgY2FuIGV4dGVybmFsaXplIHRoYXQgZmlsZSBhbmQgYWxsb3cgY3VzdG9tIGJ1aWxkcyB0aGF0IGV4Y2x1ZGUgaXQuXG5cbmV4cG9ydCB7IF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX3JlcGxhY2VSYW5kb20sIF9jaGVja1BsdWdpbiwgX3BsdWdpbnMsIF90aWNrZXIsIF9jb25maWcsIF9yb3VuZE1vZGlmaWVyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUgfTsiXSwibmFtZXMiOlsiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfY29uZmlnIiwiYXV0b1NsZWVwIiwiZm9yY2UzRCIsIm51bGxUYXJnZXRXYXJuIiwidW5pdHMiLCJsaW5lSGVpZ2h0IiwiX2RlZmF1bHRzIiwiZHVyYXRpb24iLCJvdmVyd3JpdGUiLCJkZWxheSIsIl9zdXBwcmVzc092ZXJ3cml0ZXMiLCJfcmV2ZXJ0aW5nIiwiX2NvbnRleHQiLCJfYmlnTnVtIiwiX3RpbnlOdW0iLCJfMlBJIiwiTWF0aCIsIlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0Iiwic3FydCIsIl9jb3MiLCJjb3MiLCJfc2luIiwic2luIiwiX2lzU3RyaW5nIiwidmFsdWUiLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc1VuZGVmaW5lZCIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX3dpbmRvd0V4aXN0cyIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9udW1FeHAiLCJfbnVtV2l0aFVuaXRFeHAiLCJfY29tcGxleFN0cmluZ051bUV4cCIsIl9yZWxFeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxUaW1lbGluZSIsIl93aW4iLCJfY29yZUluaXR0ZWQiLCJfZG9jIiwiX2dsb2JhbHMiLCJfaW5zdGFsbFNjb3BlIiwiX2NvcmVSZWFkeSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJnc2FwIiwiX21pc3NpbmdQbHVnaW4iLCJwcm9wZXJ0eSIsImNvbnNvbGUiLCJ3YXJuIiwiX3dhcm4iLCJtZXNzYWdlIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwibmFtZSIsIm9iaiIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwiaXNTdGFydCIsImtpbGwiLCJfcmV2ZXJ0Q29uZmlnTm9LaWxsIiwiX3JldmVydENvbmZpZyIsIl9yZXNlcnZlZFByb3BzIiwiX2xhenlUd2VlbnMiLCJfbGF6eUxvb2t1cCIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9wbHVnaW5zIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwidGFyZ2V0cyIsInRhcmdldCIsImhhcm5lc3NQbHVnaW4iLCJpIiwiX2dzYXAiLCJoYXJuZXNzIiwibGVuZ3RoIiwidGFyZ2V0VGVzdCIsIkdTQ2FjaGUiLCJzcGxpY2UiLCJfZ2V0Q2FjaGUiLCJ0b0FycmF5IiwiX2dldFByb3BlcnR5IiwidiIsImdldEF0dHJpYnV0ZSIsIl9mb3JFYWNoTmFtZSIsIm5hbWVzIiwiZnVuYyIsInNwbGl0IiwiZm9yRWFjaCIsIl9yb3VuZCIsInJvdW5kIiwiX3JvdW5kUHJlY2lzZSIsIl9wYXJzZVJlbGF0aXZlIiwic3RhcnQiLCJvcGVyYXRvciIsImNoYXJBdCIsImVuZCIsInBhcnNlRmxvYXQiLCJzdWJzdHIiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwibCIsImluZGV4T2YiLCJfbGF6eVJlbmRlciIsImEiLCJzbGljZSIsInR3ZWVuIiwiX2xhenkiLCJyZW5kZXIiLCJfbGF6eVNhZmVSZW5kZXIiLCJhbmltYXRpb24iLCJ0aW1lIiwiZm9yY2UiLCJfaW5pdHRlZCIsIl9zdGFydEF0IiwiX251bWVyaWNJZlBvc3NpYmxlIiwibiIsIm1hdGNoIiwidHJpbSIsIl9wYXNzVGhyb3VnaCIsInAiLCJfc2V0RGVmYXVsdHMiLCJkZWZhdWx0cyIsIl9zZXRLZXlmcmFtZURlZmF1bHRzIiwiZXhjbHVkZUR1cmF0aW9uIiwiYmFzZSIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJjb3B5IiwiX2luaGVyaXREZWZhdWx0cyIsInZhcnMiLCJwYXJlbnQiLCJrZXlmcmFtZXMiLCJpbmhlcml0IiwiX2RwIiwiX2FycmF5c01hdGNoIiwiYTEiLCJhMiIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsImNoaWxkIiwiZmlyc3RQcm9wIiwibGFzdFByb3AiLCJzb3J0QnkiLCJwcmV2IiwidCIsIl9wcmV2IiwiX25leHQiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJuZXh0IiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwicmVtb3ZlIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9kdXIiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsInJldmVydCIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiZmxvb3IiLCJfcGFyZW50VG9DaGlsZFRvdGFsVGltZSIsInBhcmVudFRpbWUiLCJfdER1ciIsIl9zZXRFbmQiLCJhYnMiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl90aW1lIiwiX3Bvc3RBZGRDaGVja3MiLCJ0aW1lbGluZSIsImFkZCIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInBvc2l0aW9uIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsIl9wdCIsImxhenkiLCJfdGlja2VyIiwiZnJhbWUiLCJwdXNoIiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9yZWYiLCJfbG9jayIsIl9yZWYyIiwiZGF0YSIsIl9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiIsInByZXZSYXRpbyIsInJhdGlvIiwicmVwZWF0RGVsYXkiLCJwdCIsIml0ZXJhdGlvbiIsInByZXZJdGVyYXRpb24iLCJfeW95byIsInJlcGVhdFJlZnJlc2giLCJpbnZhbGlkYXRlIiwiX2Zyb20iLCJyIiwiZCIsIl9vblVwZGF0ZSIsIl9jYWxsYmFjayIsIl9wcm9tIiwiX2ZpbmROZXh0UGF1c2VUd2VlbiIsInByZXZUaW1lIiwiX2ZpcnN0IiwiX2xhc3QiLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJyZXBlYXQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwib2Zmc2V0IiwiaXNQZXJjZW50IiwiaXNOYU4iLCJyZXBsYWNlIiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInR5cGUiLCJwYXJhbXMiLCJpc0xlZ2FjeSIsInZhcnNJbmRleCIsImlyVmFycyIsInJ1bkJhY2t3YXJkcyIsInN0YXJ0QXQiLCJUd2VlbiIsIl9jb25kaXRpb25hbFJldHVybiIsIm1pbiIsIm1heCIsImdldFVuaXQiLCJleGVjIiwiY2xhbXAiLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIm5vZGVUeXBlIiwiX2ZsYXR0ZW4iLCJhciIsImxlYXZlU3RyaW5ncyIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiYXBwbHkiLCJzZWxlY3RvciIsIl93YWtlIiwiY2FsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbCIsImN1cnJlbnQiLCJuYXRpdmVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNodWZmbGUiLCJzb3J0IiwicmFuZG9tIiwiZGlzdHJpYnV0ZSIsImVhY2giLCJlYXNlIiwiX3BhcnNlRWFzZSIsImZyb20iLCJjYWNoZSIsImlzRGVjaW1hbCIsInJhdGlvcyIsImF4aXMiLCJyYXRpb1giLCJyYXRpb1kiLCJjZW50ZXIiLCJlZGdlcyIsImRpc3RhbmNlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwieCIsInkiLCJqIiwid3JhcEF0IiwiZ3JpZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJhbW91bnQiLCJiIiwidSIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImNsb3Nlc3QiLCJkeCIsImR5Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiYXJndW1lbnRzIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsImYiLCJ1bml0aXplIiwidW5pdCIsIm5vcm1hbGl6ZSIsIm1hcFJhbmdlIiwiX3dyYXBBcnJheSIsIndyYXBwZXIiLCJpbmRleCIsIndyYXAiLCJyYW5nZSIsIndyYXBZb3lvIiwidG90YWwiLCJfcmVwbGFjZVJhbmRvbSIsInMiLCJudW1zIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsImludGVycG9sYXRlIiwicHJvZ3Jlc3MiLCJtdXRhdGUiLCJpc1N0cmluZyIsIm1hc3RlciIsImludGVycG9sYXRvcnMiLCJpbCIsIl9hZGRQcm9wVHdlZW4iLCJfcmVuZGVyUHJvcFR3ZWVucyIsIl9nZXRMYWJlbEluRGlyZWN0aW9uIiwiZnJvbVRpbWUiLCJiYWNrd2FyZCIsImRpc3RhbmNlIiwibGFiZWwiLCJleGVjdXRlTGF6eUZpcnN0IiwiY2FsbGJhY2siLCJwcmV2Q29udGV4dCIsImNvbnRleHQiLCJfY3R4IiwicmVzdWx0IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJzY3JvbGxUcmlnZ2VyIiwiX3F1aWNrVHdlZW4iLCJfcmVnaXN0ZXJQbHVnaW5RdWV1ZSIsIl9jcmVhdGVQbHVnaW4iLCJjb25maWciLCJoZWFkbGVzcyIsImlzRnVuYyIsIlBsdWdpbiIsImluaXQiLCJfcHJvcHMiLCJpbnN0YW5jZURlZmF1bHRzIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJtb2RpZmllciIsIl9hZGRQbHVnaW5Nb2RpZmllciIsInJhd1ZhcnMiLCJzdGF0aWNzIiwiZ2V0IiwiZ2V0U2V0dGVyIiwiX2dldFNldHRlciIsImFsaWFzZXMiLCJyZWdpc3RlciIsInByb3AiLCJ0b1VwcGVyQ2FzZSIsIlByb3BUd2VlbiIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwiaCIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiZyIsIndhc0hTTCIsInBhcnNlSW50IiwibWFwIiwiTnVtYmVyIiwiX2NvbG9yT3JkZXJEYXRhIiwiYyIsIl9jb2xvckV4cCIsIl9mb3JtYXRDb2xvcnMiLCJvcmRlck1hdGNoRGF0YSIsImNvbG9ycyIsInNoZWxsIiwiY29sb3IiLCJqb2luIiwic2hpZnQiLCJSZWdFeHAiLCJfaHNsRXhwIiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiY29tYmluZWQiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwiX3RpY2tlckFjdGl2ZSIsIl9nZXRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2xpc3RlbmVycyIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfaSIsIl90aWNrIiwiZWxhcHNlZCIsIm1hbnVhbCIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsIndpbmRvdyIsImRvY3VtZW50IiwiZ3NhcFZlcnNpb25zIiwidmVyc2lvbiIsIkdyZWVuU29ja0dsb2JhbHMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzbGVlcCIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiSW5maW5pdHkiLCJfZnBzIiwib25jZSIsInByaW9yaXRpemUiLCJfZWFzZU1hcCIsIl9jdXN0b21FYXNlRXhwIiwiX3F1b3Rlc0V4cCIsIl9wYXJzZU9iamVjdEluU3RyaW5nIiwia2V5IiwidmFsIiwicGFyc2VkVmFsIiwibGFzdEluZGV4T2YiLCJfdmFsdWVJblBhcmVudGhlc2VzIiwib3BlbiIsImNsb3NlIiwibmVzdGVkIiwic3Vic3RyaW5nIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX0NFIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwieW95b0Vhc2UiLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwibG93ZXJjYXNlTmFtZSIsInRvTG93ZXJDYXNlIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwibjEiLCJuMiIsIm4zIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiaWQiLCJzZXQiLCJBbmltYXRpb24iLCJ5b3lvIiwiX3Byb3RvIiwic3RhcnRUaW1lIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIl9wcyIsInBhdXNlZCIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwiX3NhdCIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicmV2ZXJzZSIsInBhdXNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaXNBY3RpdmUiLCJldmVudENhbGxiYWNrIiwidGhlbiIsIm9uRnVsZmlsbGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJfcmVzb2x2ZSIsIl90aGVuIiwiX0FuaW1hdGlvbiIsIl90aGlzIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsInRvIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIm9uVXBkYXRlIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiYWRkTGFiZWwiLCJnZXRDaGlsZHJlbiIsInR3ZWVucyIsInRpbWVsaW5lcyIsImlnbm9yZUJlZm9yZVRpbWUiLCJnZXRCeUlkIiwiYW5pbWF0aW9ucyIsInJlbW92ZUxhYmVsIiwia2lsbFR3ZWVuc09mIiwiX3RvdGFsVGltZTIiLCJhZGRQYXVzZSIsInJlbW92ZVBhdXNlIiwicHJvcHMiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsInBhcnNlZFRhcmdldHMiLCJpc0dsb2JhbFRpbWUiLCJjaGlsZHJlbiIsIl90YXJnZXRzIiwidHdlZW5UbyIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwiaW5pdHRlZCIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsInNvZnQiLCJjbGVhciIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIm1hdGNoSW5kZXgiLCJzdGFydE51bXMiLCJlbmROdW0iLCJjaHVuayIsInN0YXJ0TnVtIiwiaGFzUmFuZG9tIiwiZSIsIm0iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyUGxhaW4iLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX2ZvcmNlQWxsUHJvcFR3ZWVucyIsIl9yZW5kZXJCb29sZWFuIiwiX3JlbmRlclBsYWluIiwiX3Byb2Nlc3NWYXJzIiwiX3BhcnNlRnVuY09yU3RyaW5nIiwic3R5bGUiLCJfY2hlY2tQbHVnaW4iLCJwbHVnaW4iLCJwdExvb2t1cCIsInByaW9yaXR5IiwicHJldlN0YXJ0QXQiLCJmdWxsVGFyZ2V0cyIsImF1dG9PdmVyd3JpdGUiLCJfb3ZlcndyaXRlIiwiY2xlYW5WYXJzIiwiaGFzUHJpb3JpdHkiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwiX3B0Q2FjaGUiLCJfb3AiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX29uSW5pdCIsIl91cGRhdGVQcm9wVHdlZW5zIiwic3RhcnRJc1JlbGF0aXZlIiwic2tpcFJlY3Vyc2lvbiIsInB0Q2FjaGUiLCJyb290UFQiLCJsb29rdXAiLCJfYWRkQWxpYXNlc1RvVmFycyIsInByb3BlcnR5QWxpYXNlcyIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiX3RoaXMzJHZhcnMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJyZXNldFRvIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJvcCIsImRlcCIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsImxhc3QiLCJwciIsImNoYW5nZSIsInJlbmRlcmVyIiwiX3Byb3RvNCIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfZW1wdHlBcnJheSIsIl9sYXN0TWVkaWFUaW1lIiwiX2NvbnRleHRJRCIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwiYW55TWF0Y2giLCJ0b2dnbGVkIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwiY29uZCIsIm1xIiwiYWN0aXZlIiwiYWRkTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVnaXN0ZXJQbHVnaW4iLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsImdldFByb3BlcnR5IiwidW5jYWNoZSIsImdldHRlciIsImZvcm1hdCIsInF1aWNrU2V0dGVyIiwic2V0dGVycyIsInF1aWNrVG8iLCJfc2V0RGVmYXVsdHMyIiwiaXNUd2VlbmluZyIsInJlZ2lzdGVyRWZmZWN0IiwiX3JlZjMiLCJlZmZlY3QiLCJwbHVnaW5zIiwiZXh0ZW5kVGltZWxpbmUiLCJwbHVnaW5OYW1lIiwicmVnaXN0ZXJFYXNlIiwicGFyc2VFYXNlIiwiZXhwb3J0Um9vdCIsImluY2x1ZGVEZWxheWVkQ2FsbHMiLCJtYXRjaE1lZGlhUmVmcmVzaCIsImZvdW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInV0aWxzIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJ0aWNrZXIiLCJnbG9iYWxUaW1lbGluZSIsImNvcmUiLCJnbG9iYWxzIiwiZ2V0Q2FjaGUiLCJyZXZlcnRpbmciLCJ0b0FkZCIsInN1cHByZXNzT3ZlcndyaXRlcyIsIl9nZXRQbHVnaW5Qcm9wVHdlZW4iLCJfYWRkTW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiX2J1aWxkTW9kaWZpZXJQbHVnaW4iLCJ0ZW1wIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/gsap-core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Back: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),\n/* harmony export */   Bounce: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),\n/* harmony export */   CSSPlugin: () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),\n/* harmony export */   Circ: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),\n/* harmony export */   Cubic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),\n/* harmony export */   Elastic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),\n/* harmony export */   Expo: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),\n/* harmony export */   Linear: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),\n/* harmony export */   Power0: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),\n/* harmony export */   Power1: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),\n/* harmony export */   Power2: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),\n/* harmony export */   Power3: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),\n/* harmony export */   Power4: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),\n/* harmony export */   Quad: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),\n/* harmony export */   Quart: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),\n/* harmony export */   Quint: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),\n/* harmony export */   Sine: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),\n/* harmony export */   SteppedEase: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),\n/* harmony export */   Strong: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),\n/* harmony export */   TimelineLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),\n/* harmony export */   TimelineMax: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),\n/* harmony export */   TweenLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),\n/* harmony export */   TweenMax: () => (/* binding */ TweenMaxWithCSS),\n/* harmony export */   \"default\": () => (/* binding */ gsapWithCSS),\n/* harmony export */   gsap: () => (/* binding */ gsapWithCSS)\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(ssr)/./node_modules/gsap/gsap-core.js\");\n/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ \"(ssr)/./node_modules/gsap/CSSPlugin.js\");\n\n\nvar gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap, // to protect from tree shaking\nTweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcU47QUFDMUs7QUFDM0MsSUFBSXVCLGNBQWN2QiwrQ0FBSUEsQ0FBQ3dCLGNBQWMsQ0FBQ0Ysb0RBQVNBLEtBQUt0QiwrQ0FBSUEsRUFDcEQsK0JBQStCO0FBQ25DeUIsa0JBQWtCRixZQUFZRyxJQUFJLENBQUNDLEtBQUs7QUFDc08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93NGMtYWRtaW4tcGFuZWwvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcz8xOGU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiXSwibmFtZXMiOlsiZ3NhcCIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIkxpbmVhciIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIlN0ZXBwZWRFYXNlIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJDU1NQbHVnaW4iLCJnc2FwV2l0aENTUyIsInJlZ2lzdGVyUGx1Z2luIiwiVHdlZW5NYXhXaXRoQ1NTIiwiY29yZSIsIlR3ZWVuIiwiZGVmYXVsdCIsIlR3ZWVuTWF4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/index.js\n");

/***/ })

};
;